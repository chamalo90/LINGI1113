gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 3-26-2012  15:39:16
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Mar 13 2012) (UNIX)
                                           ; This file was generated Mon Mar 26 15:39:16 2012
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _update_lcd
                                           	global _convert_value
                                           	global _DisplayWORD
                                           	global _DisplayString
                                           	global _strlcpy
                                           	global _ring_today
                                           	global _alarm_set
                                           	global _alarm_ring
                                           	global _state
                                           	global _hour
                                           	global _minute
                                           	global _second
                                           	global _alarm_hour
                                           	global _alarm_minute
                                           	global _blink
                                           	global _high_isrr
                                           	global _check_alarm
                                           	global _add_second
                                           	global _timer0_conf
                                           	global _main
                                           	global _add_minute
                                           	global _add_hour
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _sprintf
                                           	extern _ultoa
                                           	extern _strlen
                                           	extern _LCDInit
                                           	extern _LCDUpdate
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _ring_today	db	0x00, 0x00
                                           _alarm_set	db	0x00, 0x00
                                           _alarm_ring	db	0x00, 0x00
                                           _state	db	0x00, 0x00
                                           _hour	db	0x00, 0x00
                                           _minute	db	0x00, 0x00
                                           _second	db	0x00, 0x00
                                           _alarm_hour	db	0x00, 0x00
                                           _alarm_minute	db	0x00, 0x00
                                           _blink	db	0x01, 0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           
                                           udata_test_0	udata
                                           _update_lcd_lcd_1_1	res	32
                                           
                                           udata_test_1	udata
                                           _update_lcd_h_1_1	res	3
                                           
                                           udata_test_2	udata
                                           _update_lcd_m_1_1	res	3
                                           
                                           udata_test_3	udata
                                           _update_lcd_s_1_1	res	3
                                           
                                           udata_test_4	udata
                                           _update_lcd_a_h_1_1	res	3
                                           
                                           udata_test_5	udata
                                           _update_lcd_a_m_1_1	res	3
                                           
                                           udata_test_6	udata
                                           _DisplayWORD_WDigit_1_1	res	6
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_test_ivec_0x1_high_isrr	code	0X000008
                                           ivec_0x1_high_isrr:
000008   ef07     goto	0x120e              	GOTO	_high_isrr
00000a   f009
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_test__main	code
                                           _main:
                                           ;	.line	233; test.c	timer0_conf();	
002c74   ec81     call	0x2d02, 0           	CALL	_timer0_conf
002c76   f016
                                           ;	.line	235; test.c	LED0_TRIS = 0; //configure 1st led pin as output (yellow)
002c78   909a     bcf	0x9a, 0, 0           	BCF	_TRISJbits, 0
                                           ;	.line	236; test.c	LED1_TRIS = 0; //configure 2nd led pin as output (red)
002c7a   929a     bcf	0x9a, 0x1, 0         	BCF	_TRISJbits, 1
                                           ;	.line	237; test.c	LED2_TRIS = 0; //configure 3rd led pin as output (red)
002c7c   949a     bcf	0x9a, 0x2, 0         	BCF	_TRISJbits, 2
                                           ;	.line	239; test.c	RCONbits.IPEN      = 1;   //enable interrupts priority levels
002c7e   8ed0     bsf	0xd0, 0x7, 0         	BSF	_RCONbits, 7
                                           ;	.line	240; test.c	INTCON2bits.INTEDG1= 0;   //INT1 interrupts on falling edge
002c80   9af1     bcf	0xf1, 0x5, 0         	BCF	_INTCON2bits, 5
                                           ;	.line	241; test.c	INTCONbits.GIE     = 1;   //enable high priority interrupts
002c82   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	243; test.c	INTCON3bits.INT1E  = 1;   //enable INT1 interrupt (button 2)
002c84   86f0     bsf	0xf0, 0x3, 0         	BSF	_INTCON3bits, 3
                                           ;	.line	244; test.c	INTCON3bits.INT1F  = 0;   //clear INT1 flag
002c86   90f0     bcf	0xf0, 0, 0           	BCF	_INTCON3bits, 0
                                           ;	.line	246; test.c	INTCON3bits.INT3E  = 1;   //enable INT1 interrupt (button 2)
002c88   8af0     bsf	0xf0, 0x5, 0         	BSF	_INTCON3bits, 5
                                           ;	.line	247; test.c	INTCON3bits.INT3F  = 0;   //clear INT1 flag
002c8a   94f0     bcf	0xf0, 0x2, 0         	BCF	_INTCON3bits, 2
                                           ;	.line	249; test.c	LCDInit();
002c8c   ec2c     call	0x1a58, 0           	CALL	_LCDInit
002c8e   f00d
                                           ;	.line	251; test.c	state = CONFIG_CLOCK_HOUR;   
002c90   0e04     movlw	0x4                	MOVLW	0x04
002c92   010f     movlb	0xf                	BANKSEL	_state
002c94   6f47     movwf	0x47, 0x1          	MOVWF	_state, B
002c96   010f     movlb	0xf                	BANKSEL	(_state + 1)
002c98   6b48     clrf	0x48, 0x1           	CLRF	(_state + 1), B
                                           ;	.line	252; test.c	blink^=1;
002c9a   0e01     movlw	0x1                	MOVLW	0x01
002c9c   010f     movlb	0xf                	BANKSEL	_blink
002c9e   1b53     xorwf	0x53, 0x1, 0x1     	XORWF	_blink, F, B
                                           ;	.line	253; test.c	update_lcd();      
002ca0   ec06     call	0xc, 0              	CALL	_update_lcd
002ca2   f000
                                           ;	.line	254; test.c	T0CONbits.TMR0ON = 1;
002ca4   8ed5     bsf	0xd5, 0x7, 0         	BSF	_T0CONbits, 7
002ca6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__strlcpy	code
                                           _strlcpy:
                                           ;	.line	481; test.c	strlcpy(char *dst, const char *src, size_t siz)
001cb4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001cb6   ffe5
001cb8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001cba   ffd9
001cbc   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001cbe   ffe5
001cc0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001cc2   ffe5
001cc4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001cc6   ffe5
001cc8   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001cca   ffe5
001ccc   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001cce   ffe5
001cd0   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001cd2   ffe5
001cd4   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001cd6   ffe5
001cd8   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001cda   ffe5
001cdc   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001cde   ffe5
001ce0   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001ce2   ffe5
001ce4   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
001ce6   ffe5
001ce8   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
001cea   ffe5
001cec   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
001cee   ffe5
001cf0   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
001cf2   ffe5
001cf4   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
001cf6   ffe5
001cf8   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
001cfa   ffe5
001cfc   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
001cfe   ffe5
001d00   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
001d02   ffe5
001d04   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
001d06   ffe5
001d08   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
001d0a   ffe5
001d0c   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
001d0e   ffe5
001d10   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
001d12   ffe5
001d14   0e02     movlw	0x2                	MOVLW	0x02
001d16   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001d18   f000
001d1a   0e03     movlw	0x3                	MOVLW	0x03
001d1c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001d1e   f001
001d20   0e04     movlw	0x4                	MOVLW	0x04
001d22   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001d24   f002
001d26   0e05     movlw	0x5                	MOVLW	0x05
001d28   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001d2a   f003
001d2c   0e06     movlw	0x6                	MOVLW	0x06
001d2e   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
001d30   f004
001d32   0e07     movlw	0x7                	MOVLW	0x07
001d34   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
001d36   f005
001d38   0e08     movlw	0x8                	MOVLW	0x08
001d3a   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
001d3c   f006
001d3e   0e09     movlw	0x9                	MOVLW	0x09
001d40   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
001d42   f007
                                           ;	.line	483; test.c	char       *d = dst;
001d44   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
001d46   f008
001d48   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
001d4a   f009
001d4c   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
001d4e   f00a
                                           ;	.line	484; test.c	const char *s = src;
001d50   c003     movff	0x3, 0xb           	MOVFF	r0x03, r0x0b
001d52   f00b
001d54   c004     movff	0x4, 0xc           	MOVFF	r0x04, r0x0c
001d56   f00c
001d58   c005     movff	0x5, 0xd           	MOVFF	r0x05, r0x0d
001d5a   f00d
                                           ;	.line	485; test.c	size_t      n = siz;
001d5c   c006     movff	0x6, 0xe           	MOVFF	r0x06, r0x0e
001d5e   f00e
001d60   c007     movff	0x7, 0xf           	MOVFF	r0x07, r0x0f
001d62   f00f
                                           ;	.line	488; test.c	if (n != 0)
001d64   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001d66   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001d68   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
001d6a   d03e     bra	0x1de8               	BRA	_00469_DS_
                                           ;	.line	490; test.c	while (--n != 0)
001d6c   c003     movff	0x3, 0x10          	MOVFF	r0x03, r0x10
001d6e   f010
001d70   c004     movff	0x4, 0x11          	MOVFF	r0x04, r0x11
001d72   f011
001d74   c005     movff	0x5, 0x12          	MOVFF	r0x05, r0x12
001d76   f012
001d78   c006     movff	0x6, 0x13          	MOVFF	r0x06, r0x13
001d7a   f013
001d7c   c007     movff	0x7, 0x14          	MOVFF	r0x07, r0x14
001d7e   f014
                                           _00465_DS_:
001d80   0eff     movlw	0xff               	MOVLW	0xff
001d82   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x13, F
001d84   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
001d86   0614     decf	0x14, 0x1, 0        	DECF	r0x14, F
001d88   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
001d8a   1014     iorwf	0x14, 0, 0         	IORWF	r0x14, W
001d8c   e01d     bz	0x1dc8                	BZ	_00484_DS_
                                           ;	.line	492; test.c	if ((*d++ = *s++) == '\0')
001d8e   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
001d90   ffe9
001d92   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
001d94   fff3
001d96   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
001d98   ec93     call	0x2d26, 0           	CALL	__gptrget1
001d9a   f016
001d9c   6e15     movwf	0x15, 0            	MOVWF	r0x15
001d9e   2a10     incf	0x10, 0x1, 0        	INCF	r0x10, F
001da0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001da2   2a11     incf	0x11, 0x1, 0        	INCF	r0x11, F
001da4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001da6   2a12     incf	0x12, 0x1, 0        	INCF	r0x12, F
001da8   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
001daa   ffe5
001dac   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001dae   ffe9
001db0   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
001db2   fff3
001db4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001db6   ecc9     call	0x2d92, 0           	CALL	__gptrput1
001db8   f016
001dba   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001dbc   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001dbe   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
001dc0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001dc2   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
001dc4   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
001dc6   e1dc     bnz	0x1d80               	BNZ	_00465_DS_
                                           _00484_DS_:
                                           ;	.line	493; test.c	break;
001dc8   c010     movff	0x10, 0xb          	MOVFF	r0x10, r0x0b
001dca   f00b
001dcc   c011     movff	0x11, 0xc          	MOVFF	r0x11, r0x0c
001dce   f00c
001dd0   c012     movff	0x12, 0xd          	MOVFF	r0x12, r0x0d
001dd2   f00d
001dd4   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
001dd6   f008
001dd8   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
001dda   f009
001ddc   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
001dde   f00a
001de0   c013     movff	0x13, 0xe          	MOVFF	r0x13, r0x0e
001de2   f00e
001de4   c014     movff	0x14, 0xf          	MOVFF	r0x14, r0x0f
001de6   f00f
                                           _00469_DS_:
                                           ;	.line	498; test.c	if (n == 0)
001de8   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
001dea   100f     iorwf	0xf, 0, 0          	IORWF	r0x0f, W
001dec   e127     bnz	0x1e3c               	BNZ	_00476_DS_
                                           ;	.line	500; test.c	if (siz != 0)
001dee   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001df0   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001df2   e009     bz	0x1e06                	BZ	_00483_DS_
                                           ;	.line	501; test.c	*d = '\0';          /* NUL-terminate dst */
001df4   0e00     movlw	0                  	MOVLW	0x00
001df6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001df8   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
001dfa   ffe9
001dfc   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
001dfe   fff3
001e00   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001e02   ecc9     call	0x2d92, 0           	CALL	__gptrput1
001e04   f016
                                           _00483_DS_:
                                           ;	.line	502; test.c	while (*s++)
001e06   c00b     movff	0xb, 0             	MOVFF	r0x0b, r0x00
001e08   f000
001e0a   c00c     movff	0xc, 0x1           	MOVFF	r0x0c, r0x01
001e0c   f001
001e0e   c00d     movff	0xd, 0x2           	MOVFF	r0x0d, r0x02
001e10   f002
                                           _00472_DS_:
001e12   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001e14   ffe9
001e16   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
001e18   fff3
001e1a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001e1c   ec93     call	0x2d26, 0           	CALL	__gptrget1
001e1e   f016
001e20   6e06     movwf	0x6, 0             	MOVWF	r0x06
001e22   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001e24   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001e26   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
001e28   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001e2a   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
001e2c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001e2e   e1f1     bnz	0x1e12               	BNZ	_00472_DS_
001e30   c000     movff	0, 0xb             	MOVFF	r0x00, r0x0b
001e32   f00b
001e34   c001     movff	0x1, 0xc           	MOVFF	r0x01, r0x0c
001e36   f00c
001e38   c002     movff	0x2, 0xd           	MOVFF	r0x02, r0x0d
001e3a   f00d
                                           _00476_DS_:
                                           ;	.line	508; test.c	return (s - src - 1);       /* count does not include NUL */
001e3c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001e3e   5c0b     subwf	0xb, 0, 0          	SUBWF	r0x0b, W
001e40   6e03     movwf	0x3, 0             	MOVWF	r0x03
001e42   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001e44   580c     subwfb	0xc, 0, 0         	SUBWFB	r0x0c, W
001e46   6e04     movwf	0x4, 0             	MOVWF	r0x04
001e48   0eff     movlw	0xff               	MOVLW	0xff
001e4a   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
001e4c   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
001e4e   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
001e50   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
001e52   fff3
001e54   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001e56   cfe4     movff	0xfe4, 0x15        	MOVFF	PREINC1, r0x15
001e58   f015
001e5a   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
001e5c   f014
001e5e   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
001e60   f013
001e62   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
001e64   f012
001e66   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
001e68   f011
001e6a   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
001e6c   f010
001e6e   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
001e70   f00f
001e72   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
001e74   f00e
001e76   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
001e78   f00d
001e7a   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
001e7c   f00c
001e7e   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
001e80   f00b
001e82   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
001e84   f00a
001e86   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001e88   f009
001e8a   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001e8c   f008
001e8e   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001e90   f007
001e92   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001e94   f006
001e96   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001e98   f005
001e9a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001e9c   f004
001e9e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001ea0   f003
001ea2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001ea4   f002
001ea6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001ea8   f001
001eaa   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001eac   f000
001eae   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001eb0   ffd9
001eb2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__DisplayString	code
                                           _DisplayString:
                                           ;	.line	435; test.c	void DisplayString(BYTE pos, char* text)
0025b0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0025b2   ffe5
0025b4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0025b6   ffd9
0025b8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0025ba   ffe5
0025bc   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0025be   ffe5
0025c0   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0025c2   ffe5
0025c4   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0025c6   ffe5
0025c8   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0025ca   ffe5
0025cc   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0025ce   ffe5
0025d0   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0025d2   ffe5
0025d4   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0025d6   ffe5
0025d8   0e02     movlw	0x2                	MOVLW	0x02
0025da   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0025dc   f000
0025de   0e03     movlw	0x3                	MOVLW	0x03
0025e0   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0025e2   f001
0025e4   0e04     movlw	0x4                	MOVLW	0x04
0025e6   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0025e8   f002
0025ea   0e05     movlw	0x5                	MOVLW	0x05
0025ec   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0025ee   f003
                                           ;	.line	437; test.c	BYTE l= strlen(text)+1;
0025f0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0025f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025f4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0025f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025f8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0025fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025fc   ec0a     call	0x2a14, 0           	CALL	_strlen
0025fe   f015
002600   6e04     movwf	0x4, 0             	MOVWF	r0x04
002602   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
002604   f005
002606   0e03     movlw	0x3                	MOVLW	0x03
002608   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00260a   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
                                           ;	.line	438; test.c	BYTE max= 32-pos;
00260c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00260e   0820     sublw	0x20               	SUBLW	0x20
002610   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	439; test.c	strlcpy((char*)&LCDText[pos], text,(l<max)?l:max );
002612   6a06     clrf	0x6, 0              	CLRF	r0x06
002614   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
002616   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002618   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
00261a   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
00261c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00261e   6e06     movwf	0x6, 0             	MOVWF	r0x06
002620   5000     movf	0, 0, 0             	MOVF	r0x00, W
002622   6e00     movwf	0, 0               	MOVWF	r0x00
002624   0e80     movlw	0x80               	MOVLW	0x80
002626   6e07     movwf	0x7, 0             	MOVWF	r0x07
002628   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00262a   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
00262c   e302     bnc	0x2632               	BNC	_00456_DS_
00262e   c005     movff	0x5, 0x4           	MOVFF	r0x05, r0x04
002630   f004
                                           _00456_DS_:
002632   6a05     clrf	0x5, 0              	CLRF	r0x05
002634   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002636   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002638   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00263a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00263c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00263e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002640   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002642   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002644   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002646   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002648   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00264a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00264c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00264e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002650   5000     movf	0, 0, 0             	MOVF	r0x00, W
002652   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002654   ec5a     call	0x1cb4, 0           	CALL	_strlcpy
002656   f00e
002658   0e08     movlw	0x8                	MOVLW	0x08
00265a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	440; test.c	LCDUpdate();
00265c   ecf7     call	0x17ee, 0           	CALL	_LCDUpdate
00265e   f00b
002660   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002662   f007
002664   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002666   f006
002668   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00266a   f005
00266c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00266e   f004
002670   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002672   f003
002674   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002676   f002
002678   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00267a   f001
00267c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00267e   f000
002680   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002682   ffd9
002684   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__DisplayWORD	code
                                           _DisplayWORD:
                                           ;	.line	413; test.c	void DisplayWORD(BYTE pos, WORD w) //WORD is a 16 bits unsigned
002190   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002192   ffe5
002194   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002196   ffd9
002198   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00219a   ffe5
00219c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00219e   ffe5
0021a0   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0021a2   ffe5
0021a4   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0021a6   ffe5
0021a8   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0021aa   ffe5
0021ac   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0021ae   ffe5
0021b0   0e02     movlw	0x2                	MOVLW	0x02
0021b2   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0021b4   f000
0021b6   0e03     movlw	0x3                	MOVLW	0x03
0021b8   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0021ba   f001
0021bc   0e04     movlw	0x4                	MOVLW	0x04
0021be   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0021c0   f002
                                           ;	.line	421; test.c	ultoa(w, WDigit, radix);      
0021c2   6a03     clrf	0x3, 0              	CLRF	r0x03
0021c4   6a04     clrf	0x4, 0              	CLRF	r0x04
0021c6   0e0a     movlw	0xa                	MOVLW	0x0a
0021c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021ca   0e0f     movlw	0xf                	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
0021cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021ce   0e56     movlw	0x56               	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
0021d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021d2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0021d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021d6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0021d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021da   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0021dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021de   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0021e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021e2   ec5a     call	0x1eb4, 0           	CALL	_ultoa
0021e4   f00f
0021e6   0e07     movlw	0x7                	MOVLW	0x07
0021e8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	422; test.c	for(j = 0; j < strlen((char*)WDigit); j++)
0021ea   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00437_DS_:
0021ec   0e0f     movlw	0xf                	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
0021ee   6e03     movwf	0x3, 0             	MOVWF	r0x03
0021f0   0e56     movlw	0x56               	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
0021f2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0021f4   0e80     movlw	0x80               	MOVLW	0x80
0021f6   6e04     movwf	0x4, 0             	MOVWF	r0x04
0021f8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0021fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021fc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0021fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002200   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002202   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002204   ec0a     call	0x2a14, 0           	CALL	_strlen
002206   f015
002208   6e02     movwf	0x2, 0             	MOVWF	r0x02
00220a   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
00220c   f003
00220e   0e03     movlw	0x3                	MOVLW	0x03
002210   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002212   c001     movff	0x1, 0x4           	MOVFF	r0x01, r0x04
002214   f004
002216   6a05     clrf	0x5, 0              	CLRF	r0x05
002218   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00221a   0f80     addlw	0x80               	ADDLW	0x80
00221c   6ef3     movwf	0xf3, 0            	MOVWF	PRODL
00221e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002220   0f80     addlw	0x80               	ADDLW	0x80
002222   5cf3     subwf	0xf3, 0, 0         	SUBWF	PRODL, W
002224   e102     bnz	0x222a               	BNZ	_00447_DS_
002226   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002228   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
                                           _00447_DS_:
00222a   e21c     bc	0x2264                	BC	_00440_DS_
                                           ;	.line	424; test.c	LCDText[LCDPos++] = WDigit[j];
00222c   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
00222e   f002
002230   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002232   6a03     clrf	0x3, 0              	CLRF	r0x03
002234   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
002236   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
002238   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
00223a   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00223c   0e56     movlw	0x56               	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
00223e   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
002240   6e04     movwf	0x4, 0             	MOVWF	r0x04
002242   6a05     clrf	0x5, 0              	CLRF	r0x05
002244   0e0f     movlw	0xf                	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
002246   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
002248   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
00224a   ffe9
00224c   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
00224e   ffea
002250   cfef     movff	0xfef, 0x4         	MOVFF	INDF0, r0x04
002252   f004
002254   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
002256   ffe9
002258   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
00225a   ffea
00225c   c004     movff	0x4, 0xfef         	MOVFF	r0x04, INDF0
00225e   ffef
                                           ;	.line	422; test.c	for(j = 0; j < strlen((char*)WDigit); j++)
002260   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
002262   d7c4     bra	0x21ec               	BRA	_00437_DS_
                                           _00440_DS_:
                                           ;	.line	426; test.c	if(LCDPos < 32u)
002264   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
002266   f001
002268   6a02     clrf	0x2, 0              	CLRF	r0x02
00226a   0e00     movlw	0                  	MOVLW	0x00
00226c   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
00226e   e102     bnz	0x2274               	BNZ	_00448_DS_
002270   0e20     movlw	0x20               	MOVLW	0x20
002272   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00448_DS_:
002274   e20b     bc	0x228c                	BC	_00436_DS_
                                           ;	.line	427; test.c	LCDText[LCDPos] = 0;
002276   6a01     clrf	0x1, 0              	CLRF	r0x01
002278   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
00227a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00227c   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
00227e   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002280   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002282   ffe9
002284   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
002286   ffea
002288   0e00     movlw	0                  	MOVLW	0x00
00228a   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           _00436_DS_:
                                           ;	.line	428; test.c	LCDUpdate();
00228c   ecf7     call	0x17ee, 0           	CALL	_LCDUpdate
00228e   f00b
002290   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002292   f005
002294   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002296   f004
002298   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00229a   f003
00229c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00229e   f002
0022a0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0022a2   f001
0022a4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0022a6   f000
0022a8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0022aa   ffd9
0022ac   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__convert_value	code
                                           _convert_value:
                                           ;	.line	396; test.c	void convert_value(int value, char* r){
002818   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00281a   ffe5
00281c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00281e   ffd9
002820   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002822   ffe5
002824   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002826   ffe5
002828   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00282a   ffe5
00282c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00282e   ffe5
002830   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002832   ffe5
002834   0e02     movlw	0x2                	MOVLW	0x02
002836   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002838   f000
00283a   0e03     movlw	0x3                	MOVLW	0x03
00283c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00283e   f001
002840   0e04     movlw	0x4                	MOVLW	0x04
002842   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002844   f002
002846   0e05     movlw	0x5                	MOVLW	0x05
002848   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00284a   f003
00284c   0e06     movlw	0x6                	MOVLW	0x06
00284e   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
002850   f004
                                           ;	.line	398; test.c	if(value<=9) sprintf(r, "0%d", value);
002852   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002854   0f80     addlw	0x80               	ADDLW	0x80
002856   0f80     addlw	0x80               	ADDLW	0x80
002858   e102     bnz	0x285e               	BNZ	_00430_DS_
00285a   0e0a     movlw	0xa                	MOVLW	0x0a
00285c   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00430_DS_:
00285e   e215     bc	0x288a                	BC	_00425_DS_
002860   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002862   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002864   5000     movf	0, 0, 0             	MOVF	r0x00, W
002866   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002868   0e00     movlw	0                  	MOVLW	UPPER(__str_15)
00286a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00286c   0e17     movlw	0x17               	MOVLW	HIGH(__str_15)
00286e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002870   0ee6     movlw	0xe6               	MOVLW	LOW(__str_15)
002872   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002874   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002876   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002878   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00287a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00287c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00287e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002880   ec63     call	0x24c6, 0           	CALL	_sprintf
002882   f012
002884   0e08     movlw	0x8                	MOVLW	0x08
002886   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002888   d014     bra	0x28b2               	BRA	_00427_DS_
                                           _00425_DS_:
                                           ;	.line	399; test.c	else sprintf(r, "%d", value);
00288a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00288c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00288e   5000     movf	0, 0, 0             	MOVF	r0x00, W
002890   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002892   0e00     movlw	0                  	MOVLW	UPPER(__str_16)
002894   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002896   0e17     movlw	0x17               	MOVLW	HIGH(__str_16)
002898   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00289a   0eea     movlw	0xea               	MOVLW	LOW(__str_16)
00289c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00289e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0028a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028a2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0028a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028a6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0028a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028aa   ec63     call	0x24c6, 0           	CALL	_sprintf
0028ac   f012
0028ae   0e08     movlw	0x8                	MOVLW	0x08
0028b0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00427_DS_:
0028b2   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0028b4   f004
0028b6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0028b8   f003
0028ba   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0028bc   f002
0028be   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0028c0   f001
0028c2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0028c4   f000
0028c6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0028c8   ffd9
0028ca   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__add_hour	code
                                           _add_hour:
                                           ;	.line	386; test.c	void add_hour(){
002b98   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002b9a   ffe5
002b9c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002b9e   ffd9
002ba0   010f     movlb	0xf                	BANKSEL	_hour
                                           ;	.line	388; test.c	hour++;
002ba2   2b49     incf	0x49, 0x1, 0x1      	INCF	_hour, F, B
002ba4   e302     bnc	0x2baa               	BNC	_10463_DS_
002ba6   010f     movlb	0xf                	BANKSEL	(_hour + 1)
002ba8   2b4a     incf	0x4a, 0x1, 0x1      	INCF	(_hour + 1), F, B
                                           _10463_DS_:
002baa   010f     movlb	0xf                	BANKSEL	(_hour + 1)
                                           ;	.line	389; test.c	if(hour>=24){ 
002bac   514a     movf	0x4a, 0, 0x1        	MOVF	(_hour + 1), W, B
002bae   0f80     addlw	0x80               	ADDLW	0x80
002bb0   0f80     addlw	0x80               	ADDLW	0x80
002bb2   e103     bnz	0x2bba               	BNZ	_00419_DS_
002bb4   0e18     movlw	0x18               	MOVLW	0x18
002bb6   010f     movlb	0xf                	BANKSEL	_hour
002bb8   5d49     subwf	0x49, 0, 0x1       	SUBWF	_hour, W, B
                                           _00419_DS_:
002bba   e308     bnc	0x2bcc               	BNC	_00416_DS_
002bbc   010f     movlb	0xf                	BANKSEL	_hour
                                           ;	.line	390; test.c	hour = 0;		
002bbe   6b49     clrf	0x49, 0x1           	CLRF	_hour, B
002bc0   010f     movlb	0xf                	BANKSEL	(_hour + 1)
002bc2   6b4a     clrf	0x4a, 0x1           	CLRF	(_hour + 1), B
002bc4   010f     movlb	0xf                	BANKSEL	_ring_today
                                           ;	.line	391; test.c	ring_today = 0;
002bc6   6b41     clrf	0x41, 0x1           	CLRF	_ring_today, B
002bc8   010f     movlb	0xf                	BANKSEL	(_ring_today + 1)
002bca   6b42     clrf	0x42, 0x1           	CLRF	(_ring_today + 1), B
                                           _00416_DS_:
002bcc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002bce   ffd9
002bd0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__add_minute	code
                                           _add_minute:
                                           ;	.line	376; test.c	void add_minute(){
002bd2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002bd4   ffe5
002bd6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002bd8   ffd9
002bda   010f     movlb	0xf                	BANKSEL	_minute
                                           ;	.line	378; test.c	minute++;
002bdc   2b4b     incf	0x4b, 0x1, 0x1      	INCF	_minute, F, B
002bde   e302     bnc	0x2be4               	BNC	_20464_DS_
002be0   010f     movlb	0xf                	BANKSEL	(_minute + 1)
002be2   2b4c     incf	0x4c, 0x1, 0x1      	INCF	(_minute + 1), F, B
                                           _20464_DS_:
002be4   010f     movlb	0xf                	BANKSEL	(_minute + 1)
                                           ;	.line	379; test.c	if(minute>=60){
002be6   514c     movf	0x4c, 0, 0x1        	MOVF	(_minute + 1), W, B
002be8   0f80     addlw	0x80               	ADDLW	0x80
002bea   0f80     addlw	0x80               	ADDLW	0x80
002bec   e103     bnz	0x2bf4               	BNZ	_00409_DS_
002bee   0e3c     movlw	0x3c               	MOVLW	0x3c
002bf0   010f     movlb	0xf                	BANKSEL	_minute
002bf2   5d4b     subwf	0x4b, 0, 0x1       	SUBWF	_minute, W, B
                                           _00409_DS_:
002bf4   e306     bnc	0x2c02               	BNC	_00406_DS_
002bf6   010f     movlb	0xf                	BANKSEL	_minute
                                           ;	.line	380; test.c	minute = 0;		
002bf8   6b4b     clrf	0x4b, 0x1           	CLRF	_minute, B
002bfa   010f     movlb	0xf                	BANKSEL	(_minute + 1)
002bfc   6b4c     clrf	0x4c, 0x1           	CLRF	(_minute + 1), B
                                           ;	.line	381; test.c	add_hour();
002bfe   eccc     call	0x2b98, 0           	CALL	_add_hour
002c00   f015
                                           _00406_DS_:
002c02   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002c04   ffd9
002c06   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__add_second	code
                                           _add_second:
                                           ;	.line	366; test.c	void add_second(){
002c08   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002c0a   ffe5
002c0c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002c0e   ffd9
002c10   010f     movlb	0xf                	BANKSEL	_second
                                           ;	.line	368; test.c	second++;
002c12   2b4d     incf	0x4d, 0x1, 0x1      	INCF	_second, F, B
002c14   e302     bnc	0x2c1a               	BNC	_30465_DS_
002c16   010f     movlb	0xf                	BANKSEL	(_second + 1)
002c18   2b4e     incf	0x4e, 0x1, 0x1      	INCF	(_second + 1), F, B
                                           _30465_DS_:
002c1a   010f     movlb	0xf                	BANKSEL	(_second + 1)
                                           ;	.line	369; test.c	if(second>=60){
002c1c   514e     movf	0x4e, 0, 0x1        	MOVF	(_second + 1), W, B
002c1e   0f80     addlw	0x80               	ADDLW	0x80
002c20   0f80     addlw	0x80               	ADDLW	0x80
002c22   e103     bnz	0x2c2a               	BNZ	_00399_DS_
002c24   0e3c     movlw	0x3c               	MOVLW	0x3c
002c26   010f     movlb	0xf                	BANKSEL	_second
002c28   5d4d     subwf	0x4d, 0, 0x1       	SUBWF	_second, W, B
                                           _00399_DS_:
002c2a   e306     bnc	0x2c38               	BNC	_00396_DS_
002c2c   010f     movlb	0xf                	BANKSEL	_second
                                           ;	.line	370; test.c	second = 0;		
002c2e   6b4d     clrf	0x4d, 0x1           	CLRF	_second, B
002c30   010f     movlb	0xf                	BANKSEL	(_second + 1)
002c32   6b4e     clrf	0x4e, 0x1           	CLRF	(_second + 1), B
                                           ;	.line	371; test.c	add_minute();
002c34   ece9     call	0x2bd2, 0           	CALL	_add_minute
002c36   f015
                                           _00396_DS_:
002c38   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002c3a   ffd9
002c3c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__update_lcd	code
                                           _update_lcd:
                                           ;	.line	268; test.c	void update_lcd(){
00000c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00000e   ffe5
000010   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000012   ffd9
000014   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000016   ffe5
000018   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00001a   ffe5
00001c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00001e   ffe5
000020   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000022   ffe5
000024   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000026   ffe5
000028   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00002a   ffe5
00002c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00002e   ffe5
000030   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000032   ffe5
000034   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000036   ffe5
000038   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00003a   ffe5
00003c   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
00003e   ffe5
000040   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
000042   ffe5
000044   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
000046   ffe5
000048   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
00004a   ffe5
00004c   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
00004e   ffe5
000050   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
000052   ffe5
000054   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
000056   ffe5
000058   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
00005a   ffe5
00005c   010f     movlb	0xf                	BANKSEL	_state
                                           ;	.line	279; test.c	if(state==0){		
00005e   5147     movf	0x47, 0, 0x1        	MOVF	_state, W, B
000060   010f     movlb	0xf                	BANKSEL	(_state + 1)
000062   1148     iorwf	0x48, 0, 0x1       	IORWF	(_state + 1), W, B
000064   e118     bnz	0x96                 	BNZ	_00353_DS_
                                           ;	.line	281; test.c	sprintf(lcd, " STARTING...    ");
000066   0e0f     movlw	0xf                	MOVLW	HIGH(_update_lcd_lcd_1_1)
000068   6e01     movwf	0x1, 0             	MOVWF	r0x01
00006a   0e21     movlw	0x21               	MOVLW	LOW(_update_lcd_lcd_1_1)
00006c   6e00     movwf	0, 0               	MOVWF	r0x00
00006e   0e80     movlw	0x80               	MOVLW	0x80
000070   6e02     movwf	0x2, 0             	MOVWF	r0x02
000072   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
000074   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000076   0e16     movlw	0x16               	MOVLW	HIGH(__str_0)
000078   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00007a   0e26     movlw	0x26               	MOVLW	LOW(__str_0)
00007c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00007e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000080   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000082   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000084   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000086   5000     movf	0, 0, 0             	MOVF	r0x00, W
000088   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00008a   ec63     call	0x24c6, 0           	CALL	_sprintf
00008c   f012
00008e   0e06     movlw	0x6                	MOVLW	0x06
000090   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000092   efb3     goto	0x966               	GOTO	_00354_DS_
000094   f004
                                           _00353_DS_:
000096   010f     movlb	0xf                	BANKSEL	_state
                                           ;	.line	284; test.c	}else if(state==SHOW_TIME){	
000098   5147     movf	0x47, 0, 0x1        	MOVF	_state, W, B
00009a   0a01     xorlw	0x1                	XORLW	0x01
00009c   e103     bnz	0xa4                 	BNZ	_00374_DS_
00009e   010f     movlb	0xf                	BANKSEL	(_state + 1)
0000a0   5148     movf	0x48, 0, 0x1        	MOVF	(_state + 1), W, B
0000a2   e001     bz	0xa6                  	BZ	_00375_DS_
                                           _00374_DS_:
0000a4   d188     bra	0x3b6                	BRA	_00350_DS_
                                           _00375_DS_:
                                           ;	.line	286; test.c	convert_value(hour, h);
0000a6   0e0f     movlw	0xf                	MOVLW	HIGH(_update_lcd_h_1_1)
0000a8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0000aa   0e5c     movlw	0x5c               	MOVLW	LOW(_update_lcd_h_1_1)
0000ac   6e00     movwf	0, 0               	MOVWF	r0x00
0000ae   0e80     movlw	0x80               	MOVLW	0x80
0000b0   6e02     movwf	0x2, 0             	MOVWF	r0x02
0000b2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0000b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000b6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0000b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000ba   5000     movf	0, 0, 0             	MOVF	r0x00, W
0000bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000be   010f     movlb	0xf                	BANKSEL	(_hour + 1)
0000c0   514a     movf	0x4a, 0, 0x1        	MOVF	(_hour + 1), W, B
0000c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000c4   010f     movlb	0xf                	BANKSEL	_hour
0000c6   5149     movf	0x49, 0, 0x1        	MOVF	_hour, W, B
0000c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000ca   ec0c     call	0x2818, 0           	CALL	_convert_value
0000cc   f014
0000ce   0e05     movlw	0x5                	MOVLW	0x05
0000d0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	287; test.c	convert_value(minute, m);
0000d2   0e0e     movlw	0xe                	MOVLW	HIGH(_update_lcd_m_1_1)
0000d4   6e01     movwf	0x1, 0             	MOVWF	r0x01
0000d6   0e2d     movlw	0x2d               	MOVLW	LOW(_update_lcd_m_1_1)
0000d8   6e00     movwf	0, 0               	MOVWF	r0x00
0000da   0e80     movlw	0x80               	MOVLW	0x80
0000dc   6e02     movwf	0x2, 0             	MOVWF	r0x02
0000de   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0000e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000e2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0000e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000e6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0000e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000ea   010f     movlb	0xf                	BANKSEL	(_minute + 1)
0000ec   514c     movf	0x4c, 0, 0x1        	MOVF	(_minute + 1), W, B
0000ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000f0   010f     movlb	0xf                	BANKSEL	_minute
0000f2   514b     movf	0x4b, 0, 0x1        	MOVF	_minute, W, B
0000f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000f6   ec0c     call	0x2818, 0           	CALL	_convert_value
0000f8   f014
0000fa   0e05     movlw	0x5                	MOVLW	0x05
0000fc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	288; test.c	convert_value(second, s);
0000fe   0e0e     movlw	0xe                	MOVLW	HIGH(_update_lcd_s_1_1)
000100   6e01     movwf	0x1, 0             	MOVWF	r0x01
000102   0e30     movlw	0x30               	MOVLW	LOW(_update_lcd_s_1_1)
000104   6e00     movwf	0, 0               	MOVWF	r0x00
000106   0e80     movlw	0x80               	MOVLW	0x80
000108   6e02     movwf	0x2, 0             	MOVWF	r0x02
00010a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00010c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00010e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000110   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000112   5000     movf	0, 0, 0             	MOVF	r0x00, W
000114   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000116   010f     movlb	0xf                	BANKSEL	(_second + 1)
000118   514e     movf	0x4e, 0, 0x1        	MOVF	(_second + 1), W, B
00011a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00011c   010f     movlb	0xf                	BANKSEL	_second
00011e   514d     movf	0x4d, 0, 0x1        	MOVF	_second, W, B
000120   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000122   ec0c     call	0x2818, 0           	CALL	_convert_value
000124   f014
000126   0e05     movlw	0x5                	MOVLW	0x05
000128   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00012a   010f     movlb	0xf                	BANKSEL	_alarm_ring
                                           ;	.line	291; test.c	if(alarm_ring){
00012c   5145     movf	0x45, 0, 0x1        	MOVF	_alarm_ring, W, B
00012e   010f     movlb	0xf                	BANKSEL	(_alarm_ring + 1)
000130   1146     iorwf	0x46, 0, 0x1       	IORWF	(_alarm_ring + 1), W, B
000132   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000134   d07e     bra	0x232                	BRA	_00312_DS_
000136   010f     movlb	0xf                	BANKSEL	_blink
                                           ;	.line	293; test.c	if(blink) sprintf(lcd, 	" !! %s:%s:%s !!  WAKE UP! DUDE! ", h, m, s);
000138   5153     movf	0x53, 0, 0x1        	MOVF	_blink, W, B
00013a   010f     movlb	0xf                	BANKSEL	(_blink + 1)
00013c   1154     iorwf	0x54, 0, 0x1       	IORWF	(_blink + 1), W, B
00013e   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000140   d03c     bra	0x1ba                	BRA	_00306_DS_
000142   0e0e     movlw	0xe                	MOVLW	HIGH(_update_lcd_s_1_1)
000144   6e01     movwf	0x1, 0             	MOVWF	r0x01
000146   0e30     movlw	0x30               	MOVLW	LOW(_update_lcd_s_1_1)
000148   6e00     movwf	0, 0               	MOVWF	r0x00
00014a   0e80     movlw	0x80               	MOVLW	0x80
00014c   6e02     movwf	0x2, 0             	MOVWF	r0x02
00014e   0e0e     movlw	0xe                	MOVLW	HIGH(_update_lcd_m_1_1)
000150   6e04     movwf	0x4, 0             	MOVWF	r0x04
000152   0e2d     movlw	0x2d               	MOVLW	LOW(_update_lcd_m_1_1)
000154   6e03     movwf	0x3, 0             	MOVWF	r0x03
000156   0e80     movlw	0x80               	MOVLW	0x80
000158   6e05     movwf	0x5, 0             	MOVWF	r0x05
00015a   0e0f     movlw	0xf                	MOVLW	HIGH(_update_lcd_h_1_1)
00015c   6e07     movwf	0x7, 0             	MOVWF	r0x07
00015e   0e5c     movlw	0x5c               	MOVLW	LOW(_update_lcd_h_1_1)
000160   6e06     movwf	0x6, 0             	MOVWF	r0x06
000162   0e80     movlw	0x80               	MOVLW	0x80
000164   6e08     movwf	0x8, 0             	MOVWF	r0x08
000166   0e0f     movlw	0xf                	MOVLW	HIGH(_update_lcd_lcd_1_1)
000168   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
00016a   0e21     movlw	0x21               	MOVLW	LOW(_update_lcd_lcd_1_1)
00016c   6e09     movwf	0x9, 0             	MOVWF	r0x09
00016e   0e80     movlw	0x80               	MOVLW	0x80
000170   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
000172   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000174   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000176   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000178   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00017a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00017c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00017e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000180   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000182   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000184   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000186   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000188   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00018a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00018c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00018e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000190   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000192   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000194   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000196   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
000198   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00019a   0e16     movlw	0x16               	MOVLW	HIGH(__str_1)
00019c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00019e   0e38     movlw	0x38               	MOVLW	LOW(__str_1)
0001a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001a2   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0001a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001a6   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0001a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001aa   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0001ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001ae   ec63     call	0x24c6, 0           	CALL	_sprintf
0001b0   f012
0001b2   0e0f     movlw	0xf                	MOVLW	0x0f
0001b4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0001b6   efb3     goto	0x966               	GOTO	_00354_DS_
0001b8   f004
                                           _00306_DS_:
                                           ;	.line	294; test.c	else sprintf(lcd, 	"    %s:%s:%s     WAKE UP! DUDE! ", h, m, s);
0001ba   0e0e     movlw	0xe                	MOVLW	HIGH(_update_lcd_s_1_1)
0001bc   6e01     movwf	0x1, 0             	MOVWF	r0x01
0001be   0e30     movlw	0x30               	MOVLW	LOW(_update_lcd_s_1_1)
0001c0   6e00     movwf	0, 0               	MOVWF	r0x00
0001c2   0e80     movlw	0x80               	MOVLW	0x80
0001c4   6e02     movwf	0x2, 0             	MOVWF	r0x02
0001c6   0e0e     movlw	0xe                	MOVLW	HIGH(_update_lcd_m_1_1)
0001c8   6e04     movwf	0x4, 0             	MOVWF	r0x04
0001ca   0e2d     movlw	0x2d               	MOVLW	LOW(_update_lcd_m_1_1)
0001cc   6e03     movwf	0x3, 0             	MOVWF	r0x03
0001ce   0e80     movlw	0x80               	MOVLW	0x80
0001d0   6e05     movwf	0x5, 0             	MOVWF	r0x05
0001d2   0e0f     movlw	0xf                	MOVLW	HIGH(_update_lcd_h_1_1)
0001d4   6e07     movwf	0x7, 0             	MOVWF	r0x07
0001d6   0e5c     movlw	0x5c               	MOVLW	LOW(_update_lcd_h_1_1)
0001d8   6e06     movwf	0x6, 0             	MOVWF	r0x06
0001da   0e80     movlw	0x80               	MOVLW	0x80
0001dc   6e08     movwf	0x8, 0             	MOVWF	r0x08
0001de   0e0f     movlw	0xf                	MOVLW	HIGH(_update_lcd_lcd_1_1)
0001e0   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0001e2   0e21     movlw	0x21               	MOVLW	LOW(_update_lcd_lcd_1_1)
0001e4   6e09     movwf	0x9, 0             	MOVWF	r0x09
0001e6   0e80     movlw	0x80               	MOVLW	0x80
0001e8   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
0001ea   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001ee   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0001f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001f2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0001f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001f6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0001f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001fa   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0001fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001fe   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000200   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000202   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000204   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000206   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000208   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00020a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00020c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00020e   0e00     movlw	0                  	MOVLW	UPPER(__str_2)
000210   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000212   0e16     movlw	0x16               	MOVLW	HIGH(__str_2)
000214   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000216   0e5a     movlw	0x5a               	MOVLW	LOW(__str_2)
000218   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00021a   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
00021c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00021e   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000220   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000222   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000224   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000226   ec63     call	0x24c6, 0           	CALL	_sprintf
000228   f012
00022a   0e0f     movlw	0xf                	MOVLW	0x0f
00022c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00022e   efb3     goto	0x966               	GOTO	_00354_DS_
000230   f004
                                           _00312_DS_:
000232   010f     movlb	0xf                	BANKSEL	_alarm_set
                                           ;	.line	296; test.c	}else if(alarm_set){
000234   5143     movf	0x43, 0, 0x1        	MOVF	_alarm_set, W, B
000236   010f     movlb	0xf                	BANKSEL	(_alarm_set + 1)
000238   1144     iorwf	0x44, 0, 0x1       	IORWF	(_alarm_set + 1), W, B
00023a   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
00023c   d080     bra	0x33e                	BRA	_00309_DS_
                                           ;	.line	298; test.c	convert_value(alarm_hour, a_h);
00023e   0e0e     movlw	0xe                	MOVLW	HIGH(_update_lcd_a_h_1_1)
000240   6e01     movwf	0x1, 0             	MOVWF	r0x01
000242   0e33     movlw	0x33               	MOVLW	LOW(_update_lcd_a_h_1_1)
000244   6e00     movwf	0, 0               	MOVWF	r0x00
000246   0e80     movlw	0x80               	MOVLW	0x80
000248   6e02     movwf	0x2, 0             	MOVWF	r0x02
00024a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00024c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00024e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000250   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000252   5000     movf	0, 0, 0             	MOVF	r0x00, W
000254   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000256   010f     movlb	0xf                	BANKSEL	(_alarm_hour + 1)
000258   5150     movf	0x50, 0, 0x1        	MOVF	(_alarm_hour + 1), W, B
00025a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00025c   010f     movlb	0xf                	BANKSEL	_alarm_hour
00025e   514f     movf	0x4f, 0, 0x1        	MOVF	_alarm_hour, W, B
000260   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000262   ec0c     call	0x2818, 0           	CALL	_convert_value
000264   f014
000266   0e05     movlw	0x5                	MOVLW	0x05
000268   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	299; test.c	convert_value(alarm_minute, a_m);
00026a   0e0e     movlw	0xe                	MOVLW	HIGH(_update_lcd_a_m_1_1)
00026c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00026e   0e36     movlw	0x36               	MOVLW	LOW(_update_lcd_a_m_1_1)
000270   6e00     movwf	0, 0               	MOVWF	r0x00
000272   0e80     movlw	0x80               	MOVLW	0x80
000274   6e02     movwf	0x2, 0             	MOVWF	r0x02
000276   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000278   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00027a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00027c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00027e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000280   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000282   010f     movlb	0xf                	BANKSEL	(_alarm_minute + 1)
000284   5152     movf	0x52, 0, 0x1        	MOVF	(_alarm_minute + 1), W, B
000286   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000288   010f     movlb	0xf                	BANKSEL	_alarm_minute
00028a   5151     movf	0x51, 0, 0x1        	MOVF	_alarm_minute, W, B
00028c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00028e   ec0c     call	0x2818, 0           	CALL	_convert_value
000290   f014
000292   0e05     movlw	0x5                	MOVLW	0x05
000294   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	300; test.c	sprintf(lcd, "    %s:%s:%s     ALARM  [%s:%s]", h, m, s, a_h, a_m);
000296   0e0e     movlw	0xe                	MOVLW	HIGH(_update_lcd_a_m_1_1)
000298   6e01     movwf	0x1, 0             	MOVWF	r0x01
00029a   0e36     movlw	0x36               	MOVLW	LOW(_update_lcd_a_m_1_1)
00029c   6e00     movwf	0, 0               	MOVWF	r0x00
00029e   0e80     movlw	0x80               	MOVLW	0x80
0002a0   6e02     movwf	0x2, 0             	MOVWF	r0x02
0002a2   0e0e     movlw	0xe                	MOVLW	HIGH(_update_lcd_a_h_1_1)
0002a4   6e04     movwf	0x4, 0             	MOVWF	r0x04
0002a6   0e33     movlw	0x33               	MOVLW	LOW(_update_lcd_a_h_1_1)
0002a8   6e03     movwf	0x3, 0             	MOVWF	r0x03
0002aa   0e80     movlw	0x80               	MOVLW	0x80
0002ac   6e05     movwf	0x5, 0             	MOVWF	r0x05
0002ae   0e0e     movlw	0xe                	MOVLW	HIGH(_update_lcd_s_1_1)
0002b0   6e07     movwf	0x7, 0             	MOVWF	r0x07
0002b2   0e30     movlw	0x30               	MOVLW	LOW(_update_lcd_s_1_1)
0002b4   6e06     movwf	0x6, 0             	MOVWF	r0x06
0002b6   0e80     movlw	0x80               	MOVLW	0x80
0002b8   6e08     movwf	0x8, 0             	MOVWF	r0x08
0002ba   0e0e     movlw	0xe                	MOVLW	HIGH(_update_lcd_m_1_1)
0002bc   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0002be   0e2d     movlw	0x2d               	MOVLW	LOW(_update_lcd_m_1_1)
0002c0   6e09     movwf	0x9, 0             	MOVWF	r0x09
0002c2   0e80     movlw	0x80               	MOVLW	0x80
0002c4   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
0002c6   0e0f     movlw	0xf                	MOVLW	HIGH(_update_lcd_h_1_1)
0002c8   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
0002ca   0e5c     movlw	0x5c               	MOVLW	LOW(_update_lcd_h_1_1)
0002cc   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
0002ce   0e80     movlw	0x80               	MOVLW	0x80
0002d0   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
0002d2   0e0f     movlw	0xf                	MOVLW	HIGH(_update_lcd_lcd_1_1)
0002d4   6e10     movwf	0x10, 0            	MOVWF	r0x10
0002d6   0e21     movlw	0x21               	MOVLW	LOW(_update_lcd_lcd_1_1)
0002d8   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
0002da   0e80     movlw	0x80               	MOVLW	0x80
0002dc   6e11     movwf	0x11, 0            	MOVWF	r0x11
0002de   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0002e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002e2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0002e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002e6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0002e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002ea   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0002ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002ee   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0002f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002f2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0002f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002f6   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0002f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002fa   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0002fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002fe   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000300   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000302   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
000304   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000306   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000308   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00030a   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00030c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00030e   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
000310   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000312   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
000314   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000316   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
000318   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00031a   0e00     movlw	0                  	MOVLW	UPPER(__str_3)
00031c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00031e   0e16     movlw	0x16               	MOVLW	HIGH(__str_3)
000320   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000322   0e7c     movlw	0x7c               	MOVLW	LOW(__str_3)
000324   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000326   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
000328   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00032a   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
00032c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00032e   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
000330   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000332   ec63     call	0x24c6, 0           	CALL	_sprintf
000334   f012
000336   0e15     movlw	0x15               	MOVLW	0x15
000338   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00033a   efb3     goto	0x966               	GOTO	_00354_DS_
00033c   f004
                                           _00309_DS_:
                                           ;	.line	304; test.c	sprintf(lcd, "    %s:%s:%s       ALARM: OFF", h, m, s);
00033e   0e0e     movlw	0xe                	MOVLW	HIGH(_update_lcd_s_1_1)
000340   6e01     movwf	0x1, 0             	MOVWF	r0x01
000342   0e30     movlw	0x30               	MOVLW	LOW(_update_lcd_s_1_1)
000344   6e00     movwf	0, 0               	MOVWF	r0x00
000346   0e80     movlw	0x80               	MOVLW	0x80
000348   6e02     movwf	0x2, 0             	MOVWF	r0x02
00034a   0e0e     movlw	0xe                	MOVLW	HIGH(_update_lcd_m_1_1)
00034c   6e04     movwf	0x4, 0             	MOVWF	r0x04
00034e   0e2d     movlw	0x2d               	MOVLW	LOW(_update_lcd_m_1_1)
000350   6e03     movwf	0x3, 0             	MOVWF	r0x03
000352   0e80     movlw	0x80               	MOVLW	0x80
000354   6e05     movwf	0x5, 0             	MOVWF	r0x05
000356   0e0f     movlw	0xf                	MOVLW	HIGH(_update_lcd_h_1_1)
000358   6e07     movwf	0x7, 0             	MOVWF	r0x07
00035a   0e5c     movlw	0x5c               	MOVLW	LOW(_update_lcd_h_1_1)
00035c   6e06     movwf	0x6, 0             	MOVWF	r0x06
00035e   0e80     movlw	0x80               	MOVLW	0x80
000360   6e08     movwf	0x8, 0             	MOVWF	r0x08
000362   0e0f     movlw	0xf                	MOVLW	HIGH(_update_lcd_lcd_1_1)
000364   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
000366   0e21     movlw	0x21               	MOVLW	LOW(_update_lcd_lcd_1_1)
000368   6e09     movwf	0x9, 0             	MOVWF	r0x09
00036a   0e80     movlw	0x80               	MOVLW	0x80
00036c   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
00036e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000370   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000372   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000374   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000376   5000     movf	0, 0, 0             	MOVF	r0x00, W
000378   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00037a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00037c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00037e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000380   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000382   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000384   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000386   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000388   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00038a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00038c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00038e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000390   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000392   0e00     movlw	0                  	MOVLW	UPPER(__str_4)
000394   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000396   0e16     movlw	0x16               	MOVLW	HIGH(__str_4)
000398   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00039a   0e9c     movlw	0x9c               	MOVLW	LOW(__str_4)
00039c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00039e   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0003a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003a2   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0003a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003a6   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0003a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003aa   ec63     call	0x24c6, 0           	CALL	_sprintf
0003ac   f012
0003ae   0e0f     movlw	0xf                	MOVLW	0x0f
0003b0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0003b2   efb3     goto	0x966               	GOTO	_00354_DS_
0003b4   f004
                                           _00350_DS_:
0003b6   010f     movlb	0xf                	BANKSEL	_state
                                           ;	.line	309; test.c	}else if(state == CONFIG_CLOCK){	
0003b8   5147     movf	0x47, 0, 0x1        	MOVF	_state, W, B
0003ba   0a02     xorlw	0x2                	XORLW	0x02
0003bc   e103     bnz	0x3c4                	BNZ	_00376_DS_
0003be   010f     movlb	0xf                	BANKSEL	(_state + 1)
0003c0   5148     movf	0x48, 0, 0x1        	MOVF	(_state + 1), W, B
0003c2   e001     bz	0x3c6                 	BZ	_00377_DS_
                                           _00376_DS_:
0003c4   d018     bra	0x3f6                	BRA	_00347_DS_
                                           _00377_DS_:
                                           ;	.line	311; test.c	sprintf(lcd, "      MENU        CHANGE CLOCK?");
0003c6   0e0f     movlw	0xf                	MOVLW	HIGH(_update_lcd_lcd_1_1)
0003c8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0003ca   0e21     movlw	0x21               	MOVLW	LOW(_update_lcd_lcd_1_1)
0003cc   6e00     movwf	0, 0               	MOVWF	r0x00
0003ce   0e80     movlw	0x80               	MOVLW	0x80
0003d0   6e02     movwf	0x2, 0             	MOVWF	r0x02
0003d2   0e00     movlw	0                  	MOVLW	UPPER(__str_5)
0003d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003d6   0e16     movlw	0x16               	MOVLW	HIGH(__str_5)
0003d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003da   0eba     movlw	0xba               	MOVLW	LOW(__str_5)
0003dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003de   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0003e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003e2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0003e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003e6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0003e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003ea   ec63     call	0x24c6, 0           	CALL	_sprintf
0003ec   f012
0003ee   0e06     movlw	0x6                	MOVLW	0x06
0003f0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0003f2   efb3     goto	0x966               	GOTO	_00354_DS_
0003f4   f004
                                           _00347_DS_:
0003f6   010f     movlb	0xf                	BANKSEL	_state
                                           ;	.line	314; test.c	}else if(state == CONFIG_ALARM){	
0003f8   5147     movf	0x47, 0, 0x1        	MOVF	_state, W, B
0003fa   0a03     xorlw	0x3                	XORLW	0x03
0003fc   e103     bnz	0x404                	BNZ	_00378_DS_
0003fe   010f     movlb	0xf                	BANKSEL	(_state + 1)
000400   5148     movf	0x48, 0, 0x1        	MOVF	(_state + 1), W, B
000402   e001     bz	0x406                 	BZ	_00379_DS_
                                           _00378_DS_:
000404   d018     bra	0x436                	BRA	_00344_DS_
                                           _00379_DS_:
                                           ;	.line	316; test.c	sprintf(lcd, "      MENU        CHANGE ALARM?");
000406   0e0f     movlw	0xf                	MOVLW	HIGH(_update_lcd_lcd_1_1)
000408   6e01     movwf	0x1, 0             	MOVWF	r0x01
00040a   0e21     movlw	0x21               	MOVLW	LOW(_update_lcd_lcd_1_1)
00040c   6e00     movwf	0, 0               	MOVWF	r0x00
00040e   0e80     movlw	0x80               	MOVLW	0x80
000410   6e02     movwf	0x2, 0             	MOVWF	r0x02
000412   0e00     movlw	0                  	MOVLW	UPPER(__str_6)
000414   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000416   0e16     movlw	0x16               	MOVLW	HIGH(__str_6)
000418   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00041a   0eda     movlw	0xda               	MOVLW	LOW(__str_6)
00041c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00041e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000420   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000422   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000424   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000426   5000     movf	0, 0, 0             	MOVF	r0x00, W
000428   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00042a   ec63     call	0x24c6, 0           	CALL	_sprintf
00042c   f012
00042e   0e06     movlw	0x6                	MOVLW	0x06
000430   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000432   efb3     goto	0x966               	GOTO	_00354_DS_
000434   f004
                                           _00344_DS_:
000436   010f     movlb	0xf                	BANKSEL	_state
                                           ;	.line	319; test.c	}else if(state == CONFIG_CLOCK_HOUR){	
000438   5147     movf	0x47, 0, 0x1        	MOVF	_state, W, B
00043a   0a04     xorlw	0x4                	XORLW	0x04
00043c   e103     bnz	0x444                	BNZ	_00380_DS_
00043e   010f     movlb	0xf                	BANKSEL	(_state + 1)
000440   5148     movf	0x48, 0, 0x1        	MOVF	(_state + 1), W, B
000442   e001     bz	0x446                 	BZ	_00381_DS_
                                           _00380_DS_:
000444   d091     bra	0x568                	BRA	_00341_DS_
                                           _00381_DS_:
                                           ;	.line	321; test.c	convert_value(hour, h);
000446   0e0f     movlw	0xf                	MOVLW	HIGH(_update_lcd_h_1_1)
000448   6e01     movwf	0x1, 0             	MOVWF	r0x01
00044a   0e5c     movlw	0x5c               	MOVLW	LOW(_update_lcd_h_1_1)
00044c   6e00     movwf	0, 0               	MOVWF	r0x00
00044e   0e80     movlw	0x80               	MOVLW	0x80
000450   6e02     movwf	0x2, 0             	MOVWF	r0x02
000452   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000454   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000456   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000458   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00045a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00045c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00045e   010f     movlb	0xf                	BANKSEL	(_hour + 1)
000460   514a     movf	0x4a, 0, 0x1        	MOVF	(_hour + 1), W, B
000462   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000464   010f     movlb	0xf                	BANKSEL	_hour
000466   5149     movf	0x49, 0, 0x1        	MOVF	_hour, W, B
000468   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00046a   ec0c     call	0x2818, 0           	CALL	_convert_value
00046c   f014
00046e   0e05     movlw	0x5                	MOVLW	0x05
000470   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	322; test.c	convert_value(minute, m);
000472   0e0e     movlw	0xe                	MOVLW	HIGH(_update_lcd_m_1_1)
000474   6e01     movwf	0x1, 0             	MOVWF	r0x01
000476   0e2d     movlw	0x2d               	MOVLW	LOW(_update_lcd_m_1_1)
000478   6e00     movwf	0, 0               	MOVWF	r0x00
00047a   0e80     movlw	0x80               	MOVLW	0x80
00047c   6e02     movwf	0x2, 0             	MOVWF	r0x02
00047e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000480   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000482   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000484   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000486   5000     movf	0, 0, 0             	MOVF	r0x00, W
000488   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00048a   010f     movlb	0xf                	BANKSEL	(_minute + 1)
00048c   514c     movf	0x4c, 0, 0x1        	MOVF	(_minute + 1), W, B
00048e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000490   010f     movlb	0xf                	BANKSEL	_minute
000492   514b     movf	0x4b, 0, 0x1        	MOVF	_minute, W, B
000494   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000496   ec0c     call	0x2818, 0           	CALL	_convert_value
000498   f014
00049a   0e05     movlw	0x5                	MOVLW	0x05
00049c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00049e   010f     movlb	0xf                	BANKSEL	_blink
                                           ;	.line	324; test.c	if(blink) sprintf(lcd, "SET CLOCK:          [%s]: %s", h, m);
0004a0   5153     movf	0x53, 0, 0x1        	MOVF	_blink, W, B
0004a2   010f     movlb	0xf                	BANKSEL	(_blink + 1)
0004a4   1154     iorwf	0x54, 0, 0x1       	IORWF	(_blink + 1), W, B
0004a6   e030     bz	0x508                 	BZ	_00315_DS_
0004a8   0e0e     movlw	0xe                	MOVLW	HIGH(_update_lcd_m_1_1)
0004aa   6e01     movwf	0x1, 0             	MOVWF	r0x01
0004ac   0e2d     movlw	0x2d               	MOVLW	LOW(_update_lcd_m_1_1)
0004ae   6e00     movwf	0, 0               	MOVWF	r0x00
0004b0   0e80     movlw	0x80               	MOVLW	0x80
0004b2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0004b4   0e0f     movlw	0xf                	MOVLW	HIGH(_update_lcd_h_1_1)
0004b6   6e04     movwf	0x4, 0             	MOVWF	r0x04
0004b8   0e5c     movlw	0x5c               	MOVLW	LOW(_update_lcd_h_1_1)
0004ba   6e03     movwf	0x3, 0             	MOVWF	r0x03
0004bc   0e80     movlw	0x80               	MOVLW	0x80
0004be   6e05     movwf	0x5, 0             	MOVWF	r0x05
0004c0   0e0f     movlw	0xf                	MOVLW	HIGH(_update_lcd_lcd_1_1)
0004c2   6e07     movwf	0x7, 0             	MOVWF	r0x07
0004c4   0e21     movlw	0x21               	MOVLW	LOW(_update_lcd_lcd_1_1)
0004c6   6e06     movwf	0x6, 0             	MOVWF	r0x06
0004c8   0e80     movlw	0x80               	MOVLW	0x80
0004ca   6e08     movwf	0x8, 0             	MOVWF	r0x08
0004cc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0004ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004d0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0004d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004d4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0004d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004d8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0004da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004dc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0004de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004e0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0004e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004e4   0e00     movlw	0                  	MOVLW	UPPER(__str_7)
0004e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004e8   0e16     movlw	0x16               	MOVLW	HIGH(__str_7)
0004ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004ec   0efa     movlw	0xfa               	MOVLW	LOW(__str_7)
0004ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004f0   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0004f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004f4   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0004f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004f8   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0004fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004fc   ec63     call	0x24c6, 0           	CALL	_sprintf
0004fe   f012
000500   0e0c     movlw	0xc                	MOVLW	0x0c
000502   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000504   efb3     goto	0x966               	GOTO	_00354_DS_
000506   f004
                                           _00315_DS_:
                                           ;	.line	325; test.c	else sprintf(lcd, "SET CLOCK:           %s : %s", h, m);	
000508   0e0e     movlw	0xe                	MOVLW	HIGH(_update_lcd_m_1_1)
00050a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00050c   0e2d     movlw	0x2d               	MOVLW	LOW(_update_lcd_m_1_1)
00050e   6e00     movwf	0, 0               	MOVWF	r0x00
000510   0e80     movlw	0x80               	MOVLW	0x80
000512   6e02     movwf	0x2, 0             	MOVWF	r0x02
000514   0e0f     movlw	0xf                	MOVLW	HIGH(_update_lcd_h_1_1)
000516   6e04     movwf	0x4, 0             	MOVWF	r0x04
000518   0e5c     movlw	0x5c               	MOVLW	LOW(_update_lcd_h_1_1)
00051a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00051c   0e80     movlw	0x80               	MOVLW	0x80
00051e   6e05     movwf	0x5, 0             	MOVWF	r0x05
000520   0e0f     movlw	0xf                	MOVLW	HIGH(_update_lcd_lcd_1_1)
000522   6e07     movwf	0x7, 0             	MOVWF	r0x07
000524   0e21     movlw	0x21               	MOVLW	LOW(_update_lcd_lcd_1_1)
000526   6e06     movwf	0x6, 0             	MOVWF	r0x06
000528   0e80     movlw	0x80               	MOVLW	0x80
00052a   6e08     movwf	0x8, 0             	MOVWF	r0x08
00052c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00052e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000530   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000532   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000534   5000     movf	0, 0, 0             	MOVF	r0x00, W
000536   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000538   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00053a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00053c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00053e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000540   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000542   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000544   0e00     movlw	0                  	MOVLW	UPPER(__str_8)
000546   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000548   0e17     movlw	0x17               	MOVLW	HIGH(__str_8)
00054a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00054c   0e18     movlw	0x18               	MOVLW	LOW(__str_8)
00054e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000550   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000552   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000554   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000556   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000558   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00055a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00055c   ec63     call	0x24c6, 0           	CALL	_sprintf
00055e   f012
000560   0e0c     movlw	0xc                	MOVLW	0x0c
000562   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000564   efb3     goto	0x966               	GOTO	_00354_DS_
000566   f004
                                           _00341_DS_:
000568   010f     movlb	0xf                	BANKSEL	_state
                                           ;	.line	328; test.c	}else if(state == CONFIG_CLOCK_MINUTE){	
00056a   5147     movf	0x47, 0, 0x1        	MOVF	_state, W, B
00056c   0a05     xorlw	0x5                	XORLW	0x05
00056e   e103     bnz	0x576                	BNZ	_00382_DS_
000570   010f     movlb	0xf                	BANKSEL	(_state + 1)
000572   5148     movf	0x48, 0, 0x1        	MOVF	(_state + 1), W, B
000574   e001     bz	0x578                 	BZ	_00383_DS_
                                           _00382_DS_:
000576   d08f     bra	0x696                	BRA	_00338_DS_
                                           _00383_DS_:
                                           ;	.line	330; test.c	convert_value(hour, h);
000578   0e0f     movlw	0xf                	MOVLW	HIGH(_update_lcd_h_1_1)
00057a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00057c   0e5c     movlw	0x5c               	MOVLW	LOW(_update_lcd_h_1_1)
00057e   6e00     movwf	0, 0               	MOVWF	r0x00
000580   0e80     movlw	0x80               	MOVLW	0x80
000582   6e02     movwf	0x2, 0             	MOVWF	r0x02
000584   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000586   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000588   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00058a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00058c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00058e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000590   010f     movlb	0xf                	BANKSEL	(_hour + 1)
000592   514a     movf	0x4a, 0, 0x1        	MOVF	(_hour + 1), W, B
000594   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000596   010f     movlb	0xf                	BANKSEL	_hour
000598   5149     movf	0x49, 0, 0x1        	MOVF	_hour, W, B
00059a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00059c   ec0c     call	0x2818, 0           	CALL	_convert_value
00059e   f014
0005a0   0e05     movlw	0x5                	MOVLW	0x05
0005a2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	331; test.c	convert_value(minute, m);
0005a4   0e0e     movlw	0xe                	MOVLW	HIGH(_update_lcd_m_1_1)
0005a6   6e01     movwf	0x1, 0             	MOVWF	r0x01
0005a8   0e2d     movlw	0x2d               	MOVLW	LOW(_update_lcd_m_1_1)
0005aa   6e00     movwf	0, 0               	MOVWF	r0x00
0005ac   0e80     movlw	0x80               	MOVLW	0x80
0005ae   6e02     movwf	0x2, 0             	MOVWF	r0x02
0005b0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0005b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005b4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0005b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005b8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0005ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005bc   010f     movlb	0xf                	BANKSEL	(_minute + 1)
0005be   514c     movf	0x4c, 0, 0x1        	MOVF	(_minute + 1), W, B
0005c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005c2   010f     movlb	0xf                	BANKSEL	_minute
0005c4   514b     movf	0x4b, 0, 0x1        	MOVF	_minute, W, B
0005c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005c8   ec0c     call	0x2818, 0           	CALL	_convert_value
0005ca   f014
0005cc   0e05     movlw	0x5                	MOVLW	0x05
0005ce   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0005d0   010f     movlb	0xf                	BANKSEL	_blink
                                           ;	.line	333; test.c	if(blink) sprintf(lcd, "SET CLOCK:           %s :[%s]", h, m);
0005d2   5153     movf	0x53, 0, 0x1        	MOVF	_blink, W, B
0005d4   010f     movlb	0xf                	BANKSEL	(_blink + 1)
0005d6   1154     iorwf	0x54, 0, 0x1       	IORWF	(_blink + 1), W, B
0005d8   e02f     bz	0x638                 	BZ	_00318_DS_
0005da   0e0e     movlw	0xe                	MOVLW	HIGH(_update_lcd_m_1_1)
0005dc   6e01     movwf	0x1, 0             	MOVWF	r0x01
0005de   0e2d     movlw	0x2d               	MOVLW	LOW(_update_lcd_m_1_1)
0005e0   6e00     movwf	0, 0               	MOVWF	r0x00
0005e2   0e80     movlw	0x80               	MOVLW	0x80
0005e4   6e02     movwf	0x2, 0             	MOVWF	r0x02
0005e6   0e0f     movlw	0xf                	MOVLW	HIGH(_update_lcd_h_1_1)
0005e8   6e04     movwf	0x4, 0             	MOVWF	r0x04
0005ea   0e5c     movlw	0x5c               	MOVLW	LOW(_update_lcd_h_1_1)
0005ec   6e03     movwf	0x3, 0             	MOVWF	r0x03
0005ee   0e80     movlw	0x80               	MOVLW	0x80
0005f0   6e05     movwf	0x5, 0             	MOVWF	r0x05
0005f2   0e0f     movlw	0xf                	MOVLW	HIGH(_update_lcd_lcd_1_1)
0005f4   6e07     movwf	0x7, 0             	MOVWF	r0x07
0005f6   0e21     movlw	0x21               	MOVLW	LOW(_update_lcd_lcd_1_1)
0005f8   6e06     movwf	0x6, 0             	MOVWF	r0x06
0005fa   0e80     movlw	0x80               	MOVLW	0x80
0005fc   6e08     movwf	0x8, 0             	MOVWF	r0x08
0005fe   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000600   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000602   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000604   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000606   5000     movf	0, 0, 0             	MOVF	r0x00, W
000608   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00060a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00060c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00060e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000610   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000612   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000614   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000616   0e00     movlw	0                  	MOVLW	UPPER(__str_9)
000618   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00061a   0e17     movlw	0x17               	MOVLW	HIGH(__str_9)
00061c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00061e   0e36     movlw	0x36               	MOVLW	LOW(__str_9)
000620   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000622   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000624   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000626   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000628   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00062a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00062c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00062e   ec63     call	0x24c6, 0           	CALL	_sprintf
000630   f012
000632   0e0c     movlw	0xc                	MOVLW	0x0c
000634   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000636   d197     bra	0x966                	BRA	_00354_DS_
                                           _00318_DS_:
                                           ;	.line	334; test.c	else sprintf(lcd, "SET CLOCK:           %s : %s", h, m);	
000638   0e0e     movlw	0xe                	MOVLW	HIGH(_update_lcd_m_1_1)
00063a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00063c   0e2d     movlw	0x2d               	MOVLW	LOW(_update_lcd_m_1_1)
00063e   6e00     movwf	0, 0               	MOVWF	r0x00
000640   0e80     movlw	0x80               	MOVLW	0x80
000642   6e02     movwf	0x2, 0             	MOVWF	r0x02
000644   0e0f     movlw	0xf                	MOVLW	HIGH(_update_lcd_h_1_1)
000646   6e04     movwf	0x4, 0             	MOVWF	r0x04
000648   0e5c     movlw	0x5c               	MOVLW	LOW(_update_lcd_h_1_1)
00064a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00064c   0e80     movlw	0x80               	MOVLW	0x80
00064e   6e05     movwf	0x5, 0             	MOVWF	r0x05
000650   0e0f     movlw	0xf                	MOVLW	HIGH(_update_lcd_lcd_1_1)
000652   6e07     movwf	0x7, 0             	MOVWF	r0x07
000654   0e21     movlw	0x21               	MOVLW	LOW(_update_lcd_lcd_1_1)
000656   6e06     movwf	0x6, 0             	MOVWF	r0x06
000658   0e80     movlw	0x80               	MOVLW	0x80
00065a   6e08     movwf	0x8, 0             	MOVWF	r0x08
00065c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00065e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000660   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000662   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000664   5000     movf	0, 0, 0             	MOVF	r0x00, W
000666   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000668   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00066a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00066c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00066e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000670   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000672   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000674   0e00     movlw	0                  	MOVLW	UPPER(__str_8)
000676   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000678   0e17     movlw	0x17               	MOVLW	HIGH(__str_8)
00067a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00067c   0e18     movlw	0x18               	MOVLW	LOW(__str_8)
00067e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000680   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000682   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000684   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000686   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000688   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00068a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00068c   ec63     call	0x24c6, 0           	CALL	_sprintf
00068e   f012
000690   0e0c     movlw	0xc                	MOVLW	0x0c
000692   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000694   d168     bra	0x966                	BRA	_00354_DS_
                                           _00338_DS_:
000696   010f     movlb	0xf                	BANKSEL	_state
                                           ;	.line	337; test.c	}else if(state == CONFIG_ALARM_ON_OFF){	
000698   5147     movf	0x47, 0, 0x1        	MOVF	_state, W, B
00069a   0a06     xorlw	0x6                	XORLW	0x06
00069c   e103     bnz	0x6a4                	BNZ	_00384_DS_
00069e   010f     movlb	0xf                	BANKSEL	(_state + 1)
0006a0   5148     movf	0x48, 0, 0x1        	MOVF	(_state + 1), W, B
0006a2   e001     bz	0x6a6                 	BZ	_00385_DS_
                                           _00384_DS_:
0006a4   d033     bra	0x70c                	BRA	_00335_DS_
                                           _00385_DS_:
0006a6   010f     movlb	0xf                	BANKSEL	_alarm_set
                                           ;	.line	339; test.c	if(alarm_set) sprintf(lcd, "SET ALARM:            [ON ]");
0006a8   5143     movf	0x43, 0, 0x1        	MOVF	_alarm_set, W, B
0006aa   010f     movlb	0xf                	BANKSEL	(_alarm_set + 1)
0006ac   1144     iorwf	0x44, 0, 0x1       	IORWF	(_alarm_set + 1), W, B
0006ae   e017     bz	0x6de                 	BZ	_00321_DS_
0006b0   0e0f     movlw	0xf                	MOVLW	HIGH(_update_lcd_lcd_1_1)
0006b2   6e01     movwf	0x1, 0             	MOVWF	r0x01
0006b4   0e21     movlw	0x21               	MOVLW	LOW(_update_lcd_lcd_1_1)
0006b6   6e00     movwf	0, 0               	MOVWF	r0x00
0006b8   0e80     movlw	0x80               	MOVLW	0x80
0006ba   6e02     movwf	0x2, 0             	MOVWF	r0x02
0006bc   0e00     movlw	0                  	MOVLW	UPPER(__str_10)
0006be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006c0   0e17     movlw	0x17               	MOVLW	HIGH(__str_10)
0006c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006c4   0e54     movlw	0x54               	MOVLW	LOW(__str_10)
0006c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006c8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0006ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006cc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0006ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006d0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0006d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006d4   ec63     call	0x24c6, 0           	CALL	_sprintf
0006d6   f012
0006d8   0e06     movlw	0x6                	MOVLW	0x06
0006da   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0006dc   d144     bra	0x966                	BRA	_00354_DS_
                                           _00321_DS_:
                                           ;	.line	340; test.c	else sprintf(lcd, "SET ALARM:            [OFF]");	
0006de   0e0f     movlw	0xf                	MOVLW	HIGH(_update_lcd_lcd_1_1)
0006e0   6e01     movwf	0x1, 0             	MOVWF	r0x01
0006e2   0e21     movlw	0x21               	MOVLW	LOW(_update_lcd_lcd_1_1)
0006e4   6e00     movwf	0, 0               	MOVWF	r0x00
0006e6   0e80     movlw	0x80               	MOVLW	0x80
0006e8   6e02     movwf	0x2, 0             	MOVWF	r0x02
0006ea   0e00     movlw	0                  	MOVLW	UPPER(__str_11)
0006ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006ee   0e17     movlw	0x17               	MOVLW	HIGH(__str_11)
0006f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006f2   0e70     movlw	0x70               	MOVLW	LOW(__str_11)
0006f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006f6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0006f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006fa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0006fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006fe   5000     movf	0, 0, 0             	MOVF	r0x00, W
000700   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000702   ec63     call	0x24c6, 0           	CALL	_sprintf
000704   f012
000706   0e06     movlw	0x6                	MOVLW	0x06
000708   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00070a   d12d     bra	0x966                	BRA	_00354_DS_
                                           _00335_DS_:
00070c   010f     movlb	0xf                	BANKSEL	_state
                                           ;	.line	343; test.c	}else if(state == CONFIG_ALARM_HOUR){	
00070e   5147     movf	0x47, 0, 0x1        	MOVF	_state, W, B
000710   0a07     xorlw	0x7                	XORLW	0x07
000712   e103     bnz	0x71a                	BNZ	_00386_DS_
000714   010f     movlb	0xf                	BANKSEL	(_state + 1)
000716   5148     movf	0x48, 0, 0x1        	MOVF	(_state + 1), W, B
000718   e001     bz	0x71c                 	BZ	_00387_DS_
                                           _00386_DS_:
00071a   d08f     bra	0x83a                	BRA	_00332_DS_
                                           _00387_DS_:
                                           ;	.line	345; test.c	convert_value(alarm_hour, h);
00071c   0e0f     movlw	0xf                	MOVLW	HIGH(_update_lcd_h_1_1)
00071e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000720   0e5c     movlw	0x5c               	MOVLW	LOW(_update_lcd_h_1_1)
000722   6e00     movwf	0, 0               	MOVWF	r0x00
000724   0e80     movlw	0x80               	MOVLW	0x80
000726   6e02     movwf	0x2, 0             	MOVWF	r0x02
000728   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00072a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00072c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00072e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000730   5000     movf	0, 0, 0             	MOVF	r0x00, W
000732   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000734   010f     movlb	0xf                	BANKSEL	(_alarm_hour + 1)
000736   5150     movf	0x50, 0, 0x1        	MOVF	(_alarm_hour + 1), W, B
000738   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00073a   010f     movlb	0xf                	BANKSEL	_alarm_hour
00073c   514f     movf	0x4f, 0, 0x1        	MOVF	_alarm_hour, W, B
00073e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000740   ec0c     call	0x2818, 0           	CALL	_convert_value
000742   f014
000744   0e05     movlw	0x5                	MOVLW	0x05
000746   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	346; test.c	convert_value(alarm_minute, m);
000748   0e0e     movlw	0xe                	MOVLW	HIGH(_update_lcd_m_1_1)
00074a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00074c   0e2d     movlw	0x2d               	MOVLW	LOW(_update_lcd_m_1_1)
00074e   6e00     movwf	0, 0               	MOVWF	r0x00
000750   0e80     movlw	0x80               	MOVLW	0x80
000752   6e02     movwf	0x2, 0             	MOVWF	r0x02
000754   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000756   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000758   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00075a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00075c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00075e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000760   010f     movlb	0xf                	BANKSEL	(_alarm_minute + 1)
000762   5152     movf	0x52, 0, 0x1        	MOVF	(_alarm_minute + 1), W, B
000764   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000766   010f     movlb	0xf                	BANKSEL	_alarm_minute
000768   5151     movf	0x51, 0, 0x1        	MOVF	_alarm_minute, W, B
00076a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00076c   ec0c     call	0x2818, 0           	CALL	_convert_value
00076e   f014
000770   0e05     movlw	0x5                	MOVLW	0x05
000772   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000774   010f     movlb	0xf                	BANKSEL	_blink
                                           ;	.line	348; test.c	if(blink) sprintf(lcd, "SET ALARM:          [%s]: %s", h, m);
000776   5153     movf	0x53, 0, 0x1        	MOVF	_blink, W, B
000778   010f     movlb	0xf                	BANKSEL	(_blink + 1)
00077a   1154     iorwf	0x54, 0, 0x1       	IORWF	(_blink + 1), W, B
00077c   e02f     bz	0x7dc                 	BZ	_00324_DS_
00077e   0e0e     movlw	0xe                	MOVLW	HIGH(_update_lcd_m_1_1)
000780   6e01     movwf	0x1, 0             	MOVWF	r0x01
000782   0e2d     movlw	0x2d               	MOVLW	LOW(_update_lcd_m_1_1)
000784   6e00     movwf	0, 0               	MOVWF	r0x00
000786   0e80     movlw	0x80               	MOVLW	0x80
000788   6e02     movwf	0x2, 0             	MOVWF	r0x02
00078a   0e0f     movlw	0xf                	MOVLW	HIGH(_update_lcd_h_1_1)
00078c   6e04     movwf	0x4, 0             	MOVWF	r0x04
00078e   0e5c     movlw	0x5c               	MOVLW	LOW(_update_lcd_h_1_1)
000790   6e03     movwf	0x3, 0             	MOVWF	r0x03
000792   0e80     movlw	0x80               	MOVLW	0x80
000794   6e05     movwf	0x5, 0             	MOVWF	r0x05
000796   0e0f     movlw	0xf                	MOVLW	HIGH(_update_lcd_lcd_1_1)
000798   6e07     movwf	0x7, 0             	MOVWF	r0x07
00079a   0e21     movlw	0x21               	MOVLW	LOW(_update_lcd_lcd_1_1)
00079c   6e06     movwf	0x6, 0             	MOVWF	r0x06
00079e   0e80     movlw	0x80               	MOVLW	0x80
0007a0   6e08     movwf	0x8, 0             	MOVWF	r0x08
0007a2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0007a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007a6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0007a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007aa   5000     movf	0, 0, 0             	MOVF	r0x00, W
0007ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007ae   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0007b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007b2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0007b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007b6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0007b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007ba   0e00     movlw	0                  	MOVLW	UPPER(__str_12)
0007bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007be   0e17     movlw	0x17               	MOVLW	HIGH(__str_12)
0007c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007c2   0e8c     movlw	0x8c               	MOVLW	LOW(__str_12)
0007c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007c6   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0007c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007ca   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0007cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007ce   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0007d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007d2   ec63     call	0x24c6, 0           	CALL	_sprintf
0007d4   f012
0007d6   0e0c     movlw	0xc                	MOVLW	0x0c
0007d8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0007da   d0c5     bra	0x966                	BRA	_00354_DS_
                                           _00324_DS_:
                                           ;	.line	349; test.c	else sprintf(lcd, "SET ALARM:           %s : %s", h, m);	
0007dc   0e0e     movlw	0xe                	MOVLW	HIGH(_update_lcd_m_1_1)
0007de   6e01     movwf	0x1, 0             	MOVWF	r0x01
0007e0   0e2d     movlw	0x2d               	MOVLW	LOW(_update_lcd_m_1_1)
0007e2   6e00     movwf	0, 0               	MOVWF	r0x00
0007e4   0e80     movlw	0x80               	MOVLW	0x80
0007e6   6e02     movwf	0x2, 0             	MOVWF	r0x02
0007e8   0e0f     movlw	0xf                	MOVLW	HIGH(_update_lcd_h_1_1)
0007ea   6e04     movwf	0x4, 0             	MOVWF	r0x04
0007ec   0e5c     movlw	0x5c               	MOVLW	LOW(_update_lcd_h_1_1)
0007ee   6e03     movwf	0x3, 0             	MOVWF	r0x03
0007f0   0e80     movlw	0x80               	MOVLW	0x80
0007f2   6e05     movwf	0x5, 0             	MOVWF	r0x05
0007f4   0e0f     movlw	0xf                	MOVLW	HIGH(_update_lcd_lcd_1_1)
0007f6   6e07     movwf	0x7, 0             	MOVWF	r0x07
0007f8   0e21     movlw	0x21               	MOVLW	LOW(_update_lcd_lcd_1_1)
0007fa   6e06     movwf	0x6, 0             	MOVWF	r0x06
0007fc   0e80     movlw	0x80               	MOVLW	0x80
0007fe   6e08     movwf	0x8, 0             	MOVWF	r0x08
000800   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000802   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000804   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000806   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000808   5000     movf	0, 0, 0             	MOVF	r0x00, W
00080a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00080c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00080e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000810   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000812   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000814   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000816   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000818   0e00     movlw	0                  	MOVLW	UPPER(__str_13)
00081a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00081c   0e17     movlw	0x17               	MOVLW	HIGH(__str_13)
00081e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000820   0eaa     movlw	0xaa               	MOVLW	LOW(__str_13)
000822   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000824   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000826   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000828   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00082a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00082c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00082e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000830   ec63     call	0x24c6, 0           	CALL	_sprintf
000832   f012
000834   0e0c     movlw	0xc                	MOVLW	0x0c
000836   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000838   d096     bra	0x966                	BRA	_00354_DS_
                                           _00332_DS_:
00083a   010f     movlb	0xf                	BANKSEL	_state
                                           ;	.line	352; test.c	}else if(state == CONFIG_ALARM_MINUTE){	
00083c   5147     movf	0x47, 0, 0x1        	MOVF	_state, W, B
00083e   0a08     xorlw	0x8                	XORLW	0x08
000840   e103     bnz	0x848                	BNZ	_00388_DS_
000842   010f     movlb	0xf                	BANKSEL	(_state + 1)
000844   5148     movf	0x48, 0, 0x1        	MOVF	(_state + 1), W, B
000846   e001     bz	0x84a                 	BZ	_00389_DS_
                                           _00388_DS_:
000848   d08e     bra	0x966                	BRA	_00354_DS_
                                           _00389_DS_:
                                           ;	.line	354; test.c	convert_value(alarm_hour, h);
00084a   0e0f     movlw	0xf                	MOVLW	HIGH(_update_lcd_h_1_1)
00084c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00084e   0e5c     movlw	0x5c               	MOVLW	LOW(_update_lcd_h_1_1)
000850   6e00     movwf	0, 0               	MOVWF	r0x00
000852   0e80     movlw	0x80               	MOVLW	0x80
000854   6e02     movwf	0x2, 0             	MOVWF	r0x02
000856   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000858   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00085a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00085c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00085e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000860   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000862   010f     movlb	0xf                	BANKSEL	(_alarm_hour + 1)
000864   5150     movf	0x50, 0, 0x1        	MOVF	(_alarm_hour + 1), W, B
000866   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000868   010f     movlb	0xf                	BANKSEL	_alarm_hour
00086a   514f     movf	0x4f, 0, 0x1        	MOVF	_alarm_hour, W, B
00086c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00086e   ec0c     call	0x2818, 0           	CALL	_convert_value
000870   f014
000872   0e05     movlw	0x5                	MOVLW	0x05
000874   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	355; test.c	convert_value(alarm_minute, m);
000876   0e0e     movlw	0xe                	MOVLW	HIGH(_update_lcd_m_1_1)
000878   6e01     movwf	0x1, 0             	MOVWF	r0x01
00087a   0e2d     movlw	0x2d               	MOVLW	LOW(_update_lcd_m_1_1)
00087c   6e00     movwf	0, 0               	MOVWF	r0x00
00087e   0e80     movlw	0x80               	MOVLW	0x80
000880   6e02     movwf	0x2, 0             	MOVWF	r0x02
000882   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000884   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000886   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000888   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00088a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00088c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00088e   010f     movlb	0xf                	BANKSEL	(_alarm_minute + 1)
000890   5152     movf	0x52, 0, 0x1        	MOVF	(_alarm_minute + 1), W, B
000892   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000894   010f     movlb	0xf                	BANKSEL	_alarm_minute
000896   5151     movf	0x51, 0, 0x1        	MOVF	_alarm_minute, W, B
000898   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00089a   ec0c     call	0x2818, 0           	CALL	_convert_value
00089c   f014
00089e   0e05     movlw	0x5                	MOVLW	0x05
0008a0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0008a2   010f     movlb	0xf                	BANKSEL	_blink
                                           ;	.line	357; test.c	if(blink) sprintf(lcd, "SET ALARM:           %s :[%s]", h, m);
0008a4   5153     movf	0x53, 0, 0x1        	MOVF	_blink, W, B
0008a6   010f     movlb	0xf                	BANKSEL	(_blink + 1)
0008a8   1154     iorwf	0x54, 0, 0x1       	IORWF	(_blink + 1), W, B
0008aa   e02f     bz	0x90a                 	BZ	_00327_DS_
0008ac   0e0e     movlw	0xe                	MOVLW	HIGH(_update_lcd_m_1_1)
0008ae   6e01     movwf	0x1, 0             	MOVWF	r0x01
0008b0   0e2d     movlw	0x2d               	MOVLW	LOW(_update_lcd_m_1_1)
0008b2   6e00     movwf	0, 0               	MOVWF	r0x00
0008b4   0e80     movlw	0x80               	MOVLW	0x80
0008b6   6e02     movwf	0x2, 0             	MOVWF	r0x02
0008b8   0e0f     movlw	0xf                	MOVLW	HIGH(_update_lcd_h_1_1)
0008ba   6e04     movwf	0x4, 0             	MOVWF	r0x04
0008bc   0e5c     movlw	0x5c               	MOVLW	LOW(_update_lcd_h_1_1)
0008be   6e03     movwf	0x3, 0             	MOVWF	r0x03
0008c0   0e80     movlw	0x80               	MOVLW	0x80
0008c2   6e05     movwf	0x5, 0             	MOVWF	r0x05
0008c4   0e0f     movlw	0xf                	MOVLW	HIGH(_update_lcd_lcd_1_1)
0008c6   6e07     movwf	0x7, 0             	MOVWF	r0x07
0008c8   0e21     movlw	0x21               	MOVLW	LOW(_update_lcd_lcd_1_1)
0008ca   6e06     movwf	0x6, 0             	MOVWF	r0x06
0008cc   0e80     movlw	0x80               	MOVLW	0x80
0008ce   6e08     movwf	0x8, 0             	MOVWF	r0x08
0008d0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0008d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008d4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0008d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008d8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0008da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008dc   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0008de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008e0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0008e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008e4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0008e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008e8   0e00     movlw	0                  	MOVLW	UPPER(__str_14)
0008ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008ec   0e17     movlw	0x17               	MOVLW	HIGH(__str_14)
0008ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008f0   0ec8     movlw	0xc8               	MOVLW	LOW(__str_14)
0008f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008f4   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0008f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008f8   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0008fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008fc   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0008fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000900   ec63     call	0x24c6, 0           	CALL	_sprintf
000902   f012
000904   0e0c     movlw	0xc                	MOVLW	0x0c
000906   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000908   d02e     bra	0x966                	BRA	_00354_DS_
                                           _00327_DS_:
                                           ;	.line	358; test.c	else sprintf(lcd, "SET ALARM:           %s : %s", h, m);	
00090a   0e0e     movlw	0xe                	MOVLW	HIGH(_update_lcd_m_1_1)
00090c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00090e   0e2d     movlw	0x2d               	MOVLW	LOW(_update_lcd_m_1_1)
000910   6e00     movwf	0, 0               	MOVWF	r0x00
000912   0e80     movlw	0x80               	MOVLW	0x80
000914   6e02     movwf	0x2, 0             	MOVWF	r0x02
000916   0e0f     movlw	0xf                	MOVLW	HIGH(_update_lcd_h_1_1)
000918   6e04     movwf	0x4, 0             	MOVWF	r0x04
00091a   0e5c     movlw	0x5c               	MOVLW	LOW(_update_lcd_h_1_1)
00091c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00091e   0e80     movlw	0x80               	MOVLW	0x80
000920   6e05     movwf	0x5, 0             	MOVWF	r0x05
000922   0e0f     movlw	0xf                	MOVLW	HIGH(_update_lcd_lcd_1_1)
000924   6e07     movwf	0x7, 0             	MOVWF	r0x07
000926   0e21     movlw	0x21               	MOVLW	LOW(_update_lcd_lcd_1_1)
000928   6e06     movwf	0x6, 0             	MOVWF	r0x06
00092a   0e80     movlw	0x80               	MOVLW	0x80
00092c   6e08     movwf	0x8, 0             	MOVWF	r0x08
00092e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000930   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000932   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000934   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000936   5000     movf	0, 0, 0             	MOVF	r0x00, W
000938   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00093a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00093c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00093e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000940   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000942   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000944   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000946   0e00     movlw	0                  	MOVLW	UPPER(__str_13)
000948   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00094a   0e17     movlw	0x17               	MOVLW	HIGH(__str_13)
00094c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00094e   0eaa     movlw	0xaa               	MOVLW	LOW(__str_13)
000950   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000952   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000954   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000956   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000958   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00095a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00095c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00095e   ec63     call	0x24c6, 0           	CALL	_sprintf
000960   f012
000962   0e0c     movlw	0xc                	MOVLW	0x0c
000964   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00354_DS_:
                                           ;	.line	362; test.c	DisplayString (0, lcd);
000966   0e0f     movlw	0xf                	MOVLW	HIGH(_update_lcd_lcd_1_1)
000968   6e01     movwf	0x1, 0             	MOVWF	r0x01
00096a   0e21     movlw	0x21               	MOVLW	LOW(_update_lcd_lcd_1_1)
00096c   6e00     movwf	0, 0               	MOVWF	r0x00
00096e   0e80     movlw	0x80               	MOVLW	0x80
000970   6e02     movwf	0x2, 0             	MOVWF	r0x02
000972   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000974   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000976   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000978   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00097a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00097c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00097e   0e00     movlw	0                  	MOVLW	0x00
000980   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000982   ecd8     call	0x25b0, 0           	CALL	_DisplayString
000984   f012
000986   0e04     movlw	0x4                	MOVLW	0x04
000988   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00098a   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
00098c   f011
00098e   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
000990   f010
000992   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
000994   f00f
000996   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
000998   f00e
00099a   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
00099c   f00d
00099e   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
0009a0   f00c
0009a2   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0009a4   f00b
0009a6   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0009a8   f00a
0009aa   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0009ac   f009
0009ae   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0009b0   f008
0009b2   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0009b4   f007
0009b6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0009b8   f006
0009ba   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0009bc   f005
0009be   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0009c0   f004
0009c2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0009c4   f003
0009c6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0009c8   f002
0009ca   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0009cc   f001
0009ce   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0009d0   f000
0009d2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0009d4   ffd9
0009d6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__check_alarm	code
                                           _check_alarm:
                                           ;	.line	257; test.c	void check_alarm(){
002a94   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002a96   ffe5
002a98   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002a9a   ffd9
002a9c   010f     movlb	0xf                	BANKSEL	_alarm_set
                                           ;	.line	259; test.c	if(alarm_set && !ring_today && hour == alarm_hour && minute == alarm_minute){
002a9e   5143     movf	0x43, 0, 0x1        	MOVF	_alarm_set, W, B
002aa0   010f     movlb	0xf                	BANKSEL	(_alarm_set + 1)
002aa2   1144     iorwf	0x44, 0, 0x1       	IORWF	(_alarm_set + 1), W, B
002aa4   e025     bz	0x2af0                	BZ	_00291_DS_
002aa6   010f     movlb	0xf                	BANKSEL	_ring_today
002aa8   5141     movf	0x41, 0, 0x1        	MOVF	_ring_today, W, B
002aaa   010f     movlb	0xf                	BANKSEL	(_ring_today + 1)
002aac   1142     iorwf	0x42, 0, 0x1       	IORWF	(_ring_today + 1), W, B
002aae   e120     bnz	0x2af0               	BNZ	_00291_DS_
002ab0   010f     movlb	0xf                	BANKSEL	_hour
002ab2   5149     movf	0x49, 0, 0x1        	MOVF	_hour, W, B
002ab4   010f     movlb	0xf                	BANKSEL	_alarm_hour
002ab6   194f     xorwf	0x4f, 0, 0x1       	XORWF	_alarm_hour, W, B
002ab8   e105     bnz	0x2ac4               	BNZ	_00297_DS_
002aba   010f     movlb	0xf                	BANKSEL	(_hour + 1)
002abc   514a     movf	0x4a, 0, 0x1        	MOVF	(_hour + 1), W, B
002abe   010f     movlb	0xf                	BANKSEL	(_alarm_hour + 1)
002ac0   1950     xorwf	0x50, 0, 0x1       	XORWF	(_alarm_hour + 1), W, B
002ac2   e001     bz	0x2ac6                	BZ	_00298_DS_
                                           _00297_DS_:
002ac4   d015     bra	0x2af0               	BRA	_00291_DS_
                                           _00298_DS_:
002ac6   010f     movlb	0xf                	BANKSEL	_minute
002ac8   514b     movf	0x4b, 0, 0x1        	MOVF	_minute, W, B
002aca   010f     movlb	0xf                	BANKSEL	_alarm_minute
002acc   1951     xorwf	0x51, 0, 0x1       	XORWF	_alarm_minute, W, B
002ace   e105     bnz	0x2ada               	BNZ	_00299_DS_
002ad0   010f     movlb	0xf                	BANKSEL	(_minute + 1)
002ad2   514c     movf	0x4c, 0, 0x1        	MOVF	(_minute + 1), W, B
002ad4   010f     movlb	0xf                	BANKSEL	(_alarm_minute + 1)
002ad6   1952     xorwf	0x52, 0, 0x1       	XORWF	(_alarm_minute + 1), W, B
002ad8   e001     bz	0x2adc                	BZ	_00300_DS_
                                           _00299_DS_:
002ada   d00a     bra	0x2af0               	BRA	_00291_DS_
                                           _00300_DS_:
                                           ;	.line	261; test.c	alarm_ring = 1;
002adc   0e01     movlw	0x1                	MOVLW	0x01
002ade   010f     movlb	0xf                	BANKSEL	_alarm_ring
002ae0   6f45     movwf	0x45, 0x1          	MOVWF	_alarm_ring, B
002ae2   010f     movlb	0xf                	BANKSEL	(_alarm_ring + 1)
002ae4   6b46     clrf	0x46, 0x1           	CLRF	(_alarm_ring + 1), B
                                           ;	.line	262; test.c	ring_today = 1;
002ae6   0e01     movlw	0x1                	MOVLW	0x01
002ae8   010f     movlb	0xf                	BANKSEL	_ring_today
002aea   6f41     movwf	0x41, 0x1          	MOVWF	_ring_today, B
002aec   010f     movlb	0xf                	BANKSEL	(_ring_today + 1)
002aee   6b42     clrf	0x42, 0x1           	CLRF	(_ring_today + 1), B
                                           _00291_DS_:
002af0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002af2   ffd9
002af4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__timer0_conf	code
                                           _timer0_conf:
                                           ;	.line	217; test.c	void timer0_conf(){
002d02   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002d04   ffe5
002d06   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002d08   ffd9
                                           ;	.line	218; test.c	T0CONbits.T08BIT = 0;  //use timer0 16-bit counter
002d0a   9cd5     bcf	0xd5, 0x6, 0         	BCF	_T0CONbits, 6
                                           ;	.line	219; test.c	T0CONbits.T0CS = 0;  //use timer0 instruction cycle clock
002d0c   9ad5     bcf	0xd5, 0x5, 0         	BCF	_T0CONbits, 5
                                           ;	.line	220; test.c	INTCONbits.TMR0IE = 1; // enable timer0 interrupt
002d0e   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
                                           ;	.line	221; test.c	T0CONbits.PSA = 0;  //enable timer0 prescaler
002d10   96d5     bcf	0xd5, 0x3, 0         	BCF	_T0CONbits, 3
                                           ;	.line	223; test.c	T0CONbits.T0PS2 = 1;
002d12   84d5     bsf	0xd5, 0x2, 0         	BSF	_T0CONbits, 2
                                           ;	.line	224; test.c	T0CONbits.T0PS1 = 1;
002d14   82d5     bsf	0xd5, 0x1, 0         	BSF	_T0CONbits, 1
                                           ;	.line	225; test.c	T0CONbits.T0PS0 = 0;
002d16   90d5     bcf	0xd5, 0, 0           	BCF	_T0CONbits, 0
                                           ;	.line	227; test.c	TMR0L = LOW(14364);
002d18   0e1c     movlw	0x1c               	MOVLW	0x1c
002d1a   6ed6     movwf	0xd6, 0            	MOVWF	_TMR0L
                                           ;	.line	228; test.c	TMR0H = HIGH(14364);
002d1c   0e38     movlw	0x38               	MOVLW	0x38
002d1e   6ed7     movwf	0xd7, 0            	MOVWF	_TMR0H
002d20   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002d22   ffd9
002d24   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__high_isrr	code
                                           _high_isrr:
                                           ;	.line	57; test.c	void high_isrr (void) interrupt 1{
00120e   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
001210   ffe5
001212   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
001214   ffe5
001216   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
001218   ffe5
00121a   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
00121c   ffe5
00121e   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
001220   ffe5
001222   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
001224   ffe5
001226   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
001228   ffe5
00122a   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
00122c   ffe5
00122e   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
001230   ffe5
001232   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001234   ffe5
001236   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001238   ffd9
00123a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00123c   ffe5
00123e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001240   ffe5
                                           ;	.line	59; test.c	if(INTCONbits.T0IF){
001242   a4f2     btfss	0xf2, 0x2, 0       	BTFSS	_INTCONbits, 2
001244   d05c     bra	0x12fe               	BRA	_00188_DS_
                                           ;	.line	61; test.c	TMR0L = LOW(14364);
001246   0e1c     movlw	0x1c               	MOVLW	0x1c
001248   6ed6     movwf	0xd6, 0            	MOVWF	_TMR0L
                                           ;	.line	62; test.c	TMR0H = HIGH(14364);
00124a   0e38     movlw	0x38               	MOVLW	0x38
00124c   6ed7     movwf	0xd7, 0            	MOVWF	_TMR0H
                                           ;	.line	64; test.c	INTCONbits.T0IF = 0;
00124e   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           ;	.line	66; test.c	blink^=1;
001250   0e01     movlw	0x1                	MOVLW	0x01
001252   010f     movlb	0xf                	BANKSEL	_blink
001254   1b53     xorwf	0x53, 0x1, 0x1     	XORWF	_blink, F, B
                                           ;	.line	67; test.c	update_lcd();
001256   ec06     call	0xc, 0              	CALL	_update_lcd
001258   f000
00125a   010f     movlb	0xf                	BANKSEL	_alarm_ring
                                           ;	.line	69; test.c	if(alarm_ring){ LED1_IO ^= 1; LED2_IO ^= 1; }
00125c   5145     movf	0x45, 0, 0x1        	MOVF	_alarm_ring, W, B
00125e   010f     movlb	0xf                	BANKSEL	(_alarm_ring + 1)
001260   1146     iorwf	0x46, 0, 0x1       	IORWF	(_alarm_ring + 1), W, B
001262   e01c     bz	0x129c                	BZ	_00106_DS_
001264   6a00     clrf	0, 0                	CLRF	r0x00
001266   b291     btfsc	0x91, 0x1, 0       	BTFSC	_LATJbits, 1
001268   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00126a   0e01     movlw	0x1                	MOVLW	0x01
00126c   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
00126e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001270   0b01     andlw	0x1                	ANDLW	0x01
001272   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
001274   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
001276   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
001278   0bfd     andlw	0xfd               	ANDLW	0xfd
00127a   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
00127c   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
00127e   6a00     clrf	0, 0                	CLRF	r0x00
001280   b491     btfsc	0x91, 0x2, 0       	BTFSC	_LATJbits, 2
001282   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001284   0e01     movlw	0x1                	MOVLW	0x01
001286   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
001288   5000     movf	0, 0, 0             	MOVF	r0x00, W
00128a   0b01     andlw	0x1                	ANDLW	0x01
00128c   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
00128e   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
001290   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
001292   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
001294   0bfb     andlw	0xfb               	ANDLW	0xfb
001296   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
001298   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
00129a   d002     bra	0x12a0               	BRA	_00107_DS_
                                           _00106_DS_:
                                           ;	.line	70; test.c	else{ LED1_IO = 0; LED2_IO = 0; }
00129c   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
00129e   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           _00107_DS_:
                                           ;	.line	71; test.c	if(state == SHOW_TIME) LED0_IO ^=1;
0012a0   6a00     clrf	0, 0                	CLRF	r0x00
0012a2   010f     movlb	0xf                	BANKSEL	_state
0012a4   5147     movf	0x47, 0, 0x1        	MOVF	_state, W, B
0012a6   0a01     xorlw	0x1                	XORLW	0x01
0012a8   e104     bnz	0x12b2               	BNZ	_00228_DS_
0012aa   010f     movlb	0xf                	BANKSEL	(_state + 1)
0012ac   5148     movf	0x48, 0, 0x1        	MOVF	(_state + 1), W, B
0012ae   e101     bnz	0x12b2               	BNZ	_00228_DS_
0012b0   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
                                           _00228_DS_:
0012b2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0012b4   e00d     bz	0x12d0                	BZ	_00109_DS_
0012b6   6a01     clrf	0x1, 0              	CLRF	r0x01
0012b8   b091     btfsc	0x91, 0, 0         	BTFSC	_LATJbits, 0
0012ba   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0012bc   0e01     movlw	0x1                	MOVLW	0x01
0012be   1a01     xorwf	0x1, 0x1, 0        	XORWF	r0x01, F
0012c0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0012c2   0b01     andlw	0x1                	ANDLW	0x01
0012c4   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0012c6   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
0012c8   0bfe     andlw	0xfe               	ANDLW	0xfe
0012ca   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
0012cc   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
0012ce   d001     bra	0x12d2               	BRA	_00110_DS_
                                           _00109_DS_:
                                           ;	.line	72; test.c	else LED0_IO = 0;
0012d0   9091     bcf	0x91, 0, 0           	BCF	_LATJbits, 0
                                           _00110_DS_:
                                           ;	.line	74; test.c	if(state == SHOW_TIME) check_alarm();
0012d2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0012d4   e002     bz	0x12da                	BZ	_00112_DS_
0012d6   ec4a     call	0x2a94, 0           	CALL	_check_alarm
0012d8   f015
                                           _00112_DS_:
0012da   010f     movlb	0xf                	BANKSEL	_state
                                           ;	.line	75; test.c	if(state != CONFIG_CLOCK_HOUR && state!=CONFIG_CLOCK_MINUTE) add_second();
0012dc   5147     movf	0x47, 0, 0x1        	MOVF	_state, W, B
0012de   0a04     xorlw	0x4                	XORLW	0x04
0012e0   e103     bnz	0x12e8               	BNZ	_00231_DS_
0012e2   010f     movlb	0xf                	BANKSEL	(_state + 1)
0012e4   5148     movf	0x48, 0, 0x1        	MOVF	(_state + 1), W, B
0012e6   e009     bz	0x12fa                	BZ	_00114_DS_
                                           _00231_DS_:
0012e8   010f     movlb	0xf                	BANKSEL	_state
0012ea   5147     movf	0x47, 0, 0x1        	MOVF	_state, W, B
0012ec   0a05     xorlw	0x5                	XORLW	0x05
0012ee   e103     bnz	0x12f6               	BNZ	_00233_DS_
0012f0   010f     movlb	0xf                	BANKSEL	(_state + 1)
0012f2   5148     movf	0x48, 0, 0x1        	MOVF	(_state + 1), W, B
0012f4   e002     bz	0x12fa                	BZ	_00114_DS_
                                           _00233_DS_:
0012f6   ec04     call	0x2c08, 0           	CALL	_add_second
0012f8   f016
                                           _00114_DS_:
                                           ;	.line	77; test.c	INTCON3bits.INT1F  = 0;   //clear INT1 flag
0012fa   90f0     bcf	0xf0, 0, 0           	BCF	_INTCON3bits, 0
0012fc   d17b     bra	0x15f4               	BRA	_00190_DS_
                                           _00188_DS_:
                                           ;	.line	80; test.c	else if(INTCON3bits.INT1F){
0012fe   a0f0     btfss	0xf0, 0, 0         	BTFSS	_INTCON3bits, 0
001300   d0a6     bra	0x144e               	BRA	_00185_DS_
001302   010f     movlb	0xf                	BANKSEL	_state
                                           ;	.line	83; test.c	if(state == SHOW_TIME){			
001304   5147     movf	0x47, 0, 0x1        	MOVF	_state, W, B
001306   0a01     xorlw	0x1                	XORLW	0x01
001308   e11a     bnz	0x133e               	BNZ	_00143_DS_
00130a   010f     movlb	0xf                	BANKSEL	(_state + 1)
00130c   5148     movf	0x48, 0, 0x1        	MOVF	(_state + 1), W, B
00130e   e001     bz	0x1312                	BZ	_00235_DS_
                                           _00234_DS_:
001310   d016     bra	0x133e               	BRA	_00143_DS_
                                           _00235_DS_:
001312   010f     movlb	0xf                	BANKSEL	_alarm_ring
                                           ;	.line	85; test.c	if(alarm_ring){
001314   5145     movf	0x45, 0, 0x1        	MOVF	_alarm_ring, W, B
001316   010f     movlb	0xf                	BANKSEL	(_alarm_ring + 1)
001318   1146     iorwf	0x46, 0, 0x1       	IORWF	(_alarm_ring + 1), W, B
00131a   e009     bz	0x132e                	BZ	_00117_DS_
00131c   010f     movlb	0xf                	BANKSEL	_alarm_set
                                           ;	.line	87; test.c	alarm_set = 0; 
00131e   6b43     clrf	0x43, 0x1           	CLRF	_alarm_set, B
001320   010f     movlb	0xf                	BANKSEL	(_alarm_set + 1)
001322   6b44     clrf	0x44, 0x1           	CLRF	(_alarm_set + 1), B
001324   010f     movlb	0xf                	BANKSEL	_alarm_ring
                                           ;	.line	88; test.c	alarm_ring = 0;
001326   6b45     clrf	0x45, 0x1           	CLRF	_alarm_ring, B
001328   010f     movlb	0xf                	BANKSEL	(_alarm_ring + 1)
00132a   6b46     clrf	0x46, 0x1           	CLRF	(_alarm_ring + 1), B
00132c   d005     bra	0x1338               	BRA	_00118_DS_
                                           _00117_DS_:
                                           ;	.line	90; test.c	}else state = CONFIG_CLOCK;
00132e   0e02     movlw	0x2                	MOVLW	0x02
001330   010f     movlb	0xf                	BANKSEL	_state
001332   6f47     movwf	0x47, 0x1          	MOVWF	_state, B
001334   010f     movlb	0xf                	BANKSEL	(_state + 1)
001336   6b48     clrf	0x48, 0x1           	CLRF	(_state + 1), B
                                           _00118_DS_:
                                           ;	.line	92; test.c	update_lcd();
001338   ec06     call	0xc, 0              	CALL	_update_lcd
00133a   f000
00133c   d086     bra	0x144a               	BRA	_00144_DS_
                                           _00143_DS_:
00133e   010f     movlb	0xf                	BANKSEL	_state
                                           ;	.line	95; test.c	}else if(state == CONFIG_CLOCK){			
001340   5147     movf	0x47, 0, 0x1        	MOVF	_state, W, B
001342   0a02     xorlw	0x2                	XORLW	0x02
001344   e10c     bnz	0x135e               	BNZ	_00140_DS_
001346   010f     movlb	0xf                	BANKSEL	(_state + 1)
001348   5148     movf	0x48, 0, 0x1        	MOVF	(_state + 1), W, B
00134a   e001     bz	0x134e                	BZ	_00237_DS_
                                           _00236_DS_:
00134c   d008     bra	0x135e               	BRA	_00140_DS_
                                           _00237_DS_:
                                           ;	.line	97; test.c	state = CONFIG_ALARM;
00134e   0e03     movlw	0x3                	MOVLW	0x03
001350   010f     movlb	0xf                	BANKSEL	_state
001352   6f47     movwf	0x47, 0x1          	MOVWF	_state, B
001354   010f     movlb	0xf                	BANKSEL	(_state + 1)
001356   6b48     clrf	0x48, 0x1           	CLRF	(_state + 1), B
                                           ;	.line	98; test.c	update_lcd();
001358   ec06     call	0xc, 0              	CALL	_update_lcd
00135a   f000
00135c   d076     bra	0x144a               	BRA	_00144_DS_
                                           _00140_DS_:
00135e   010f     movlb	0xf                	BANKSEL	_state
                                           ;	.line	101; test.c	}else if(state == CONFIG_ALARM){			
001360   5147     movf	0x47, 0, 0x1        	MOVF	_state, W, B
001362   0a03     xorlw	0x3                	XORLW	0x03
001364   e10c     bnz	0x137e               	BNZ	_00137_DS_
001366   010f     movlb	0xf                	BANKSEL	(_state + 1)
001368   5148     movf	0x48, 0, 0x1        	MOVF	(_state + 1), W, B
00136a   e001     bz	0x136e                	BZ	_00239_DS_
                                           _00238_DS_:
00136c   d008     bra	0x137e               	BRA	_00137_DS_
                                           _00239_DS_:
                                           ;	.line	103; test.c	state = SHOW_TIME;
00136e   0e01     movlw	0x1                	MOVLW	0x01
001370   010f     movlb	0xf                	BANKSEL	_state
001372   6f47     movwf	0x47, 0x1          	MOVWF	_state, B
001374   010f     movlb	0xf                	BANKSEL	(_state + 1)
001376   6b48     clrf	0x48, 0x1           	CLRF	(_state + 1), B
                                           ;	.line	104; test.c	update_lcd();
001378   ec06     call	0xc, 0              	CALL	_update_lcd
00137a   f000
00137c   d066     bra	0x144a               	BRA	_00144_DS_
                                           _00137_DS_:
00137e   010f     movlb	0xf                	BANKSEL	_state
                                           ;	.line	107; test.c	}else if(state == CONFIG_CLOCK_HOUR){			
001380   5147     movf	0x47, 0, 0x1        	MOVF	_state, W, B
001382   0a04     xorlw	0x4                	XORLW	0x04
001384   e10c     bnz	0x139e               	BNZ	_00134_DS_
001386   010f     movlb	0xf                	BANKSEL	(_state + 1)
001388   5148     movf	0x48, 0, 0x1        	MOVF	(_state + 1), W, B
00138a   e001     bz	0x138e                	BZ	_00241_DS_
                                           _00240_DS_:
00138c   d008     bra	0x139e               	BRA	_00134_DS_
                                           _00241_DS_:
                                           ;	.line	109; test.c	state = CONFIG_CLOCK_MINUTE;
00138e   0e05     movlw	0x5                	MOVLW	0x05
001390   010f     movlb	0xf                	BANKSEL	_state
001392   6f47     movwf	0x47, 0x1          	MOVWF	_state, B
001394   010f     movlb	0xf                	BANKSEL	(_state + 1)
001396   6b48     clrf	0x48, 0x1           	CLRF	(_state + 1), B
                                           ;	.line	110; test.c	update_lcd();
001398   ec06     call	0xc, 0              	CALL	_update_lcd
00139a   f000
00139c   d056     bra	0x144a               	BRA	_00144_DS_
                                           _00134_DS_:
00139e   010f     movlb	0xf                	BANKSEL	_state
                                           ;	.line	113; test.c	}else if(state == CONFIG_CLOCK_MINUTE){		
0013a0   5147     movf	0x47, 0, 0x1        	MOVF	_state, W, B
0013a2   0a05     xorlw	0x5                	XORLW	0x05
0013a4   e114     bnz	0x13ce               	BNZ	_00131_DS_
0013a6   010f     movlb	0xf                	BANKSEL	(_state + 1)
0013a8   5148     movf	0x48, 0, 0x1        	MOVF	(_state + 1), W, B
0013aa   e001     bz	0x13ae                	BZ	_00243_DS_
                                           _00242_DS_:
0013ac   d010     bra	0x13ce               	BRA	_00131_DS_
                                           _00243_DS_:
0013ae   010f     movlb	0xf                	BANKSEL	_ring_today
                                           ;	.line	115; test.c	ring_today = 0;
0013b0   6b41     clrf	0x41, 0x1           	CLRF	_ring_today, B
0013b2   010f     movlb	0xf                	BANKSEL	(_ring_today + 1)
0013b4   6b42     clrf	0x42, 0x1           	CLRF	(_ring_today + 1), B
0013b6   010f     movlb	0xf                	BANKSEL	_second
                                           ;	.line	116; test.c	second = 0;
0013b8   6b4d     clrf	0x4d, 0x1           	CLRF	_second, B
0013ba   010f     movlb	0xf                	BANKSEL	(_second + 1)
0013bc   6b4e     clrf	0x4e, 0x1           	CLRF	(_second + 1), B
                                           ;	.line	117; test.c	state = SHOW_TIME;
0013be   0e01     movlw	0x1                	MOVLW	0x01
0013c0   010f     movlb	0xf                	BANKSEL	_state
0013c2   6f47     movwf	0x47, 0x1          	MOVWF	_state, B
0013c4   010f     movlb	0xf                	BANKSEL	(_state + 1)
0013c6   6b48     clrf	0x48, 0x1           	CLRF	(_state + 1), B
                                           ;	.line	118; test.c	update_lcd();
0013c8   ec06     call	0xc, 0              	CALL	_update_lcd
0013ca   f000
0013cc   d03e     bra	0x144a               	BRA	_00144_DS_
                                           _00131_DS_:
0013ce   010f     movlb	0xf                	BANKSEL	_state
                                           ;	.line	121; test.c	}else if(state == CONFIG_ALARM_ON_OFF){			
0013d0   5147     movf	0x47, 0, 0x1        	MOVF	_state, W, B
0013d2   0a06     xorlw	0x6                	XORLW	0x06
0013d4   e117     bnz	0x1404               	BNZ	_00128_DS_
0013d6   010f     movlb	0xf                	BANKSEL	(_state + 1)
0013d8   5148     movf	0x48, 0, 0x1        	MOVF	(_state + 1), W, B
0013da   e001     bz	0x13de                	BZ	_00245_DS_
                                           _00244_DS_:
0013dc   d013     bra	0x1404               	BRA	_00128_DS_
                                           _00245_DS_:
0013de   010f     movlb	0xf                	BANKSEL	_alarm_set
                                           ;	.line	123; test.c	if(alarm_set) state = CONFIG_ALARM_HOUR;
0013e0   5143     movf	0x43, 0, 0x1        	MOVF	_alarm_set, W, B
0013e2   010f     movlb	0xf                	BANKSEL	(_alarm_set + 1)
0013e4   1144     iorwf	0x44, 0, 0x1       	IORWF	(_alarm_set + 1), W, B
0013e6   e006     bz	0x13f4                	BZ	_00120_DS_
0013e8   0e07     movlw	0x7                	MOVLW	0x07
0013ea   010f     movlb	0xf                	BANKSEL	_state
0013ec   6f47     movwf	0x47, 0x1          	MOVWF	_state, B
0013ee   010f     movlb	0xf                	BANKSEL	(_state + 1)
0013f0   6b48     clrf	0x48, 0x1           	CLRF	(_state + 1), B
0013f2   d005     bra	0x13fe               	BRA	_00121_DS_
                                           _00120_DS_:
                                           ;	.line	124; test.c	else state = SHOW_TIME;
0013f4   0e01     movlw	0x1                	MOVLW	0x01
0013f6   010f     movlb	0xf                	BANKSEL	_state
0013f8   6f47     movwf	0x47, 0x1          	MOVWF	_state, B
0013fa   010f     movlb	0xf                	BANKSEL	(_state + 1)
0013fc   6b48     clrf	0x48, 0x1           	CLRF	(_state + 1), B
                                           _00121_DS_:
                                           ;	.line	126; test.c	update_lcd();
0013fe   ec06     call	0xc, 0              	CALL	_update_lcd
001400   f000
001402   d023     bra	0x144a               	BRA	_00144_DS_
                                           _00128_DS_:
001404   010f     movlb	0xf                	BANKSEL	_state
                                           ;	.line	129; test.c	}else if(state == CONFIG_ALARM_HOUR){			
001406   5147     movf	0x47, 0, 0x1        	MOVF	_state, W, B
001408   0a07     xorlw	0x7                	XORLW	0x07
00140a   e10c     bnz	0x1424               	BNZ	_00125_DS_
00140c   010f     movlb	0xf                	BANKSEL	(_state + 1)
00140e   5148     movf	0x48, 0, 0x1        	MOVF	(_state + 1), W, B
001410   e001     bz	0x1414                	BZ	_00247_DS_
                                           _00246_DS_:
001412   d008     bra	0x1424               	BRA	_00125_DS_
                                           _00247_DS_:
                                           ;	.line	131; test.c	state = CONFIG_ALARM_MINUTE;
001414   0e08     movlw	0x8                	MOVLW	0x08
001416   010f     movlb	0xf                	BANKSEL	_state
001418   6f47     movwf	0x47, 0x1          	MOVWF	_state, B
00141a   010f     movlb	0xf                	BANKSEL	(_state + 1)
00141c   6b48     clrf	0x48, 0x1           	CLRF	(_state + 1), B
                                           ;	.line	132; test.c	update_lcd();
00141e   ec06     call	0xc, 0              	CALL	_update_lcd
001420   f000
001422   d013     bra	0x144a               	BRA	_00144_DS_
                                           _00125_DS_:
001424   010f     movlb	0xf                	BANKSEL	_state
                                           ;	.line	135; test.c	}else if(state == CONFIG_ALARM_MINUTE){		
001426   5147     movf	0x47, 0, 0x1        	MOVF	_state, W, B
001428   0a08     xorlw	0x8                	XORLW	0x08
00142a   e10f     bnz	0x144a               	BNZ	_00144_DS_
00142c   010f     movlb	0xf                	BANKSEL	(_state + 1)
00142e   5148     movf	0x48, 0, 0x1        	MOVF	(_state + 1), W, B
001430   e001     bz	0x1434                	BZ	_00249_DS_
                                           _00248_DS_:
001432   d00b     bra	0x144a               	BRA	_00144_DS_
                                           _00249_DS_:
001434   010f     movlb	0xf                	BANKSEL	_ring_today
                                           ;	.line	137; test.c	ring_today = 0;
001436   6b41     clrf	0x41, 0x1           	CLRF	_ring_today, B
001438   010f     movlb	0xf                	BANKSEL	(_ring_today + 1)
00143a   6b42     clrf	0x42, 0x1           	CLRF	(_ring_today + 1), B
                                           ;	.line	138; test.c	state = SHOW_TIME;
00143c   0e01     movlw	0x1                	MOVLW	0x01
00143e   010f     movlb	0xf                	BANKSEL	_state
001440   6f47     movwf	0x47, 0x1          	MOVWF	_state, B
001442   010f     movlb	0xf                	BANKSEL	(_state + 1)
001444   6b48     clrf	0x48, 0x1           	CLRF	(_state + 1), B
                                           ;	.line	139; test.c	update_lcd();
001446   ec06     call	0xc, 0              	CALL	_update_lcd
001448   f000
                                           _00144_DS_:
                                           ;	.line	144; test.c	INTCON3bits.INT1F = 0;		
00144a   90f0     bcf	0xf0, 0, 0           	BCF	_INTCON3bits, 0
00144c   d0d3     bra	0x15f4               	BRA	_00190_DS_
                                           _00185_DS_:
                                           ;	.line	147; test.c	}else if(INTCON3bits.INT3F == 1){	
00144e   6a00     clrf	0, 0                	CLRF	r0x00
001450   b4f0     btfsc	0xf0, 0x2, 0       	BTFSC	_INTCON3bits, 2
001452   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001454   5000     movf	0, 0, 0             	MOVF	r0x00, W
001456   0a01     xorlw	0x1                	XORLW	0x01
001458   e001     bz	0x145c                	BZ	_00251_DS_
00145a   d0cc     bra	0x15f4               	BRA	_00190_DS_
                                           _00251_DS_:
00145c   010f     movlb	0xf                	BANKSEL	_state
                                           ;	.line	150; test.c	if(state==SHOW_TIME){
00145e   5147     movf	0x47, 0, 0x1        	MOVF	_state, W, B
001460   0a01     xorlw	0x1                	XORLW	0x01
001462   e11a     bnz	0x1498               	BNZ	_00180_DS_
001464   010f     movlb	0xf                	BANKSEL	(_state + 1)
001466   5148     movf	0x48, 0, 0x1        	MOVF	(_state + 1), W, B
001468   e001     bz	0x146c                	BZ	_00253_DS_
                                           _00252_DS_:
00146a   d016     bra	0x1498               	BRA	_00180_DS_
                                           _00253_DS_:
00146c   010f     movlb	0xf                	BANKSEL	_alarm_ring
                                           ;	.line	152; test.c	alarm_ring = 0;
00146e   6b45     clrf	0x45, 0x1           	CLRF	_alarm_ring, B
001470   010f     movlb	0xf                	BANKSEL	(_alarm_ring + 1)
001472   6b46     clrf	0x46, 0x1           	CLRF	(_alarm_ring + 1), B
001474   010f     movlb	0xf                	BANKSEL	_alarm_set
                                           ;	.line	153; test.c	if(alarm_set) alarm_set = 0;
001476   5143     movf	0x43, 0, 0x1        	MOVF	_alarm_set, W, B
001478   010f     movlb	0xf                	BANKSEL	(_alarm_set + 1)
00147a   1144     iorwf	0x44, 0, 0x1       	IORWF	(_alarm_set + 1), W, B
00147c   e005     bz	0x1488                	BZ	_00146_DS_
00147e   010f     movlb	0xf                	BANKSEL	_alarm_set
001480   6b43     clrf	0x43, 0x1           	CLRF	_alarm_set, B
001482   010f     movlb	0xf                	BANKSEL	(_alarm_set + 1)
001484   6b44     clrf	0x44, 0x1           	CLRF	(_alarm_set + 1), B
001486   d005     bra	0x1492               	BRA	_00147_DS_
                                           _00146_DS_:
                                           ;	.line	154; test.c	else alarm_set = 1;
001488   0e01     movlw	0x1                	MOVLW	0x01
00148a   010f     movlb	0xf                	BANKSEL	_alarm_set
00148c   6f43     movwf	0x43, 0x1          	MOVWF	_alarm_set, B
00148e   010f     movlb	0xf                	BANKSEL	(_alarm_set + 1)
001490   6b44     clrf	0x44, 0x1           	CLRF	(_alarm_set + 1), B
                                           _00147_DS_:
                                           ;	.line	155; test.c	update_lcd();
001492   ec06     call	0xc, 0              	CALL	_update_lcd
001494   f000
001496   d0ad     bra	0x15f2               	BRA	_00181_DS_
                                           _00180_DS_:
001498   010f     movlb	0xf                	BANKSEL	_state
                                           ;	.line	158; test.c	}else if(state == CONFIG_CLOCK){			
00149a   5147     movf	0x47, 0, 0x1        	MOVF	_state, W, B
00149c   0a02     xorlw	0x2                	XORLW	0x02
00149e   e10c     bnz	0x14b8               	BNZ	_00177_DS_
0014a0   010f     movlb	0xf                	BANKSEL	(_state + 1)
0014a2   5148     movf	0x48, 0, 0x1        	MOVF	(_state + 1), W, B
0014a4   e001     bz	0x14a8                	BZ	_00255_DS_
                                           _00254_DS_:
0014a6   d008     bra	0x14b8               	BRA	_00177_DS_
                                           _00255_DS_:
                                           ;	.line	160; test.c	state = CONFIG_CLOCK_HOUR;
0014a8   0e04     movlw	0x4                	MOVLW	0x04
0014aa   010f     movlb	0xf                	BANKSEL	_state
0014ac   6f47     movwf	0x47, 0x1          	MOVWF	_state, B
0014ae   010f     movlb	0xf                	BANKSEL	(_state + 1)
0014b0   6b48     clrf	0x48, 0x1           	CLRF	(_state + 1), B
                                           ;	.line	161; test.c	update_lcd();
0014b2   ec06     call	0xc, 0              	CALL	_update_lcd
0014b4   f000
0014b6   d09d     bra	0x15f2               	BRA	_00181_DS_
                                           _00177_DS_:
0014b8   010f     movlb	0xf                	BANKSEL	_state
                                           ;	.line	164; test.c	}else if(state == CONFIG_ALARM){			
0014ba   5147     movf	0x47, 0, 0x1        	MOVF	_state, W, B
0014bc   0a03     xorlw	0x3                	XORLW	0x03
0014be   e10c     bnz	0x14d8               	BNZ	_00174_DS_
0014c0   010f     movlb	0xf                	BANKSEL	(_state + 1)
0014c2   5148     movf	0x48, 0, 0x1        	MOVF	(_state + 1), W, B
0014c4   e001     bz	0x14c8                	BZ	_00257_DS_
                                           _00256_DS_:
0014c6   d008     bra	0x14d8               	BRA	_00174_DS_
                                           _00257_DS_:
                                           ;	.line	166; test.c	state = CONFIG_ALARM_ON_OFF;
0014c8   0e06     movlw	0x6                	MOVLW	0x06
0014ca   010f     movlb	0xf                	BANKSEL	_state
0014cc   6f47     movwf	0x47, 0x1          	MOVWF	_state, B
0014ce   010f     movlb	0xf                	BANKSEL	(_state + 1)
0014d0   6b48     clrf	0x48, 0x1           	CLRF	(_state + 1), B
                                           ;	.line	167; test.c	update_lcd();
0014d2   ec06     call	0xc, 0              	CALL	_update_lcd
0014d4   f000
0014d6   d08d     bra	0x15f2               	BRA	_00181_DS_
                                           _00174_DS_:
0014d8   010f     movlb	0xf                	BANKSEL	_state
                                           ;	.line	170; test.c	}else if(state == CONFIG_CLOCK_HOUR){			
0014da   5147     movf	0x47, 0, 0x1        	MOVF	_state, W, B
0014dc   0a04     xorlw	0x4                	XORLW	0x04
0014de   e119     bnz	0x1512               	BNZ	_00171_DS_
0014e0   010f     movlb	0xf                	BANKSEL	(_state + 1)
0014e2   5148     movf	0x48, 0, 0x1        	MOVF	(_state + 1), W, B
0014e4   e001     bz	0x14e8                	BZ	_00259_DS_
                                           _00258_DS_:
0014e6   d015     bra	0x1512               	BRA	_00171_DS_
                                           _00259_DS_:
0014e8   010f     movlb	0xf                	BANKSEL	_hour
                                           ;	.line	172; test.c	hour++;
0014ea   2b49     incf	0x49, 0x1, 0x1      	INCF	_hour, F, B
0014ec   e302     bnc	0x14f2               	BNC	_40466_DS_
0014ee   010f     movlb	0xf                	BANKSEL	(_hour + 1)
0014f0   2b4a     incf	0x4a, 0x1, 0x1      	INCF	(_hour + 1), F, B
                                           _40466_DS_:
0014f2   010f     movlb	0xf                	BANKSEL	(_hour + 1)
                                           ;	.line	173; test.c	if(hour>=24) hour = 0;
0014f4   514a     movf	0x4a, 0, 0x1        	MOVF	(_hour + 1), W, B
0014f6   0f80     addlw	0x80               	ADDLW	0x80
0014f8   0f80     addlw	0x80               	ADDLW	0x80
0014fa   e103     bnz	0x1502               	BNZ	_00260_DS_
0014fc   0e18     movlw	0x18               	MOVLW	0x18
0014fe   010f     movlb	0xf                	BANKSEL	_hour
001500   5d49     subwf	0x49, 0, 0x1       	SUBWF	_hour, W, B
                                           _00260_DS_:
001502   e304     bnc	0x150c               	BNC	_00149_DS_
001504   010f     movlb	0xf                	BANKSEL	_hour
001506   6b49     clrf	0x49, 0x1           	CLRF	_hour, B
001508   010f     movlb	0xf                	BANKSEL	(_hour + 1)
00150a   6b4a     clrf	0x4a, 0x1           	CLRF	(_hour + 1), B
                                           _00149_DS_:
                                           ;	.line	175; test.c	update_lcd();
00150c   ec06     call	0xc, 0              	CALL	_update_lcd
00150e   f000
001510   d070     bra	0x15f2               	BRA	_00181_DS_
                                           _00171_DS_:
001512   010f     movlb	0xf                	BANKSEL	_state
                                           ;	.line	178; test.c	}else if(state == CONFIG_CLOCK_MINUTE){		
001514   5147     movf	0x47, 0, 0x1        	MOVF	_state, W, B
001516   0a05     xorlw	0x5                	XORLW	0x05
001518   e119     bnz	0x154c               	BNZ	_00168_DS_
00151a   010f     movlb	0xf                	BANKSEL	(_state + 1)
00151c   5148     movf	0x48, 0, 0x1        	MOVF	(_state + 1), W, B
00151e   e001     bz	0x1522                	BZ	_00262_DS_
                                           _00261_DS_:
001520   d015     bra	0x154c               	BRA	_00168_DS_
                                           _00262_DS_:
001522   010f     movlb	0xf                	BANKSEL	_minute
                                           ;	.line	180; test.c	minute++;
001524   2b4b     incf	0x4b, 0x1, 0x1      	INCF	_minute, F, B
001526   e302     bnc	0x152c               	BNC	_50467_DS_
001528   010f     movlb	0xf                	BANKSEL	(_minute + 1)
00152a   2b4c     incf	0x4c, 0x1, 0x1      	INCF	(_minute + 1), F, B
                                           _50467_DS_:
00152c   010f     movlb	0xf                	BANKSEL	(_minute + 1)
                                           ;	.line	181; test.c	if(minute>=60) minute = 0;
00152e   514c     movf	0x4c, 0, 0x1        	MOVF	(_minute + 1), W, B
001530   0f80     addlw	0x80               	ADDLW	0x80
001532   0f80     addlw	0x80               	ADDLW	0x80
001534   e103     bnz	0x153c               	BNZ	_00263_DS_
001536   0e3c     movlw	0x3c               	MOVLW	0x3c
001538   010f     movlb	0xf                	BANKSEL	_minute
00153a   5d4b     subwf	0x4b, 0, 0x1       	SUBWF	_minute, W, B
                                           _00263_DS_:
00153c   e304     bnc	0x1546               	BNC	_00151_DS_
00153e   010f     movlb	0xf                	BANKSEL	_minute
001540   6b4b     clrf	0x4b, 0x1           	CLRF	_minute, B
001542   010f     movlb	0xf                	BANKSEL	(_minute + 1)
001544   6b4c     clrf	0x4c, 0x1           	CLRF	(_minute + 1), B
                                           _00151_DS_:
                                           ;	.line	183; test.c	update_lcd();
001546   ec06     call	0xc, 0              	CALL	_update_lcd
001548   f000
00154a   d053     bra	0x15f2               	BRA	_00181_DS_
                                           _00168_DS_:
00154c   010f     movlb	0xf                	BANKSEL	_state
                                           ;	.line	186; test.c	}else if(state == CONFIG_ALARM_ON_OFF){			
00154e   5147     movf	0x47, 0, 0x1        	MOVF	_state, W, B
001550   0a06     xorlw	0x6                	XORLW	0x06
001552   e116     bnz	0x1580               	BNZ	_00165_DS_
001554   010f     movlb	0xf                	BANKSEL	(_state + 1)
001556   5148     movf	0x48, 0, 0x1        	MOVF	(_state + 1), W, B
001558   e001     bz	0x155c                	BZ	_00265_DS_
                                           _00264_DS_:
00155a   d012     bra	0x1580               	BRA	_00165_DS_
                                           _00265_DS_:
00155c   010f     movlb	0xf                	BANKSEL	_alarm_set
                                           ;	.line	188; test.c	if(alarm_set) alarm_set = 0;
00155e   5143     movf	0x43, 0, 0x1        	MOVF	_alarm_set, W, B
001560   010f     movlb	0xf                	BANKSEL	(_alarm_set + 1)
001562   1144     iorwf	0x44, 0, 0x1       	IORWF	(_alarm_set + 1), W, B
001564   e005     bz	0x1570                	BZ	_00153_DS_
001566   010f     movlb	0xf                	BANKSEL	_alarm_set
001568   6b43     clrf	0x43, 0x1           	CLRF	_alarm_set, B
00156a   010f     movlb	0xf                	BANKSEL	(_alarm_set + 1)
00156c   6b44     clrf	0x44, 0x1           	CLRF	(_alarm_set + 1), B
00156e   d005     bra	0x157a               	BRA	_00154_DS_
                                           _00153_DS_:
                                           ;	.line	189; test.c	else alarm_set = 1;
001570   0e01     movlw	0x1                	MOVLW	0x01
001572   010f     movlb	0xf                	BANKSEL	_alarm_set
001574   6f43     movwf	0x43, 0x1          	MOVWF	_alarm_set, B
001576   010f     movlb	0xf                	BANKSEL	(_alarm_set + 1)
001578   6b44     clrf	0x44, 0x1           	CLRF	(_alarm_set + 1), B
                                           _00154_DS_:
                                           ;	.line	190; test.c	update_lcd();
00157a   ec06     call	0xc, 0              	CALL	_update_lcd
00157c   f000
00157e   d039     bra	0x15f2               	BRA	_00181_DS_
                                           _00165_DS_:
001580   010f     movlb	0xf                	BANKSEL	_state
                                           ;	.line	193; test.c	}else if(state == CONFIG_ALARM_HOUR){			
001582   5147     movf	0x47, 0, 0x1        	MOVF	_state, W, B
001584   0a07     xorlw	0x7                	XORLW	0x07
001586   e119     bnz	0x15ba               	BNZ	_00162_DS_
001588   010f     movlb	0xf                	BANKSEL	(_state + 1)
00158a   5148     movf	0x48, 0, 0x1        	MOVF	(_state + 1), W, B
00158c   e001     bz	0x1590                	BZ	_00267_DS_
                                           _00266_DS_:
00158e   d015     bra	0x15ba               	BRA	_00162_DS_
                                           _00267_DS_:
001590   010f     movlb	0xf                	BANKSEL	_alarm_hour
                                           ;	.line	195; test.c	alarm_hour++;
001592   2b4f     incf	0x4f, 0x1, 0x1      	INCF	_alarm_hour, F, B
001594   e302     bnc	0x159a               	BNC	_60468_DS_
001596   010f     movlb	0xf                	BANKSEL	(_alarm_hour + 1)
001598   2b50     incf	0x50, 0x1, 0x1      	INCF	(_alarm_hour + 1), F, B
                                           _60468_DS_:
00159a   010f     movlb	0xf                	BANKSEL	(_alarm_hour + 1)
                                           ;	.line	196; test.c	if(alarm_hour>=24) alarm_hour = 0;
00159c   5150     movf	0x50, 0, 0x1        	MOVF	(_alarm_hour + 1), W, B
00159e   0f80     addlw	0x80               	ADDLW	0x80
0015a0   0f80     addlw	0x80               	ADDLW	0x80
0015a2   e103     bnz	0x15aa               	BNZ	_00268_DS_
0015a4   0e18     movlw	0x18               	MOVLW	0x18
0015a6   010f     movlb	0xf                	BANKSEL	_alarm_hour
0015a8   5d4f     subwf	0x4f, 0, 0x1       	SUBWF	_alarm_hour, W, B
                                           _00268_DS_:
0015aa   e304     bnc	0x15b4               	BNC	_00156_DS_
0015ac   010f     movlb	0xf                	BANKSEL	_alarm_hour
0015ae   6b4f     clrf	0x4f, 0x1           	CLRF	_alarm_hour, B
0015b0   010f     movlb	0xf                	BANKSEL	(_alarm_hour + 1)
0015b2   6b50     clrf	0x50, 0x1           	CLRF	(_alarm_hour + 1), B
                                           _00156_DS_:
                                           ;	.line	198; test.c	update_lcd();
0015b4   ec06     call	0xc, 0              	CALL	_update_lcd
0015b6   f000
0015b8   d01c     bra	0x15f2               	BRA	_00181_DS_
                                           _00162_DS_:
0015ba   010f     movlb	0xf                	BANKSEL	_state
                                           ;	.line	201; test.c	}else if(state == CONFIG_ALARM_MINUTE){		
0015bc   5147     movf	0x47, 0, 0x1        	MOVF	_state, W, B
0015be   0a08     xorlw	0x8                	XORLW	0x08
0015c0   e118     bnz	0x15f2               	BNZ	_00181_DS_
0015c2   010f     movlb	0xf                	BANKSEL	(_state + 1)
0015c4   5148     movf	0x48, 0, 0x1        	MOVF	(_state + 1), W, B
0015c6   e001     bz	0x15ca                	BZ	_00270_DS_
                                           _00269_DS_:
0015c8   d014     bra	0x15f2               	BRA	_00181_DS_
                                           _00270_DS_:
0015ca   010f     movlb	0xf                	BANKSEL	_alarm_minute
                                           ;	.line	203; test.c	alarm_minute++;
0015cc   2b51     incf	0x51, 0x1, 0x1      	INCF	_alarm_minute, F, B
0015ce   e302     bnc	0x15d4               	BNC	_70469_DS_
0015d0   010f     movlb	0xf                	BANKSEL	(_alarm_minute + 1)
0015d2   2b52     incf	0x52, 0x1, 0x1      	INCF	(_alarm_minute + 1), F, B
                                           _70469_DS_:
0015d4   010f     movlb	0xf                	BANKSEL	(_alarm_minute + 1)
                                           ;	.line	204; test.c	if(alarm_minute>=60) alarm_minute = 0;
0015d6   5152     movf	0x52, 0, 0x1        	MOVF	(_alarm_minute + 1), W, B
0015d8   0f80     addlw	0x80               	ADDLW	0x80
0015da   0f80     addlw	0x80               	ADDLW	0x80
0015dc   e103     bnz	0x15e4               	BNZ	_00271_DS_
0015de   0e3c     movlw	0x3c               	MOVLW	0x3c
0015e0   010f     movlb	0xf                	BANKSEL	_alarm_minute
0015e2   5d51     subwf	0x51, 0, 0x1       	SUBWF	_alarm_minute, W, B
                                           _00271_DS_:
0015e4   e304     bnc	0x15ee               	BNC	_00158_DS_
0015e6   010f     movlb	0xf                	BANKSEL	_alarm_minute
0015e8   6b51     clrf	0x51, 0x1           	CLRF	_alarm_minute, B
0015ea   010f     movlb	0xf                	BANKSEL	(_alarm_minute + 1)
0015ec   6b52     clrf	0x52, 0x1           	CLRF	(_alarm_minute + 1), B
                                           _00158_DS_:
                                           ;	.line	206; test.c	update_lcd();
0015ee   ec06     call	0xc, 0              	CALL	_update_lcd
0015f0   f000
                                           _00181_DS_:
                                           ;	.line	211; test.c	INTCON3bits.INT3F  = 0;		
0015f2   94f0     bcf	0xf0, 0x2, 0         	BCF	_INTCON3bits, 2
                                           _00190_DS_:
0015f4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0015f6   f001
0015f8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0015fa   f000
0015fc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0015fe   ffd9
001600   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
001602   fffb
001604   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
001606   fffa
001608   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
00160a   ffea
00160c   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
00160e   ffe9
001610   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
001612   fff4
001614   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
001616   fff3
001618   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
00161a   ffe0
00161c   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
00161e   ffd8
001620   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
001622   ffe8
001624   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
001626   5320     movf	0x20, 0x1, 0x1      	DB	0x20, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x2e, 0x2e, 0x2e
001628   4154     rrncf	0x54, 0, 0x1       
00162a   5452     subfwb	0x52, 0, 0        
00162c   4e49     dcfsnz	0x49, 0x1, 0      
00162e   2e47     decfsz	0x47, 0x1, 0      
001630   2e2e     decfsz	0x2e, 0x1, 0      
001632   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x00
001634   2020     addwfc	0x20, 0, 0        
001636   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_1:
001638   2120     addwfc	0x20, 0, 0x1      	DB	0x20, 0x21, 0x21, 0x20, 0x25, 0x73, 0x3a, 0x25, 0x73, 0x3a, 0x25, 0x73
00163a   2021     addwfc	0x21, 0, 0        
00163c   7325     btg	0x25, 0x1, 0x1       
00163e   253a     addwf	0x3a, 0, 0x1       
001640   3a73     swapf	0x73, 0x1, 0       
001642   7325     btg	0x25, 0x1, 0x1       
001644   2120     addwfc	0x20, 0, 0x1      	DB	0x20, 0x21, 0x21, 0x20, 0x20, 0x57, 0x41, 0x4b, 0x45, 0x20, 0x55, 0x50
001646   2021     addwfc	0x21, 0, 0        
001648   5720     subfwb	0x20, 0x1, 0x1    
00164a   4b41     infsnz	0x41, 0x1, 0x1    
00164c   2045     addwfc	0x45, 0, 0        
00164e   5055     movf	0x55, 0, 0          
001650   2021     addwfc	0x21, 0, 0        	DB	0x21, 0x20, 0x44, 0x55, 0x44, 0x45, 0x21, 0x20, 0x00
001652   5544     subfwb	0x44, 0, 0x1      
001654   4544     rlncf	0x44, 0, 0x1       
001656   2021     addwfc	0x21, 0, 0        
001658   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_2:
00165a   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x73, 0x3a, 0x25, 0x73, 0x3a, 0x25, 0x73
00165c   2020     addwfc	0x20, 0, 0        
00165e   7325     btg	0x25, 0x1, 0x1       
001660   253a     addwf	0x3a, 0, 0x1       
001662   3a73     swapf	0x73, 0x1, 0       
001664   7325     btg	0x25, 0x1, 0x1       
001666   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x57, 0x41, 0x4b, 0x45, 0x20, 0x55, 0x50
001668   2020     addwfc	0x20, 0, 0        
00166a   5720     subfwb	0x20, 0x1, 0x1    
00166c   4b41     infsnz	0x41, 0x1, 0x1    
00166e   2045     addwfc	0x45, 0, 0        
001670   5055     movf	0x55, 0, 0          
001672   2021     addwfc	0x21, 0, 0        	DB	0x21, 0x20, 0x44, 0x55, 0x44, 0x45, 0x21, 0x20, 0x00
001674   5544     subfwb	0x44, 0, 0x1      
001676   4544     rlncf	0x44, 0, 0x1       
001678   2021     addwfc	0x21, 0, 0        
00167a   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_3:
00167c   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x73, 0x3a, 0x25, 0x73, 0x3a, 0x25, 0x73
00167e   2020     addwfc	0x20, 0, 0        
001680   7325     btg	0x25, 0x1, 0x1       
001682   253a     addwf	0x3a, 0, 0x1       
001684   3a73     swapf	0x73, 0x1, 0       
001686   7325     btg	0x25, 0x1, 0x1       
001688   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x20, 0x20
00168a   2020     addwfc	0x20, 0, 0        
00168c   4120     rrncf	0x20, 0, 0x1       
00168e   414c     rrncf	0x4c, 0, 0x1       
001690   4d52     dcfsnz	0x52, 0, 0x1      
001692   2020     addwfc	0x20, 0, 0        
001694   255b     addwf	0x5b, 0, 0x1       	DB	0x5b, 0x25, 0x73, 0x3a, 0x25, 0x73, 0x5d, 0x00
001696   3a73     swapf	0x73, 0x1, 0       
001698   7325     btg	0x25, 0x1, 0x1       
00169a   005d     dw	0x5d  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_4:
00169c   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x73, 0x3a, 0x25, 0x73, 0x3a, 0x25, 0x73
00169e   2020     addwfc	0x20, 0, 0        
0016a0   7325     btg	0x25, 0x1, 0x1       
0016a2   253a     addwf	0x3a, 0, 0x1       
0016a4   3a73     swapf	0x73, 0x1, 0       
0016a6   7325     btg	0x25, 0x1, 0x1       
0016a8   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x41, 0x4c, 0x41, 0x52, 0x4d
0016aa   2020     addwfc	0x20, 0, 0        
0016ac   2020     addwfc	0x20, 0, 0        
0016ae   4120     rrncf	0x20, 0, 0x1       
0016b0   414c     rrncf	0x4c, 0, 0x1       
0016b2   4d52     dcfsnz	0x52, 0, 0x1      
0016b4   203a     addwfc	0x3a, 0, 0        	DB	0x3a, 0x20, 0x4f, 0x46, 0x46, 0x00
0016b6   464f     rlncf	0x4f, 0x1, 0       
0016b8   0046     dw	0x46  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_5:
0016ba   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x4d, 0x45, 0x4e, 0x55, 0x20, 0x20
0016bc   2020     addwfc	0x20, 0, 0        
0016be   2020     addwfc	0x20, 0, 0        
0016c0   454d     rlncf	0x4d, 0, 0x1       
0016c2   554e     subfwb	0x4e, 0, 0x1      
0016c4   2020     addwfc	0x20, 0, 0        
0016c6   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45
0016c8   2020     addwfc	0x20, 0, 0        
0016ca   2020     addwfc	0x20, 0, 0        
0016cc   4843     infsnz	0x43, 0, 0        
0016ce   4e41     dcfsnz	0x41, 0x1, 0      
0016d0   4547     rlncf	0x47, 0, 0x1       
0016d2   4320     rrncf	0x20, 0x1, 0x1     	DB	0x20, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x3f, 0x00
0016d4   4f4c     dcfsnz	0x4c, 0x1, 0x1    
0016d6   4b43     infsnz	0x43, 0x1, 0x1    
0016d8   003f     dw	0x3f  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_6:
0016da   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x4d, 0x45, 0x4e, 0x55, 0x20, 0x20
0016dc   2020     addwfc	0x20, 0, 0        
0016de   2020     addwfc	0x20, 0, 0        
0016e0   454d     rlncf	0x4d, 0, 0x1       
0016e2   554e     subfwb	0x4e, 0, 0x1      
0016e4   2020     addwfc	0x20, 0, 0        
0016e6   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45
0016e8   2020     addwfc	0x20, 0, 0        
0016ea   2020     addwfc	0x20, 0, 0        
0016ec   4843     infsnz	0x43, 0, 0        
0016ee   4e41     dcfsnz	0x41, 0x1, 0      
0016f0   4547     rlncf	0x47, 0, 0x1       
0016f2   4120     rrncf	0x20, 0, 0x1       	DB	0x20, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x3f, 0x00
0016f4   414c     rrncf	0x4c, 0, 0x1       
0016f6   4d52     dcfsnz	0x52, 0, 0x1      
0016f8   003f     dw	0x3f  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_7:
0016fa   4553     rlncf	0x53, 0, 0x1       	DB	0x53, 0x45, 0x54, 0x20, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x3a, 0x20, 0x20
0016fc   2054     addwfc	0x54, 0, 0        
0016fe   4c43     dcfsnz	0x43, 0, 0        
001700   434f     rrncf	0x4f, 0x1, 0x1     
001702   3a4b     swapf	0x4b, 0x1, 0       
001704   2020     addwfc	0x20, 0, 0        
001706   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5b, 0x25, 0x73, 0x5d
001708   2020     addwfc	0x20, 0, 0        
00170a   2020     addwfc	0x20, 0, 0        
00170c   2020     addwfc	0x20, 0, 0        
00170e   255b     addwf	0x5b, 0, 0x1       
001710   5d73     subwf	0x73, 0, 0x1       
001712   203a     addwfc	0x3a, 0, 0        	DB	0x3a, 0x20, 0x25, 0x73, 0x00
001714   7325     btg	0x25, 0x1, 0x1       
001716   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_8:
001718   4553     rlncf	0x53, 0, 0x1       	DB	0x53, 0x45, 0x54, 0x20, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x3a, 0x20, 0x20
00171a   2054     addwfc	0x54, 0, 0        
00171c   4c43     dcfsnz	0x43, 0, 0        
00171e   434f     rrncf	0x4f, 0x1, 0x1     
001720   3a4b     swapf	0x4b, 0x1, 0       
001722   2020     addwfc	0x20, 0, 0        
001724   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x73, 0x20
001726   2020     addwfc	0x20, 0, 0        
001728   2020     addwfc	0x20, 0, 0        
00172a   2020     addwfc	0x20, 0, 0        
00172c   2520     addwf	0x20, 0, 0x1       
00172e   2073     addwfc	0x73, 0, 0        
001730   203a     addwfc	0x3a, 0, 0        	DB	0x3a, 0x20, 0x25, 0x73, 0x00
001732   7325     btg	0x25, 0x1, 0x1       
001734   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_9:
001736   4553     rlncf	0x53, 0, 0x1       	DB	0x53, 0x45, 0x54, 0x20, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x3a, 0x20, 0x20
001738   2054     addwfc	0x54, 0, 0        
00173a   4c43     dcfsnz	0x43, 0, 0        
00173c   434f     rrncf	0x4f, 0x1, 0x1     
00173e   3a4b     swapf	0x4b, 0x1, 0       
001740   2020     addwfc	0x20, 0, 0        
001742   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x73, 0x20
001744   2020     addwfc	0x20, 0, 0        
001746   2020     addwfc	0x20, 0, 0        
001748   2020     addwfc	0x20, 0, 0        
00174a   2520     addwf	0x20, 0, 0x1       
00174c   2073     addwfc	0x73, 0, 0        
00174e   5b3a     subwfb	0x3a, 0x1, 0x1    	DB	0x3a, 0x5b, 0x25, 0x73, 0x5d, 0x00
001750   7325     btg	0x25, 0x1, 0x1       
001752   005d     dw	0x5d  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_10:
001754   4553     rlncf	0x53, 0, 0x1       	DB	0x53, 0x45, 0x54, 0x20, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x3a, 0x20, 0x20
001756   2054     addwfc	0x54, 0, 0        
001758   4c41     dcfsnz	0x41, 0, 0        
00175a   5241     movf	0x41, 0x1, 0        
00175c   3a4d     swapf	0x4d, 0x1, 0       
00175e   2020     addwfc	0x20, 0, 0        
001760   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5b, 0x4f
001762   2020     addwfc	0x20, 0, 0        
001764   2020     addwfc	0x20, 0, 0        
001766   2020     addwfc	0x20, 0, 0        
001768   2020     addwfc	0x20, 0, 0        
00176a   4f5b     dcfsnz	0x5b, 0x1, 0x1    
00176c   204e     addwfc	0x4e, 0, 0        	DB	0x4e, 0x20, 0x5d, 0x00
00176e   005d     dw	0x5d  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_11:
001770   4553     rlncf	0x53, 0, 0x1       	DB	0x53, 0x45, 0x54, 0x20, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x3a, 0x20, 0x20
001772   2054     addwfc	0x54, 0, 0        
001774   4c41     dcfsnz	0x41, 0, 0        
001776   5241     movf	0x41, 0x1, 0        
001778   3a4d     swapf	0x4d, 0x1, 0       
00177a   2020     addwfc	0x20, 0, 0        
00177c   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5b, 0x4f
00177e   2020     addwfc	0x20, 0, 0        
001780   2020     addwfc	0x20, 0, 0        
001782   2020     addwfc	0x20, 0, 0        
001784   2020     addwfc	0x20, 0, 0        
001786   4f5b     dcfsnz	0x5b, 0x1, 0x1    
001788   4646     rlncf	0x46, 0x1, 0       	DB	0x46, 0x46, 0x5d, 0x00
00178a   005d     dw	0x5d  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_12:
00178c   4553     rlncf	0x53, 0, 0x1       	DB	0x53, 0x45, 0x54, 0x20, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x3a, 0x20, 0x20
00178e   2054     addwfc	0x54, 0, 0        
001790   4c41     dcfsnz	0x41, 0, 0        
001792   5241     movf	0x41, 0x1, 0        
001794   3a4d     swapf	0x4d, 0x1, 0       
001796   2020     addwfc	0x20, 0, 0        
001798   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5b, 0x25, 0x73, 0x5d
00179a   2020     addwfc	0x20, 0, 0        
00179c   2020     addwfc	0x20, 0, 0        
00179e   2020     addwfc	0x20, 0, 0        
0017a0   255b     addwf	0x5b, 0, 0x1       
0017a2   5d73     subwf	0x73, 0, 0x1       
0017a4   203a     addwfc	0x3a, 0, 0        	DB	0x3a, 0x20, 0x25, 0x73, 0x00
0017a6   7325     btg	0x25, 0x1, 0x1       
0017a8   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_13:
0017aa   4553     rlncf	0x53, 0, 0x1       	DB	0x53, 0x45, 0x54, 0x20, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x3a, 0x20, 0x20
0017ac   2054     addwfc	0x54, 0, 0        
0017ae   4c41     dcfsnz	0x41, 0, 0        
0017b0   5241     movf	0x41, 0x1, 0        
0017b2   3a4d     swapf	0x4d, 0x1, 0       
0017b4   2020     addwfc	0x20, 0, 0        
0017b6   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x73, 0x20
0017b8   2020     addwfc	0x20, 0, 0        
0017ba   2020     addwfc	0x20, 0, 0        
0017bc   2020     addwfc	0x20, 0, 0        
0017be   2520     addwf	0x20, 0, 0x1       
0017c0   2073     addwfc	0x73, 0, 0        
0017c2   203a     addwfc	0x3a, 0, 0        	DB	0x3a, 0x20, 0x25, 0x73, 0x00
0017c4   7325     btg	0x25, 0x1, 0x1       
0017c6   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_14:
0017c8   4553     rlncf	0x53, 0, 0x1       	DB	0x53, 0x45, 0x54, 0x20, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x3a, 0x20, 0x20
0017ca   2054     addwfc	0x54, 0, 0        
0017cc   4c41     dcfsnz	0x41, 0, 0        
0017ce   5241     movf	0x41, 0x1, 0        
0017d0   3a4d     swapf	0x4d, 0x1, 0       
0017d2   2020     addwfc	0x20, 0, 0        
0017d4   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x73, 0x20
0017d6   2020     addwfc	0x20, 0, 0        
0017d8   2020     addwfc	0x20, 0, 0        
0017da   2020     addwfc	0x20, 0, 0        
0017dc   2520     addwf	0x20, 0, 0x1       
0017de   2073     addwfc	0x73, 0, 0        
0017e0   5b3a     subwfb	0x3a, 0x1, 0x1    	DB	0x3a, 0x5b, 0x25, 0x73, 0x5d, 0x00
0017e2   7325     btg	0x25, 0x1, 0x1       
0017e4   005d     dw	0x5d  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_15:
0017e6   2530     addwf	0x30, 0, 0x1       	DB	0x30, 0x25, 0x64, 0x00
0017e8   0064     dw	0x64  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_16:
0017ea   6425     cpfsgt	0x25, 0           	DB	0x25, 0x64, 0x00
0017ec   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 5194 (0x144a) bytes ( 3.96%)
                                           ;           	 2597 (0x0a25) words
                                           ; udata size:	   53 (0x0035) bytes ( 1.38%)
                                           ; access size:	   22 (0x0016) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Mar 13 2012) (UNIX)
                                           ; This file was generated Tue Mar 13 21:32:33 2012
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDInit
                                           	global _LCDUpdate
                                           	global _LCDErase
                                           	global _LCDText
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           
                                           udata_LCDBlocking_0	udata
                                           _LCDText	res	33
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDErase	code
                                           _LCDErase:
                                           ;	.line	392; TCPIP_Stack/LCDBlocking.c	void LCDErase(void)
0028cc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0028ce   ffe5
0028d0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0028d2   ffd9
0028d4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0028d6   ffe5
0028d8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0028da   ffe5
0028dc   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0028de   ffe5
0028e0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0028e2   ffe5
0028e4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0028e6   ffe5
0028e8   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0028ea   ffe5
0028ec   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0028ee   ffe5
0028f0   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0028f2   ffe5
                                           ;	.line	395; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);
0028f4   0e01     movlw	0x1                	MOVLW	0x01
0028f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028f8   0e00     movlw	0                  	MOVLW	0x00
0028fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028fc   ec7b     call	0x2af6, 0           	CALL	_LCDWrite
0028fe   f015
002900   0e02     movlw	0x2                	MOVLW	0x02
002902   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	396; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
002904   0e48     movlw	0x48               	MOVLW	0x48
002906   6e00     movwf	0, 0               	MOVWF	r0x00
002908   0e0d     movlw	0xd                	MOVLW	0x0d
00290a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00290c   6a02     clrf	0x2, 0              	CLRF	r0x02
00290e   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00305_DS_:
002910   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
002912   f004
002914   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
002916   f005
002918   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00291a   f006
00291c   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00291e   f007
002920   0eff     movlw	0xff               	MOVLW	0xff
002922   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002924   0eff     movlw	0xff               	MOVLW	0xff
002926   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002928   0eff     movlw	0xff               	MOVLW	0xff
00292a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00292c   0eff     movlw	0xff               	MOVLW	0xff
00292e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
002930   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002932   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
002934   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
002936   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002938   e1eb     bnz	0x2910               	BNZ	_00305_DS_
                                           ;	.line	399; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', 32);
00293a   0e00     movlw	0                  	MOVLW	0x00
00293c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00293e   0e20     movlw	0x20               	MOVLW	0x20
002940   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002942   0e20     movlw	0x20               	MOVLW	0x20
002944   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002946   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
002948   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00294a   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
00294c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00294e   ec43     call	0x2686, 0           	CALL	_memset
002950   f013
002952   0e05     movlw	0x5                	MOVLW	0x05
002954   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002956   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002958   f007
00295a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00295c   f006
00295e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002960   f005
002962   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002964   f004
002966   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002968   f003
00296a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00296c   f002
00296e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002970   f001
002972   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002974   f000
002976   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002978   ffd9
00297a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDUpdate	code
                                           _LCDUpdate:
                                           ;	.line	332; TCPIP_Stack/LCDBlocking.c	void LCDUpdate(void)
0017ee   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0017f0   ffe5
0017f2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0017f4   ffd9
0017f6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0017f8   ffe5
0017fa   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0017fc   ffe5
0017fe   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001800   ffe5
001802   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001804   ffe5
001806   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001808   ffe5
00180a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00180c   ffe5
00180e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001810   ffe5
001812   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001814   ffe5
001816   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001818   ffe5
                                           ;	.line	337; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x02);
00181a   0e02     movlw	0x2                	MOVLW	0x02
00181c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00181e   0e00     movlw	0                  	MOVLW	0x00
001820   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001822   ec7b     call	0x2af6, 0           	CALL	_LCDWrite
001824   f015
001826   0e02     movlw	0x2                	MOVLW	0x02
001828   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	338; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
00182a   0e48     movlw	0x48               	MOVLW	0x48
00182c   6e00     movwf	0, 0               	MOVWF	r0x00
00182e   0e0d     movlw	0xd                	MOVLW	0x0d
001830   6e01     movwf	0x1, 0             	MOVWF	r0x01
001832   6a02     clrf	0x2, 0              	CLRF	r0x02
001834   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00225_DS_:
001836   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
001838   f004
00183a   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00183c   f005
00183e   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001840   f006
001842   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001844   f007
001846   0eff     movlw	0xff               	MOVLW	0xff
001848   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00184a   0eff     movlw	0xff               	MOVLW	0xff
00184c   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00184e   0eff     movlw	0xff               	MOVLW	0xff
001850   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001852   0eff     movlw	0xff               	MOVLW	0xff
001854   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001856   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001858   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
00185a   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00185c   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00185e   e1eb     bnz	0x1836               	BNZ	_00225_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
001860   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00257_DS_:
001862   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
001864   f001
001866   6a02     clrf	0x2, 0              	CLRF	r0x02
001868   0e00     movlw	0                  	MOVLW	0x00
00186a   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
00186c   e102     bnz	0x1872               	BNZ	_00297_DS_
00186e   0e10     movlw	0x10               	MOVLW	0x10
001870   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00297_DS_:
001872   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001874   d057     bra	0x1924               	BRA	_00260_DS_
                                           ;	.line	345; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
001876   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001878   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00187a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00187c   6a02     clrf	0x2, 0              	CLRF	r0x02
00187e   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001880   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001882   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
001884   ffe9
001886   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
001888   ffea
00188a   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
00188c   f001
00188e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001890   e119     bnz	0x18c4               	BNZ	_00232_DS_
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
001892   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
001894   f001
                                           _00253_DS_:
001896   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
001898   f002
00189a   6a03     clrf	0x3, 0              	CLRF	r0x03
00189c   0e00     movlw	0                  	MOVLW	0x00
00189e   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0018a0   e102     bnz	0x18a6               	BNZ	_00298_DS_
0018a2   0e10     movlw	0x10               	MOVLW	0x10
0018a4   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00298_DS_:
0018a6   e20e     bc	0x18c4                	BC	_00232_DS_
                                           ;	.line	349; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
0018a8   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0018aa   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
0018ac   6e02     movwf	0x2, 0             	MOVWF	r0x02
0018ae   6a03     clrf	0x3, 0              	CLRF	r0x03
0018b0   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0018b2   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0018b4   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
0018b6   ffe9
0018b8   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
0018ba   ffea
0018bc   0e20     movlw	0x20               	MOVLW	0x20
0018be   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
0018c0   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0018c2   d7e9     bra	0x1896               	BRA	_00253_DS_
                                           _00232_DS_:
                                           ;	.line	352; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
0018c4   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0018c6   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0018c8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0018ca   6a02     clrf	0x2, 0              	CLRF	r0x02
0018cc   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0018ce   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0018d0   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0018d2   ffe9
0018d4   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0018d6   ffea
0018d8   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0018da   f001
0018dc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0018de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0018e0   0e01     movlw	0x1                	MOVLW	0x01
0018e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0018e4   ec7b     call	0x2af6, 0           	CALL	_LCDWrite
0018e6   f015
0018e8   0e02     movlw	0x2                	MOVLW	0x02
0018ea   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	353; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0018ec   0e55     movlw	0x55               	MOVLW	0x55
0018ee   6e01     movwf	0x1, 0             	MOVWF	r0x01
0018f0   6a02     clrf	0x2, 0              	CLRF	r0x02
0018f2   6a03     clrf	0x3, 0              	CLRF	r0x03
0018f4   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00233_DS_:
0018f6   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0018f8   f005
0018fa   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0018fc   f006
0018fe   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001900   f007
001902   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
001904   f008
001906   0eff     movlw	0xff               	MOVLW	0xff
001908   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00190a   0eff     movlw	0xff               	MOVLW	0xff
00190c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00190e   0eff     movlw	0xff               	MOVLW	0xff
001910   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001912   0eff     movlw	0xff               	MOVLW	0xff
001914   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
001916   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001918   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00191a   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00191c   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
00191e   e1eb     bnz	0x18f6               	BNZ	_00233_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
001920   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001922   d79f     bra	0x1862               	BRA	_00257_DS_
                                           _00260_DS_:
                                           ;	.line	357; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0xC0);
001924   0ec0     movlw	0xc0               	MOVLW	0xc0
001926   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001928   0e00     movlw	0                  	MOVLW	0x00
00192a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00192c   ec7b     call	0x2af6, 0           	CALL	_LCDWrite
00192e   f015
001930   0e02     movlw	0x2                	MOVLW	0x02
001932   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	358; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
001934   0e55     movlw	0x55               	MOVLW	0x55
001936   6e00     movwf	0, 0               	MOVWF	r0x00
001938   6a01     clrf	0x1, 0              	CLRF	r0x01
00193a   6a02     clrf	0x2, 0              	CLRF	r0x02
00193c   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00239_DS_:
00193e   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
001940   f004
001942   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001944   f005
001946   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001948   f006
00194a   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00194c   f007
00194e   0eff     movlw	0xff               	MOVLW	0xff
001950   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001952   0eff     movlw	0xff               	MOVLW	0xff
001954   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001956   0eff     movlw	0xff               	MOVLW	0xff
001958   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00195a   0eff     movlw	0xff               	MOVLW	0xff
00195c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00195e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001960   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
001962   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
001964   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001966   e1eb     bnz	0x193e               	BNZ	_00239_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
001968   0e10     movlw	0x10               	MOVLW	0x10
00196a   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00265_DS_:
00196c   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00196e   f001
001970   6a02     clrf	0x2, 0              	CLRF	r0x02
001972   0e00     movlw	0                  	MOVLW	0x00
001974   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
001976   e102     bnz	0x197c               	BNZ	_00299_DS_
001978   0e20     movlw	0x20               	MOVLW	0x20
00197a   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00299_DS_:
00197c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00197e   d057     bra	0x1a2e               	BRA	_00269_DS_
                                           ;	.line	365; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
001980   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001982   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
001984   6e01     movwf	0x1, 0             	MOVWF	r0x01
001986   6a02     clrf	0x2, 0              	CLRF	r0x02
001988   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
00198a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00198c   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
00198e   ffe9
001990   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
001992   ffea
001994   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
001996   f001
001998   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00199a   e119     bnz	0x19ce               	BNZ	_00246_DS_
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
00199c   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00199e   f001
                                           _00261_DS_:
0019a0   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
0019a2   f002
0019a4   6a03     clrf	0x3, 0              	CLRF	r0x03
0019a6   0e00     movlw	0                  	MOVLW	0x00
0019a8   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0019aa   e102     bnz	0x19b0               	BNZ	_00300_DS_
0019ac   0e20     movlw	0x20               	MOVLW	0x20
0019ae   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00300_DS_:
0019b0   e20e     bc	0x19ce                	BC	_00246_DS_
                                           ;	.line	369; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
0019b2   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0019b4   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
0019b6   6e02     movwf	0x2, 0             	MOVWF	r0x02
0019b8   6a03     clrf	0x3, 0              	CLRF	r0x03
0019ba   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0019bc   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0019be   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
0019c0   ffe9
0019c2   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
0019c4   ffea
0019c6   0e20     movlw	0x20               	MOVLW	0x20
0019c8   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
0019ca   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0019cc   d7e9     bra	0x19a0               	BRA	_00261_DS_
                                           _00246_DS_:
                                           ;	.line	372; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
0019ce   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0019d0   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0019d2   6e01     movwf	0x1, 0             	MOVWF	r0x01
0019d4   6a02     clrf	0x2, 0              	CLRF	r0x02
0019d6   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0019d8   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0019da   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0019dc   ffe9
0019de   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0019e0   ffea
0019e2   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0019e4   f001
0019e6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0019e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019ea   0e01     movlw	0x1                	MOVLW	0x01
0019ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019ee   ec7b     call	0x2af6, 0           	CALL	_LCDWrite
0019f0   f015
0019f2   0e02     movlw	0x2                	MOVLW	0x02
0019f4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	373; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0019f6   0e55     movlw	0x55               	MOVLW	0x55
0019f8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0019fa   6a02     clrf	0x2, 0              	CLRF	r0x02
0019fc   6a03     clrf	0x3, 0              	CLRF	r0x03
0019fe   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00247_DS_:
001a00   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001a02   f005
001a04   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001a06   f006
001a08   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001a0a   f007
001a0c   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
001a0e   f008
001a10   0eff     movlw	0xff               	MOVLW	0xff
001a12   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
001a14   0eff     movlw	0xff               	MOVLW	0xff
001a16   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001a18   0eff     movlw	0xff               	MOVLW	0xff
001a1a   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001a1c   0eff     movlw	0xff               	MOVLW	0xff
001a1e   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
001a20   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001a22   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
001a24   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001a26   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
001a28   e1eb     bnz	0x1a00               	BNZ	_00247_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
001a2a   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001a2c   d79f     bra	0x196c               	BRA	_00265_DS_
                                           _00269_DS_:
001a2e   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001a30   f008
001a32   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001a34   f007
001a36   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001a38   f006
001a3a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001a3c   f005
001a3e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001a40   f004
001a42   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001a44   f003
001a46   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001a48   f002
001a4a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001a4c   f001
001a4e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001a50   f000
001a52   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001a54   ffd9
001a56   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDInit	code
                                           _LCDInit:
                                           ;	.line	207; TCPIP_Stack/LCDBlocking.c	void LCDInit(void)
001a58   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001a5a   ffe5
001a5c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001a5e   ffd9
001a60   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001a62   ffe5
001a64   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001a66   ffe5
001a68   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001a6a   ffe5
001a6c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001a6e   ffe5
001a70   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001a72   ffe5
001a74   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001a76   ffe5
001a78   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001a7a   ffe5
001a7c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001a7e   ffe5
001a80   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001a82   ffe5
                                           ;	.line	211; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', sizeof(LCDText)-1);
001a84   0e00     movlw	0                  	MOVLW	0x00
001a86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a88   0e20     movlw	0x20               	MOVLW	0x20
001a8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a8c   0e20     movlw	0x20               	MOVLW	0x20
001a8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a90   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001a92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a94   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001a96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001a98   ec43     call	0x2686, 0           	CALL	_memset
001a9a   f013
001a9c   0e05     movlw	0x5                	MOVLW	0x05
001a9e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001aa0   010f     movlb	0xf                	BANKSEL	(_LCDText + 32)
                                           ;	.line	212; TCPIP_Stack/LCDBlocking.c	LCDText[sizeof(LCDText)-1] = 0;
001aa2   6b20     clrf	0x20, 0x1           	CLRF	(_LCDText + 32), B
                                           ;	.line	215; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
001aa4   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	216; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
001aa6   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	220; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
001aa8   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	233; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
001aaa   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	234; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
001aac   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	235; TCPIP_Stack/LCDBlocking.c	LCD_E_TRIS = 0;
001aae   9099     bcf	0x99, 0, 0           	BCF	_TRISHbits, 0
                                           ;	.line	239; TCPIP_Stack/LCDBlocking.c	DelayMs(40);
001ab0   0ea0     movlw	0xa0               	MOVLW	0xa0
001ab2   6e00     movwf	0, 0               	MOVWF	r0x00
001ab4   0e09     movlw	0x9                	MOVLW	0x09
001ab6   6e01     movwf	0x1, 0             	MOVWF	r0x01
001ab8   0e01     movlw	0x1                	MOVLW	0x01
001aba   6e02     movwf	0x2, 0             	MOVWF	r0x02
001abc   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00143_DS_:
001abe   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
001ac0   f004
001ac2   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001ac4   f005
001ac6   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001ac8   f006
001aca   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001acc   f007
001ace   0eff     movlw	0xff               	MOVLW	0xff
001ad0   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001ad2   0eff     movlw	0xff               	MOVLW	0xff
001ad4   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001ad6   0eff     movlw	0xff               	MOVLW	0xff
001ad8   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001ada   0eff     movlw	0xff               	MOVLW	0xff
001adc   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001ade   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001ae0   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
001ae2   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
001ae4   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001ae6   e1eb     bnz	0x1abe               	BNZ	_00143_DS_
                                           ;	.line	247; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = 0;
001ae8   9490     bcf	0x90, 0x2, 0         	BCF	_LATHbits, 2
                                           ;	.line	249; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = 0x03;
001aea   0e03     movlw	0x3                	MOVLW	0x03
001aec   6e8d     movwf	0x8d, 0            	MOVWF	_LATE
001aee   0000     nop                      	nop 
001af0   0000     nop                      	nop 
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
001af2   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00191_DS_:
001af4   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
001af6   f001
001af8   6a02     clrf	0x2, 0              	CLRF	r0x02
001afa   0e00     movlw	0                  	MOVLW	0x00
001afc   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
001afe   e102     bnz	0x1b04               	BNZ	_00220_DS_
001b00   0e03     movlw	0x3                	MOVLW	0x03
001b02   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00220_DS_:
001b04   e239     bc	0x1b78                	BC	_00194_DS_
                                           ;	.line	266; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
001b06   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
                                           ;	.line	267; TCPIP_Stack/LCDBlocking.c	Delay10us(1);	       	// Wait E Pulse width time (min 230ns)
001b08   0e11     movlw	0x11               	MOVLW	0x11
001b0a   6e01     movwf	0x1, 0             	MOVWF	r0x01
001b0c   6a02     clrf	0x2, 0              	CLRF	r0x02
001b0e   6a03     clrf	0x3, 0              	CLRF	r0x03
001b10   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00155_DS_:
001b12   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001b14   f005
001b16   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001b18   f006
001b1a   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001b1c   f007
001b1e   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
001b20   f008
001b22   0eff     movlw	0xff               	MOVLW	0xff
001b24   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
001b26   0eff     movlw	0xff               	MOVLW	0xff
001b28   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001b2a   0eff     movlw	0xff               	MOVLW	0xff
001b2c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001b2e   0eff     movlw	0xff               	MOVLW	0xff
001b30   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
001b32   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001b34   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
001b36   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001b38   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
001b3a   e1eb     bnz	0x1b12               	BNZ	_00155_DS_
                                           ;	.line	268; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
001b3c   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	269; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
001b3e   0e48     movlw	0x48               	MOVLW	0x48
001b40   6e01     movwf	0x1, 0             	MOVWF	r0x01
001b42   0e0d     movlw	0xd                	MOVLW	0x0d
001b44   6e02     movwf	0x2, 0             	MOVWF	r0x02
001b46   6a03     clrf	0x3, 0              	CLRF	r0x03
001b48   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00161_DS_:
001b4a   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001b4c   f005
001b4e   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001b50   f006
001b52   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001b54   f007
001b56   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
001b58   f008
001b5a   0eff     movlw	0xff               	MOVLW	0xff
001b5c   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
001b5e   0eff     movlw	0xff               	MOVLW	0xff
001b60   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001b62   0eff     movlw	0xff               	MOVLW	0xff
001b64   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001b66   0eff     movlw	0xff               	MOVLW	0xff
001b68   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
001b6a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001b6c   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
001b6e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001b70   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
001b72   e1eb     bnz	0x1b4a               	BNZ	_00161_DS_
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
001b74   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001b76   d7be     bra	0x1af4               	BRA	_00191_DS_
                                           _00194_DS_:
                                           ;	.line	295; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x38);
001b78   0e38     movlw	0x38               	MOVLW	0x38
001b7a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001b7c   0e00     movlw	0                  	MOVLW	0x00
001b7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001b80   ec7b     call	0x2af6, 0           	CALL	_LCDWrite
001b82   f015
001b84   0e02     movlw	0x2                	MOVLW	0x02
001b86   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	297; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
001b88   0e55     movlw	0x55               	MOVLW	0x55
001b8a   6e00     movwf	0, 0               	MOVWF	r0x00
001b8c   6a01     clrf	0x1, 0              	CLRF	r0x01
001b8e   6a02     clrf	0x2, 0              	CLRF	r0x02
001b90   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00167_DS_:
001b92   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
001b94   f004
001b96   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001b98   f005
001b9a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001b9c   f006
001b9e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001ba0   f007
001ba2   0eff     movlw	0xff               	MOVLW	0xff
001ba4   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001ba6   0eff     movlw	0xff               	MOVLW	0xff
001ba8   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001baa   0eff     movlw	0xff               	MOVLW	0xff
001bac   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001bae   0eff     movlw	0xff               	MOVLW	0xff
001bb0   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001bb2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001bb4   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
001bb6   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
001bb8   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001bba   e1eb     bnz	0x1b92               	BNZ	_00167_DS_
                                           ;	.line	300; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x06);	// Increment after each write, do not shift
001bbc   0e06     movlw	0x6                	MOVLW	0x06
001bbe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bc0   0e00     movlw	0                  	MOVLW	0x00
001bc2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bc4   ec7b     call	0x2af6, 0           	CALL	_LCDWrite
001bc6   f015
001bc8   0e02     movlw	0x2                	MOVLW	0x02
001bca   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	301; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
001bcc   0e55     movlw	0x55               	MOVLW	0x55
001bce   6e00     movwf	0, 0               	MOVWF	r0x00
001bd0   6a01     clrf	0x1, 0              	CLRF	r0x01
001bd2   6a02     clrf	0x2, 0              	CLRF	r0x02
001bd4   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00173_DS_:
001bd6   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
001bd8   f004
001bda   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001bdc   f005
001bde   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001be0   f006
001be2   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001be4   f007
001be6   0eff     movlw	0xff               	MOVLW	0xff
001be8   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001bea   0eff     movlw	0xff               	MOVLW	0xff
001bec   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001bee   0eff     movlw	0xff               	MOVLW	0xff
001bf0   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001bf2   0eff     movlw	0xff               	MOVLW	0xff
001bf4   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001bf6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001bf8   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
001bfa   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
001bfc   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001bfe   e1eb     bnz	0x1bd6               	BNZ	_00173_DS_
                                           ;	.line	304; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x0C);	// Turn display on, no cusor, no cursor blink
001c00   0e0c     movlw	0xc                	MOVLW	0x0c
001c02   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c04   0e00     movlw	0                  	MOVLW	0x00
001c06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c08   ec7b     call	0x2af6, 0           	CALL	_LCDWrite
001c0a   f015
001c0c   0e02     movlw	0x2                	MOVLW	0x02
001c0e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	305; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
001c10   0e55     movlw	0x55               	MOVLW	0x55
001c12   6e00     movwf	0, 0               	MOVWF	r0x00
001c14   6a01     clrf	0x1, 0              	CLRF	r0x01
001c16   6a02     clrf	0x2, 0              	CLRF	r0x02
001c18   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00179_DS_:
001c1a   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
001c1c   f004
001c1e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001c20   f005
001c22   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001c24   f006
001c26   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001c28   f007
001c2a   0eff     movlw	0xff               	MOVLW	0xff
001c2c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001c2e   0eff     movlw	0xff               	MOVLW	0xff
001c30   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001c32   0eff     movlw	0xff               	MOVLW	0xff
001c34   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001c36   0eff     movlw	0xff               	MOVLW	0xff
001c38   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001c3a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001c3c   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
001c3e   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
001c40   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001c42   e1eb     bnz	0x1c1a               	BNZ	_00179_DS_
                                           ;	.line	308; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);	
001c44   0e01     movlw	0x1                	MOVLW	0x01
001c46   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c48   0e00     movlw	0                  	MOVLW	0x00
001c4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c4c   ec7b     call	0x2af6, 0           	CALL	_LCDWrite
001c4e   f015
001c50   0e02     movlw	0x2                	MOVLW	0x02
001c52   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	309; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
001c54   0e48     movlw	0x48               	MOVLW	0x48
001c56   6e00     movwf	0, 0               	MOVWF	r0x00
001c58   0e0d     movlw	0xd                	MOVLW	0x0d
001c5a   6e01     movwf	0x1, 0             	MOVWF	r0x01
001c5c   6a02     clrf	0x2, 0              	CLRF	r0x02
001c5e   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00185_DS_:
001c60   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
001c62   f004
001c64   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001c66   f005
001c68   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001c6a   f006
001c6c   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001c6e   f007
001c70   0eff     movlw	0xff               	MOVLW	0xff
001c72   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001c74   0eff     movlw	0xff               	MOVLW	0xff
001c76   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001c78   0eff     movlw	0xff               	MOVLW	0xff
001c7a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001c7c   0eff     movlw	0xff               	MOVLW	0xff
001c7e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001c80   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001c82   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
001c84   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
001c86   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001c88   e1eb     bnz	0x1c60               	BNZ	_00185_DS_
001c8a   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001c8c   f008
001c8e   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001c90   f007
001c92   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001c94   f006
001c96   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001c98   f005
001c9a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001c9c   f004
001c9e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001ca0   f003
001ca2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001ca4   f002
001ca6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001ca8   f001
001caa   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001cac   f000
001cae   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001cb0   ffd9
001cb2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDWrite	code
                                           _LCDWrite:
                                           ;	.line	94; TCPIP_Stack/LCDBlocking.c	static void LCDWrite(BYTE RS, BYTE Data)
002af6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002af8   ffe5
002afa   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002afc   ffd9
002afe   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002b00   ffe5
002b02   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002b04   ffe5
002b06   0e02     movlw	0x2                	MOVLW	0x02
002b08   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002b0a   f000
002b0c   0e03     movlw	0x3                	MOVLW	0x03
002b0e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002b10   f001
                                           ;	.line	97; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
002b12   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	110; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
002b14   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	111; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
002b16   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	112; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
002b18   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	113; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = RS;
002b1a   5000     movf	0, 0, 0             	MOVF	r0x00, W
002b1c   0b01     andlw	0x1                	ANDLW	0x01
002b1e   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
002b20   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
002b22   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
002b24   5090     movf	0x90, 0, 0          	MOVF	_LATHbits, W
002b26   0bfb     andlw	0xfb               	ANDLW	0xfb
002b28   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
002b2a   6e90     movwf	0x90, 0            	MOVWF	_LATHbits
                                           ;	.line	140; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = Data;
002b2c   c001     movff	0x1, 0xf8d         	MOVFF	r0x01, _LATE
002b2e   ff8d
002b30   0000     nop                      	nop 
002b32   0000     nop                      	nop 
                                           ;	.line	155; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
002b34   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
002b36   0000     nop                      	nop 
002b38   0000     nop                      	nop 
002b3a   0000     nop                      	nop 
002b3c   0000     nop                      	nop 
002b3e   0000     nop                      	nop 
002b40   0000     nop                      	nop 
002b42   0000     nop                      	nop 
002b44   0000     nop                      	nop 
002b46   0000     nop                      	nop 
                                           ;	.line	165; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
002b48   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
002b4a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002b4c   f001
002b4e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002b50   f000
002b52   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002b54   ffd9
002b56   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   33 (0x0021) bytes ( 0.86%)
                                           ; access size:	    9 (0x0009) bytes
                                           
                                           
                                           	end
