gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00001 ;--------------------------------------------------------
               00002 ; File Created by SDCC : free open source ANSI-C Compiler
               00003 ; Version 2.9.4 #5595 (Mar 13 2012) (UNIX)
               00004 ; This file was generated Mon Mar 26 15:39:16 2012
               00005 ;--------------------------------------------------------
               00006 ; PIC16 port for the Microchip 16-bit core micros
               00007 ;--------------------------------------------------------
               00008         list    p=18f97j60
               00009 
               00010         radix dec
               00011 
               00012 ;--------------------------------------------------------
               00013 ; public variables in this module
               00014 ;--------------------------------------------------------
               00015         global _update_lcd
               00016         global _convert_value
               00017         global _DisplayWORD
               00018         global _DisplayString
               00019         global _strlcpy
               00020         global _ring_today
               00021         global _alarm_set
               00022         global _alarm_ring
               00023         global _state
               00024         global _hour
               00025         global _minute
               00026         global _second
               00027         global _alarm_hour
               00028         global _alarm_minute
               00029         global _blink
               00030         global _high_isrr
               00031         global _check_alarm
               00032         global _add_second
               00033         global _timer0_conf
               00034         global _main
               00035         global _add_minute
               00036         global _add_hour
               00037 
               00038 ;--------------------------------------------------------
               00039 ; extern variables in this module
               00040 ;--------------------------------------------------------
               00041         extern __gptrget1
               00042         extern __gptrput1
               00043         extern _EBSTCONbits
               00044         extern _MISTATbits
               00045         extern _EFLOCONbits
               00046         extern _MACON1bits
               00047         extern _MACON2bits
               00048         extern _MACON3bits
               00049         extern _MACON4bits
               00050         extern _MACLCON1bits
               00051         extern _MACLCON2bits
               00052         extern _MICONbits
               00053         extern _MICMDbits
               00054         extern _EWOLIEbits
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00055         extern _EWOLIRbits
               00056         extern _ERXFCONbits
               00057         extern _EIEbits
               00058         extern _ESTATbits
               00059         extern _ECON2bits
               00060         extern _EIRbits
               00061         extern _EDATAbits
               00062         extern _SSP2CON2bits
               00063         extern _SSP2CON1bits
               00064         extern _SSP2STATbits
               00065         extern _ECCP2DELbits
               00066         extern _ECCP2ASbits
               00067         extern _ECCP3DELbits
               00068         extern _ECCP3ASbits
               00069         extern _RCSTA2bits
               00070         extern _TXSTA2bits
               00071         extern _CCP5CONbits
               00072         extern _CCP4CONbits
               00073         extern _T4CONbits
               00074         extern _ECCP1DELbits
               00075         extern _BAUDCON2bits
               00076         extern _BAUDCTL2bits
               00077         extern _BAUDCONbits
               00078         extern _BAUDCON1bits
               00079         extern _BAUDCTLbits
               00080         extern _BAUDCTL1bits
               00081         extern _PORTAbits
               00082         extern _PORTBbits
               00083         extern _PORTCbits
               00084         extern _PORTDbits
               00085         extern _PORTEbits
               00086         extern _PORTFbits
               00087         extern _PORTGbits
               00088         extern _PORTHbits
               00089         extern _PORTJbits
               00090         extern _LATAbits
               00091         extern _LATBbits
               00092         extern _LATCbits
               00093         extern _LATDbits
               00094         extern _LATEbits
               00095         extern _LATFbits
               00096         extern _LATGbits
               00097         extern _LATHbits
               00098         extern _LATJbits
               00099         extern _DDRAbits
               00100         extern _TRISAbits
               00101         extern _DDRBbits
               00102         extern _TRISBbits
               00103         extern _DDRCbits
               00104         extern _TRISCbits
               00105         extern _DDRDbits
               00106         extern _TRISDbits
               00107         extern _DDREbits
               00108         extern _TRISEbits
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00109         extern _DDRFbits
               00110         extern _TRISFbits
               00111         extern _DDRGbits
               00112         extern _TRISGbits
               00113         extern _DDRHbits
               00114         extern _TRISHbits
               00115         extern _DDRJbits
               00116         extern _TRISJbits
               00117         extern _OSCTUNEbits
               00118         extern _MEMCONbits
               00119         extern _PIE1bits
               00120         extern _PIR1bits
               00121         extern _IPR1bits
               00122         extern _PIE2bits
               00123         extern _PIR2bits
               00124         extern _IPR2bits
               00125         extern _PIE3bits
               00126         extern _PIR3bits
               00127         extern _IPR3bits
               00128         extern _EECON1bits
               00129         extern _RCSTAbits
               00130         extern _RCSTA1bits
               00131         extern _TXSTAbits
               00132         extern _TXSTA1bits
               00133         extern _PSPCONbits
               00134         extern _T3CONbits
               00135         extern _CMCONbits
               00136         extern _CVRCONbits
               00137         extern _ECCP1ASbits
               00138         extern _CCP3CONbits
               00139         extern _ECCP3CONbits
               00140         extern _CCP2CONbits
               00141         extern _ECCP2CONbits
               00142         extern _CCP1CONbits
               00143         extern _ECCP1CONbits
               00144         extern _ADCON2bits
               00145         extern _ADCON1bits
               00146         extern _ADCON0bits
               00147         extern _SSP1CON2bits
               00148         extern _SSPCON2bits
               00149         extern _SSP1CON1bits
               00150         extern _SSPCON1bits
               00151         extern _SSP1STATbits
               00152         extern _SSPSTATbits
               00153         extern _T2CONbits
               00154         extern _T1CONbits
               00155         extern _RCONbits
               00156         extern _WDTCONbits
               00157         extern _ECON1bits
               00158         extern _OSCCONbits
               00159         extern _T0CONbits
               00160         extern _STATUSbits
               00161         extern _INTCON3bits
               00162         extern _INTCON2bits
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00163         extern _INTCONbits
               00164         extern _STKPTRbits
               00165         extern _stdin
               00166         extern _stdout
               00167         extern _LCDText
               00168         extern _MAADR5
               00169         extern _MAADR6
               00170         extern _MAADR3
               00171         extern _MAADR4
               00172         extern _MAADR1
               00173         extern _MAADR2
               00174         extern _EBSTSD
               00175         extern _EBSTCON
               00176         extern _EBSTCS
               00177         extern _EBSTCSL
               00178         extern _EBSTCSH
               00179         extern _MISTAT
               00180         extern _EFLOCON
               00181         extern _EPAUS
               00182         extern _EPAUSL
               00183         extern _EPAUSH
               00184         extern _MACON1
               00185         extern _MACON2
               00186         extern _MACON3
               00187         extern _MACON4
               00188         extern _MABBIPG
               00189         extern _MAIPG
               00190         extern _MAIPGL
               00191         extern _MAIPGH
               00192         extern _MACLCON1
               00193         extern _MACLCON2
               00194         extern _MAMXFL
               00195         extern _MAMXFLL
               00196         extern _MAMXFLH
               00197         extern _MICON
               00198         extern _MICMD
               00199         extern _MIREGADR
               00200         extern _MIWR
               00201         extern _MIWRL
               00202         extern _MIWRH
               00203         extern _MIRD
               00204         extern _MIRDL
               00205         extern _MIRDH
               00206         extern _EHT0
               00207         extern _EHT1
               00208         extern _EHT2
               00209         extern _EHT3
               00210         extern _EHT4
               00211         extern _EHT5
               00212         extern _EHT6
               00213         extern _EHT7
               00214         extern _EPMM0
               00215         extern _EPMM1
               00216         extern _EPMM2
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00217         extern _EPMM3
               00218         extern _EPMM4
               00219         extern _EPMM5
               00220         extern _EPMM6
               00221         extern _EPMM7
               00222         extern _EPMCS
               00223         extern _EPMCSL
               00224         extern _EPMCSH
               00225         extern _EPMO
               00226         extern _EPMOL
               00227         extern _EPMOH
               00228         extern _EWOLIE
               00229         extern _EWOLIR
               00230         extern _ERXFCON
               00231         extern _EPKTCNT
               00232         extern _EWRPT
               00233         extern _EWRPTL
               00234         extern _EWRPTH
               00235         extern _ETXST
               00236         extern _ETXSTL
               00237         extern _ETXSTH
               00238         extern _ETXND
               00239         extern _ETXNDL
               00240         extern _ETXNDH
               00241         extern _ERXST
               00242         extern _ERXSTL
               00243         extern _ERXSTH
               00244         extern _ERXND
               00245         extern _ERXNDL
               00246         extern _ERXNDH
               00247         extern _ERXRDPT
               00248         extern _ERXRDPTL
               00249         extern _ERXRDPTH
               00250         extern _ERXWRPT
               00251         extern _ERXWRPTL
               00252         extern _ERXWRPTH
               00253         extern _EDMAST
               00254         extern _EDMASTL
               00255         extern _EDMASTH
               00256         extern _EDMAND
               00257         extern _EDMANDL
               00258         extern _EDMANDH
               00259         extern _EDMADST
               00260         extern _EDMADSTL
               00261         extern _EDMADSTH
               00262         extern _EDMACS
               00263         extern _EDMACSL
               00264         extern _EDMACSH
               00265         extern _EIE
               00266         extern _ESTAT
               00267         extern _ECON2
               00268         extern _EIR
               00269         extern _EDATA
               00270         extern _SSP2CON2
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00271         extern _SSP2CON1
               00272         extern _SSP2STAT
               00273         extern _SSP2ADD
               00274         extern _SSP2BUF
               00275         extern _ECCP2DEL
               00276         extern _ECCP2AS
               00277         extern _ECCP3DEL
               00278         extern _ECCP3AS
               00279         extern _RCSTA2
               00280         extern _TXSTA2
               00281         extern _TXREG2
               00282         extern _RCREG2
               00283         extern _SPBRG2
               00284         extern _CCP5CON
               00285         extern _CCPR5
               00286         extern _CCPR5L
               00287         extern _CCPR5H
               00288         extern _CCP4CON
               00289         extern _CCPR4
               00290         extern _CCPR4L
               00291         extern _CCPR4H
               00292         extern _T4CON
               00293         extern _PR4
               00294         extern _TMR4
               00295         extern _ECCP1DEL
               00296         extern _ERDPT
               00297         extern _ERDPTL
               00298         extern _ERDPTH
               00299         extern _BAUDCON2
               00300         extern _BAUDCTL2
               00301         extern _SPBRGH2
               00302         extern _BAUDCON
               00303         extern _BAUDCON1
               00304         extern _BAUDCTL
               00305         extern _BAUDCTL1
               00306         extern _SPBRGH
               00307         extern _SPBRGH1
               00308         extern _PORTA
               00309         extern _PORTB
               00310         extern _PORTC
               00311         extern _PORTD
               00312         extern _PORTE
               00313         extern _PORTF
               00314         extern _PORTG
               00315         extern _PORTH
               00316         extern _PORTJ
               00317         extern _LATA
               00318         extern _LATB
               00319         extern _LATC
               00320         extern _LATD
               00321         extern _LATE
               00322         extern _LATF
               00323         extern _LATG
               00324         extern _LATH
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00325         extern _LATJ
               00326         extern _DDRA
               00327         extern _TRISA
               00328         extern _DDRB
               00329         extern _TRISB
               00330         extern _DDRC
               00331         extern _TRISC
               00332         extern _DDRD
               00333         extern _TRISD
               00334         extern _DDRE
               00335         extern _TRISE
               00336         extern _DDRF
               00337         extern _TRISF
               00338         extern _DDRG
               00339         extern _TRISG
               00340         extern _DDRH
               00341         extern _TRISH
               00342         extern _DDRJ
               00343         extern _TRISJ
               00344         extern _OSCTUNE
               00345         extern _MEMCON
               00346         extern _PIE1
               00347         extern _PIR1
               00348         extern _IPR1
               00349         extern _PIE2
               00350         extern _PIR2
               00351         extern _IPR2
               00352         extern _PIE3
               00353         extern _PIR3
               00354         extern _IPR3
               00355         extern _EECON1
               00356         extern _EECON2
               00357         extern _RCSTA
               00358         extern _RCSTA1
               00359         extern _TXSTA
               00360         extern _TXSTA1
               00361         extern _TXREG
               00362         extern _TXREG1
               00363         extern _RCREG
               00364         extern _RCREG1
               00365         extern _SPBRG
               00366         extern _SPBRG1
               00367         extern _PSPCON
               00368         extern _T3CON
               00369         extern _TMR3L
               00370         extern _TMR3H
               00371         extern _CMCON
               00372         extern _CVRCON
               00373         extern _ECCP1AS
               00374         extern _CCP3CON
               00375         extern _ECCP3CON
               00376         extern _CCPR3
               00377         extern _CCPR3L
               00378         extern _CCPR3H
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00379         extern _CCP2CON
               00380         extern _ECCP2CON
               00381         extern _CCPR2
               00382         extern _CCPR2L
               00383         extern _CCPR2H
               00384         extern _CCP1CON
               00385         extern _ECCP1CON
               00386         extern _CCPR1
               00387         extern _CCPR1L
               00388         extern _CCPR1H
               00389         extern _ADCON2
               00390         extern _ADCON1
               00391         extern _ADCON0
               00392         extern _ADRES
               00393         extern _ADRESL
               00394         extern _ADRESH
               00395         extern _SSP1CON2
               00396         extern _SSPCON2
               00397         extern _SSP1CON1
               00398         extern _SSPCON1
               00399         extern _SSP1STAT
               00400         extern _SSPSTAT
               00401         extern _SSP1ADD
               00402         extern _SSPADD
               00403         extern _SSP1BUF
               00404         extern _SSPBUF
               00405         extern _T2CON
               00406         extern _PR2
               00407         extern _TMR2
               00408         extern _T1CON
               00409         extern _TMR1L
               00410         extern _TMR1H
               00411         extern _RCON
               00412         extern _WDTCON
               00413         extern _ECON1
               00414         extern _OSCCON
               00415         extern _T0CON
               00416         extern _TMR0L
               00417         extern _TMR0H
               00418         extern _STATUS
               00419         extern _FSR2L
               00420         extern _FSR2H
               00421         extern _PLUSW2
               00422         extern _PREINC2
               00423         extern _POSTDEC2
               00424         extern _POSTINC2
               00425         extern _INDF2
               00426         extern _BSR
               00427         extern _FSR1L
               00428         extern _FSR1H
               00429         extern _PLUSW1
               00430         extern _PREINC1
               00431         extern _POSTDEC1
               00432         extern _POSTINC1
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00433         extern _INDF1
               00434         extern _WREG
               00435         extern _FSR0L
               00436         extern _FSR0H
               00437         extern _PLUSW0
               00438         extern _PREINC0
               00439         extern _POSTDEC0
               00440         extern _POSTINC0
               00441         extern _INDF0
               00442         extern _INTCON3
               00443         extern _INTCON2
               00444         extern _INTCON
               00445         extern _PROD
               00446         extern _PRODL
               00447         extern _PRODH
               00448         extern _TABLAT
               00449         extern _TBLPTR
               00450         extern _TBLPTRL
               00451         extern _TBLPTRH
               00452         extern _TBLPTRU
               00453         extern _PC
               00454         extern _PCL
               00455         extern _PCLATH
               00456         extern _PCLATU
               00457         extern _STKPTR
               00458         extern _TOS
               00459         extern _TOSL
               00460         extern _TOSH
               00461         extern _TOSU
               00462         extern _sprintf
               00463         extern _ultoa
               00464         extern _strlen
               00465         extern _LCDInit
               00466         extern _LCDUpdate
               00467 ;--------------------------------------------------------
               00468 ;       Equates to used internal registers
               00469 ;--------------------------------------------------------
  00000FD8     00470 STATUS  equ     0xfd8
  00000FFA     00471 PCLATH  equ     0xffa
  00000FFB     00472 PCLATU  equ     0xffb
  00000FE8     00473 WREG    equ     0xfe8
  00000FE0     00474 BSR     equ     0xfe0
  00000FE9     00475 FSR0L   equ     0xfe9
  00000FEA     00476 FSR0H   equ     0xfea
  00000FE1     00477 FSR1L   equ     0xfe1
  00000FD9     00478 FSR2L   equ     0xfd9
  00000FEF     00479 INDF0   equ     0xfef
  00000FE5     00480 POSTDEC1        equ     0xfe5
  00000FE4     00481 PREINC1 equ     0xfe4
  00000FDB     00482 PLUSW2  equ     0xfdb
  00000FF3     00483 PRODL   equ     0xff3
  00000FF4     00484 PRODH   equ     0xff4
               00485 
               00486 
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00487         idata
               00488 _ring_today     db      0x00, 0x00
               00489 _alarm_set      db      0x00, 0x00
               00490 _alarm_ring     db      0x00, 0x00
               00491 _state  db      0x00, 0x00
               00492 _hour   db      0x00, 0x00
               00493 _minute db      0x00, 0x00
               00494 _second db      0x00, 0x00
               00495 _alarm_hour     db      0x00, 0x00
               00496 _alarm_minute   db      0x00, 0x00
               00497 _blink  db      0x01, 0x00
               00498 
               00499 
               00500 ; Internal registers
               00501 .registers      udata_ovr       0x0000
               00502 r0x00   res     1
               00503 r0x01   res     1
               00504 r0x02   res     1
               00505 r0x03   res     1
               00506 r0x04   res     1
               00507 r0x05   res     1
               00508 r0x06   res     1
               00509 r0x07   res     1
               00510 r0x08   res     1
               00511 r0x09   res     1
               00512 r0x0a   res     1
               00513 r0x0b   res     1
               00514 r0x0c   res     1
               00515 r0x0d   res     1
               00516 r0x0e   res     1
               00517 r0x0f   res     1
               00518 r0x10   res     1
               00519 r0x11   res     1
               00520 r0x12   res     1
               00521 r0x13   res     1
               00522 r0x14   res     1
               00523 r0x15   res     1
               00524 
               00525 udata_test_0    udata
               00526 _update_lcd_lcd_1_1     res     32
               00527 
               00528 udata_test_1    udata
               00529 _update_lcd_h_1_1       res     3
               00530 
               00531 udata_test_2    udata
               00532 _update_lcd_m_1_1       res     3
               00533 
               00534 udata_test_3    udata
               00535 _update_lcd_s_1_1       res     3
               00536 
               00537 udata_test_4    udata
               00538 _update_lcd_a_h_1_1     res     3
               00539 
               00540 udata_test_5    udata
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00541 _update_lcd_a_m_1_1     res     3
               00542 
               00543 udata_test_6    udata
               00544 _DisplayWORD_WDigit_1_1 res     6
               00545 
               00546 ;--------------------------------------------------------
               00547 ; interrupt vector 
               00548 ;--------------------------------------------------------
               00549 
               00550 ;--------------------------------------------------------
               00551 ; global & static initialisations
               00552 ;--------------------------------------------------------
               00553 ; ; Starting pCode block for absolute section
               00554 ; ;-----------------------------------------
               00555 S_test_ivec_0x1_high_isrr       code    0X000008
0008 00556 ivec_0x1_high_isrr:
0008 EF00 F000 00557         GOTO    _high_isrr
               00558 
               00559 ; I code from now on!
               00560 ; ; Starting pCode block
               00561 S_test__main    code
0000 00562 _main:
               00563 ;       .line   233; test.c     timer0_conf();  
0000 EC00 F000 00564         CALL    _timer0_conf
               00565 ;       .line   235; test.c     LED0_TRIS = 0; //configure 1st led pin as output (yellow)
0004 9000      00566         BCF     _TRISJbits, 0
               00567 ;       .line   236; test.c     LED1_TRIS = 0; //configure 2nd led pin as output (red)
0006 9200      00568         BCF     _TRISJbits, 1
               00569 ;       .line   237; test.c     LED2_TRIS = 0; //configure 3rd led pin as output (red)
0008 9400      00570         BCF     _TRISJbits, 2
               00571 ;       .line   239; test.c     RCONbits.IPEN      = 1;   //enable interrupts priority levels
000A 8E00      00572         BSF     _RCONbits, 7
               00573 ;       .line   240; test.c     INTCON2bits.INTEDG1= 0;   //INT1 interrupts on falling edge
000C 9A00      00574         BCF     _INTCON2bits, 5
               00575 ;       .line   241; test.c     INTCONbits.GIE     = 1;   //enable high priority interrupts
000E 8E00      00576         BSF     _INTCONbits, 7
               00577 ;       .line   243; test.c     INTCON3bits.INT1E  = 1;   //enable INT1 interrupt (button 2)
0010 8600      00578         BSF     _INTCON3bits, 3
               00579 ;       .line   244; test.c     INTCON3bits.INT1F  = 0;   //clear INT1 flag
0012 9000      00580         BCF     _INTCON3bits, 0
               00581 ;       .line   246; test.c     INTCON3bits.INT3E  = 1;   //enable INT1 interrupt (button 2)
0014 8A00      00582         BSF     _INTCON3bits, 5
               00583 ;       .line   247; test.c     INTCON3bits.INT3F  = 0;   //clear INT1 flag
0016 9400      00584         BCF     _INTCON3bits, 2
               00585 ;       .line   249; test.c     LCDInit();
0018 EC00 F000 00586         CALL    _LCDInit
               00587 ;       .line   251; test.c     state = CONFIG_CLOCK_HOUR;   
001C 0E04      00588         MOVLW   0x04
001E 0000      00589         BANKSEL _state
0020 6F00      00590         MOVWF   _state, B
0022 0000      00591         BANKSEL (_state + 1)
0024 6B00      00592         CLRF    (_state + 1), B
               00593 ;       .line   252; test.c     blink^=1;
0026 0E01      00594         MOVLW   0x01
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0028 0000      00595         BANKSEL _blink
002A 1B00      00596         XORWF   _blink, F, B
               00597 ;       .line   253; test.c     update_lcd();      
002C EC00 F000 00598         CALL    _update_lcd
               00599 ;       .line   254; test.c     T0CONbits.TMR0ON = 1;
0030 8E00      00600         BSF     _T0CONbits, 7
0032 0012      00601         RETURN  
               00602 
               00603 ; ; Starting pCode block
               00604 S_test__strlcpy code
0000 00605 _strlcpy:
               00606 ;       .line   481; test.c     strlcpy(char *dst, const char *src, size_t siz)
0000 CFD9 FFE5 00607         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 00608         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 00609         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 00610         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 00611         MOVFF   r0x02, POSTDEC1
0014 C000 FFE5 00612         MOVFF   r0x03, POSTDEC1
0018 C000 FFE5 00613         MOVFF   r0x04, POSTDEC1
001C C000 FFE5 00614         MOVFF   r0x05, POSTDEC1
0020 C000 FFE5 00615         MOVFF   r0x06, POSTDEC1
0024 C000 FFE5 00616         MOVFF   r0x07, POSTDEC1
0028 C000 FFE5 00617         MOVFF   r0x08, POSTDEC1
002C C000 FFE5 00618         MOVFF   r0x09, POSTDEC1
0030 C000 FFE5 00619         MOVFF   r0x0a, POSTDEC1
0034 C000 FFE5 00620         MOVFF   r0x0b, POSTDEC1
0038 C000 FFE5 00621         MOVFF   r0x0c, POSTDEC1
003C C000 FFE5 00622         MOVFF   r0x0d, POSTDEC1
0040 C000 FFE5 00623         MOVFF   r0x0e, POSTDEC1
0044 C000 FFE5 00624         MOVFF   r0x0f, POSTDEC1
0048 C000 FFE5 00625         MOVFF   r0x10, POSTDEC1
004C C000 FFE5 00626         MOVFF   r0x11, POSTDEC1
0050 C000 FFE5 00627         MOVFF   r0x12, POSTDEC1
0054 C000 FFE5 00628         MOVFF   r0x13, POSTDEC1
0058 C000 FFE5 00629         MOVFF   r0x14, POSTDEC1
005C C000 FFE5 00630         MOVFF   r0x15, POSTDEC1
0060 0E02      00631         MOVLW   0x02
0062 CFDB F000 00632         MOVFF   PLUSW2, r0x00
0066 0E03      00633         MOVLW   0x03
0068 CFDB F000 00634         MOVFF   PLUSW2, r0x01
006C 0E04      00635         MOVLW   0x04
006E CFDB F000 00636         MOVFF   PLUSW2, r0x02
0072 0E05      00637         MOVLW   0x05
0074 CFDB F000 00638         MOVFF   PLUSW2, r0x03
0078 0E06      00639         MOVLW   0x06
007A CFDB F000 00640         MOVFF   PLUSW2, r0x04
007E 0E07      00641         MOVLW   0x07
0080 CFDB F000 00642         MOVFF   PLUSW2, r0x05
0084 0E08      00643         MOVLW   0x08
0086 CFDB F000 00644         MOVFF   PLUSW2, r0x06
008A 0E09      00645         MOVLW   0x09
008C CFDB F000 00646         MOVFF   PLUSW2, r0x07
               00647 ;       .line   483; test.c     char       *d = dst;
0090 C000 F000 00648         MOVFF   r0x00, r0x08
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0094 C000 F000 00649         MOVFF   r0x01, r0x09
0098 C000 F000 00650         MOVFF   r0x02, r0x0a
               00651 ;       .line   484; test.c     const char *s = src;
009C C000 F000 00652         MOVFF   r0x03, r0x0b
00A0 C000 F000 00653         MOVFF   r0x04, r0x0c
00A4 C000 F000 00654         MOVFF   r0x05, r0x0d
               00655 ;       .line   485; test.c     size_t      n = siz;
00A8 C000 F000 00656         MOVFF   r0x06, r0x0e
00AC C000 F000 00657         MOVFF   r0x07, r0x0f
               00658 ;       .line   488; test.c     if (n != 0)
00B0 5000      00659         MOVF    r0x06, W
00B2 1000      00660         IORWF   r0x07, W
00B4 B4D8      00661         BTFSC   STATUS, 2
00B6 D000      00662         BRA     _00469_DS_
               00663 ;       .line   490; test.c     while (--n != 0)
00B8 C000 F000 00664         MOVFF   r0x03, r0x10
00BC C000 F000 00665         MOVFF   r0x04, r0x11
00C0 C000 F000 00666         MOVFF   r0x05, r0x12
00C4 C000 F000 00667         MOVFF   r0x06, r0x13
00C8 C000 F000 00668         MOVFF   r0x07, r0x14
00CC 00669 _00465_DS_:
00CC 0EFF      00670         MOVLW   0xff
00CE 2600      00671         ADDWF   r0x13, F
00D0 A0D8      00672         BTFSS   STATUS, 0
00D2 0600      00673         DECF    r0x14, F
00D4 5000      00674         MOVF    r0x13, W
00D6 1000      00675         IORWF   r0x14, W
00D8 E000      00676         BZ      _00484_DS_
               00677 ;       .line   492; test.c     if ((*d++ = *s++) == '\0')
00DA C000 FFE9 00678         MOVFF   r0x10, FSR0L
00DE C000 FFF3 00679         MOVFF   r0x11, PRODL
00E2 5000      00680         MOVF    r0x12, W
00E4 EC00 F000 00681         CALL    __gptrget1
00E8 6E00      00682         MOVWF   r0x15
00EA 2A00      00683         INCF    r0x10, F
00EC B0D8      00684         BTFSC   STATUS, 0
00EE 2A00      00685         INCF    r0x11, F
00F0 B0D8      00686         BTFSC   STATUS, 0
00F2 2A00      00687         INCF    r0x12, F
00F4 C000 FFE5 00688         MOVFF   r0x15, POSTDEC1
00F8 C000 FFE9 00689         MOVFF   r0x00, FSR0L
00FC C000 FFF3 00690         MOVFF   r0x01, PRODL
0100 5000      00691         MOVF    r0x02, W
0102 EC00 F000 00692         CALL    __gptrput1
0106 2A00      00693         INCF    r0x00, F
0108 B0D8      00694         BTFSC   STATUS, 0
010A 2A00      00695         INCF    r0x01, F
010C B0D8      00696         BTFSC   STATUS, 0
010E 2A00      00697         INCF    r0x02, F
0110 5000      00698         MOVF    r0x15, W
0112 E100      00699         BNZ     _00465_DS_
0114 00700 _00484_DS_:
               00701 ;       .line   493; test.c     break;
0114 C000 F000 00702         MOVFF   r0x10, r0x0b
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0118 C000 F000 00703         MOVFF   r0x11, r0x0c
011C C000 F000 00704         MOVFF   r0x12, r0x0d
0120 C000 F000 00705         MOVFF   r0x00, r0x08
0124 C000 F000 00706         MOVFF   r0x01, r0x09
0128 C000 F000 00707         MOVFF   r0x02, r0x0a
012C C000 F000 00708         MOVFF   r0x13, r0x0e
0130 C000 F000 00709         MOVFF   r0x14, r0x0f
0134 00710 _00469_DS_:
               00711 ;       .line   498; test.c     if (n == 0)
0134 5000      00712         MOVF    r0x0e, W
0136 1000      00713         IORWF   r0x0f, W
0138 E100      00714         BNZ     _00476_DS_
               00715 ;       .line   500; test.c     if (siz != 0)
013A 5000      00716         MOVF    r0x06, W
013C 1000      00717         IORWF   r0x07, W
013E E000      00718         BZ      _00483_DS_
               00719 ;       .line   501; test.c     *d = '\0';          /* NUL-terminate dst */
0140 0E00      00720         MOVLW   0x00
0142 6EE5      00721         MOVWF   POSTDEC1
0144 C000 FFE9 00722         MOVFF   r0x08, FSR0L
0148 C000 FFF3 00723         MOVFF   r0x09, PRODL
014C 5000      00724         MOVF    r0x0a, W
014E EC00 F000 00725         CALL    __gptrput1
0152 00726 _00483_DS_:
               00727 ;       .line   502; test.c     while (*s++)
0152 C000 F000 00728         MOVFF   r0x0b, r0x00
0156 C000 F000 00729         MOVFF   r0x0c, r0x01
015A C000 F000 00730         MOVFF   r0x0d, r0x02
015E 00731 _00472_DS_:
015E C000 FFE9 00732         MOVFF   r0x00, FSR0L
0162 C000 FFF3 00733         MOVFF   r0x01, PRODL
0166 5000      00734         MOVF    r0x02, W
0168 EC00 F000 00735         CALL    __gptrget1
016C 6E00      00736         MOVWF   r0x06
016E 2A00      00737         INCF    r0x00, F
0170 B0D8      00738         BTFSC   STATUS, 0
0172 2A00      00739         INCF    r0x01, F
0174 B0D8      00740         BTFSC   STATUS, 0
0176 2A00      00741         INCF    r0x02, F
0178 5000      00742         MOVF    r0x06, W
017A E100      00743         BNZ     _00472_DS_
017C C000 F000 00744         MOVFF   r0x00, r0x0b
0180 C000 F000 00745         MOVFF   r0x01, r0x0c
0184 C000 F000 00746         MOVFF   r0x02, r0x0d
0188 00747 _00476_DS_:
               00748 ;       .line   508; test.c     return (s - src - 1);       /* count does not include NUL */
0188 5000      00749         MOVF    r0x03, W
018A 5C00      00750         SUBWF   r0x0b, W
018C 6E00      00751         MOVWF   r0x03
018E 5000      00752         MOVF    r0x04, W
0190 5800      00753         SUBWFB  r0x0c, W
0192 6E00      00754         MOVWF   r0x04
0194 0EFF      00755         MOVLW   0xff
0196 2600      00756         ADDWF   r0x03, F
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0198 A0D8      00757         BTFSS   STATUS, 0
019A 0600      00758         DECF    r0x04, F
019C C000 FFF3 00759         MOVFF   r0x04, PRODL
01A0 5000      00760         MOVF    r0x03, W
01A2 CFE4 F000 00761         MOVFF   PREINC1, r0x15
01A6 CFE4 F000 00762         MOVFF   PREINC1, r0x14
01AA CFE4 F000 00763         MOVFF   PREINC1, r0x13
01AE CFE4 F000 00764         MOVFF   PREINC1, r0x12
01B2 CFE4 F000 00765         MOVFF   PREINC1, r0x11
01B6 CFE4 F000 00766         MOVFF   PREINC1, r0x10
01BA CFE4 F000 00767         MOVFF   PREINC1, r0x0f
01BE CFE4 F000 00768         MOVFF   PREINC1, r0x0e
01C2 CFE4 F000 00769         MOVFF   PREINC1, r0x0d
01C6 CFE4 F000 00770         MOVFF   PREINC1, r0x0c
01CA CFE4 F000 00771         MOVFF   PREINC1, r0x0b
01CE CFE4 F000 00772         MOVFF   PREINC1, r0x0a
01D2 CFE4 F000 00773         MOVFF   PREINC1, r0x09
01D6 CFE4 F000 00774         MOVFF   PREINC1, r0x08
01DA CFE4 F000 00775         MOVFF   PREINC1, r0x07
01DE CFE4 F000 00776         MOVFF   PREINC1, r0x06
01E2 CFE4 F000 00777         MOVFF   PREINC1, r0x05
01E6 CFE4 F000 00778         MOVFF   PREINC1, r0x04
01EA CFE4 F000 00779         MOVFF   PREINC1, r0x03
01EE CFE4 F000 00780         MOVFF   PREINC1, r0x02
01F2 CFE4 F000 00781         MOVFF   PREINC1, r0x01
01F6 CFE4 F000 00782         MOVFF   PREINC1, r0x00
01FA CFE4 FFD9 00783         MOVFF   PREINC1, FSR2L
01FE 0012      00784         RETURN  
               00785 
               00786 ; ; Starting pCode block
               00787 S_test__DisplayString   code
0000 00788 _DisplayString:
               00789 ;       .line   435; test.c     void DisplayString(BYTE pos, char* text)
0000 CFD9 FFE5 00790         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 00791         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 00792         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 00793         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 00794         MOVFF   r0x02, POSTDEC1
0014 C000 FFE5 00795         MOVFF   r0x03, POSTDEC1
0018 C000 FFE5 00796         MOVFF   r0x04, POSTDEC1
001C C000 FFE5 00797         MOVFF   r0x05, POSTDEC1
0020 C000 FFE5 00798         MOVFF   r0x06, POSTDEC1
0024 C000 FFE5 00799         MOVFF   r0x07, POSTDEC1
0028 0E02      00800         MOVLW   0x02
002A CFDB F000 00801         MOVFF   PLUSW2, r0x00
002E 0E03      00802         MOVLW   0x03
0030 CFDB F000 00803         MOVFF   PLUSW2, r0x01
0034 0E04      00804         MOVLW   0x04
0036 CFDB F000 00805         MOVFF   PLUSW2, r0x02
003A 0E05      00806         MOVLW   0x05
003C CFDB F000 00807         MOVFF   PLUSW2, r0x03
               00808 ;       .line   437; test.c     BYTE l= strlen(text)+1;
0040 5000      00809         MOVF    r0x03, W
0042 6EE5      00810         MOVWF   POSTDEC1
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0044 5000      00811         MOVF    r0x02, W
0046 6EE5      00812         MOVWF   POSTDEC1
0048 5000      00813         MOVF    r0x01, W
004A 6EE5      00814         MOVWF   POSTDEC1
004C EC00 F000 00815         CALL    _strlen
0050 6E00      00816         MOVWF   r0x04
0052 CFF3 F000 00817         MOVFF   PRODL, r0x05
0056 0E03      00818         MOVLW   0x03
0058 26E1      00819         ADDWF   FSR1L, F
005A 2A00      00820         INCF    r0x04, F
               00821 ;       .line   438; test.c     BYTE max= 32-pos;
005C 5000      00822         MOVF    r0x00, W
005E 0820      00823         SUBLW   0x20
0060 6E00      00824         MOVWF   r0x05
               00825 ;       .line   439; test.c     strlcpy((char*)&LCDText[pos], text,(l<max)?l:max );
0062 6A00      00826         CLRF    r0x06
0064 0E00      00827         MOVLW   LOW(_LCDText)
0066 2600      00828         ADDWF   r0x00, F
0068 0E00      00829         MOVLW   HIGH(_LCDText)
006A 2200      00830         ADDWFC  r0x06, F
006C 5000      00831         MOVF    r0x06, W
006E 6E00      00832         MOVWF   r0x06
0070 5000      00833         MOVF    r0x00, W
0072 6E00      00834         MOVWF   r0x00
0074 0E80      00835         MOVLW   0x80
0076 6E00      00836         MOVWF   r0x07
0078 5000      00837         MOVF    r0x05, W
007A 5C00      00838         SUBWF   r0x04, W
007C E300      00839         BNC     _00456_DS_
007E C000 F000 00840         MOVFF   r0x05, r0x04
0082 00841 _00456_DS_:
0082 6A00      00842         CLRF    r0x05
0084 5000      00843         MOVF    r0x05, W
0086 6EE5      00844         MOVWF   POSTDEC1
0088 5000      00845         MOVF    r0x04, W
008A 6EE5      00846         MOVWF   POSTDEC1
008C 5000      00847         MOVF    r0x03, W
008E 6EE5      00848         MOVWF   POSTDEC1
0090 5000      00849         MOVF    r0x02, W
0092 6EE5      00850         MOVWF   POSTDEC1
0094 5000      00851         MOVF    r0x01, W
0096 6EE5      00852         MOVWF   POSTDEC1
0098 5000      00853         MOVF    r0x07, W
009A 6EE5      00854         MOVWF   POSTDEC1
009C 5000      00855         MOVF    r0x06, W
009E 6EE5      00856         MOVWF   POSTDEC1
00A0 5000      00857         MOVF    r0x00, W
00A2 6EE5      00858         MOVWF   POSTDEC1
00A4 EC00 F000 00859         CALL    _strlcpy
00A8 0E08      00860         MOVLW   0x08
00AA 26E1      00861         ADDWF   FSR1L, F
               00862 ;       .line   440; test.c     LCDUpdate();
00AC EC00 F000 00863         CALL    _LCDUpdate
00B0 CFE4 F000 00864         MOVFF   PREINC1, r0x07
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00B4 CFE4 F000 00865         MOVFF   PREINC1, r0x06
00B8 CFE4 F000 00866         MOVFF   PREINC1, r0x05
00BC CFE4 F000 00867         MOVFF   PREINC1, r0x04
00C0 CFE4 F000 00868         MOVFF   PREINC1, r0x03
00C4 CFE4 F000 00869         MOVFF   PREINC1, r0x02
00C8 CFE4 F000 00870         MOVFF   PREINC1, r0x01
00CC CFE4 F000 00871         MOVFF   PREINC1, r0x00
00D0 CFE4 FFD9 00872         MOVFF   PREINC1, FSR2L
00D4 0012      00873         RETURN  
               00874 
               00875 ; ; Starting pCode block
               00876 S_test__DisplayWORD     code
0000 00877 _DisplayWORD:
               00878 ;       .line   413; test.c     void DisplayWORD(BYTE pos, WORD w) //WORD is a 16 bits unsigned
0000 CFD9 FFE5 00879         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 00880         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 00881         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 00882         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 00883         MOVFF   r0x02, POSTDEC1
0014 C000 FFE5 00884         MOVFF   r0x03, POSTDEC1
0018 C000 FFE5 00885         MOVFF   r0x04, POSTDEC1
001C C000 FFE5 00886         MOVFF   r0x05, POSTDEC1
0020 0E02      00887         MOVLW   0x02
0022 CFDB F000 00888         MOVFF   PLUSW2, r0x00
0026 0E03      00889         MOVLW   0x03
0028 CFDB F000 00890         MOVFF   PLUSW2, r0x01
002C 0E04      00891         MOVLW   0x04
002E CFDB F000 00892         MOVFF   PLUSW2, r0x02
               00893 ;       .line   421; test.c     ultoa(w, WDigit, radix);      
0032 6A00      00894         CLRF    r0x03
0034 6A00      00895         CLRF    r0x04
0036 0E0A      00896         MOVLW   0x0a
0038 6EE5      00897         MOVWF   POSTDEC1
003A 0E00      00898         MOVLW   HIGH(_DisplayWORD_WDigit_1_1)
003C 6EE5      00899         MOVWF   POSTDEC1
003E 0E00      00900         MOVLW   LOW(_DisplayWORD_WDigit_1_1)
0040 6EE5      00901         MOVWF   POSTDEC1
0042 5000      00902         MOVF    r0x04, W
0044 6EE5      00903         MOVWF   POSTDEC1
0046 5000      00904         MOVF    r0x03, W
0048 6EE5      00905         MOVWF   POSTDEC1
004A 5000      00906         MOVF    r0x02, W
004C 6EE5      00907         MOVWF   POSTDEC1
004E 5000      00908         MOVF    r0x01, W
0050 6EE5      00909         MOVWF   POSTDEC1
0052 EC00 F000 00910         CALL    _ultoa
0056 0E07      00911         MOVLW   0x07
0058 26E1      00912         ADDWF   FSR1L, F
               00913 ;       .line   422; test.c     for(j = 0; j < strlen((char*)WDigit); j++)
005A 6A00      00914         CLRF    r0x01
005C 00915 _00437_DS_:
005C 0E00      00916         MOVLW   HIGH(_DisplayWORD_WDigit_1_1)
005E 6E00      00917         MOVWF   r0x03
0060 0E00      00918         MOVLW   LOW(_DisplayWORD_WDigit_1_1)
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0062 6E00      00919         MOVWF   r0x02
0064 0E80      00920         MOVLW   0x80
0066 6E00      00921         MOVWF   r0x04
0068 5000      00922         MOVF    r0x04, W
006A 6EE5      00923         MOVWF   POSTDEC1
006C 5000      00924         MOVF    r0x03, W
006E 6EE5      00925         MOVWF   POSTDEC1
0070 5000      00926         MOVF    r0x02, W
0072 6EE5      00927         MOVWF   POSTDEC1
0074 EC00 F000 00928         CALL    _strlen
0078 6E00      00929         MOVWF   r0x02
007A CFF3 F000 00930         MOVFF   PRODL, r0x03
007E 0E03      00931         MOVLW   0x03
0080 26E1      00932         ADDWF   FSR1L, F
0082 C000 F000 00933         MOVFF   r0x01, r0x04
0086 6A00      00934         CLRF    r0x05
0088 5000      00935         MOVF    r0x05, W
008A 0F80      00936         ADDLW   0x80
008C 6EF3      00937         MOVWF   PRODL
008E 5000      00938         MOVF    r0x03, W
0090 0F80      00939         ADDLW   0x80
0092 5CF3      00940         SUBWF   PRODL, W
0094 E100      00941         BNZ     _00447_DS_
0096 5000      00942         MOVF    r0x02, W
0098 5C00      00943         SUBWF   r0x04, W
009A 00944 _00447_DS_:
009A E200      00945         BC      _00440_DS_
               00946 ;       .line   424; test.c     LCDText[LCDPos++] = WDigit[j];
009C C000 F000 00947         MOVFF   r0x00, r0x02
00A0 2A00      00948         INCF    r0x00, F
00A2 6A00      00949         CLRF    r0x03
00A4 0E00      00950         MOVLW   LOW(_LCDText)
00A6 2600      00951         ADDWF   r0x02, F
00A8 0E00      00952         MOVLW   HIGH(_LCDText)
00AA 2200      00953         ADDWFC  r0x03, F
00AC 0E00      00954         MOVLW   LOW(_DisplayWORD_WDigit_1_1)
00AE 2400      00955         ADDWF   r0x01, W
00B0 6E00      00956         MOVWF   r0x04
00B2 6A00      00957         CLRF    r0x05
00B4 0E00      00958         MOVLW   HIGH(_DisplayWORD_WDigit_1_1)
00B6 2200      00959         ADDWFC  r0x05, F
00B8 C000 FFE9 00960         MOVFF   r0x04, FSR0L
00BC C000 FFEA 00961         MOVFF   r0x05, FSR0H
00C0 CFEF F000 00962         MOVFF   INDF0, r0x04
00C4 C000 FFE9 00963         MOVFF   r0x02, FSR0L
00C8 C000 FFEA 00964         MOVFF   r0x03, FSR0H
00CC C000 FFEF 00965         MOVFF   r0x04, INDF0
               00966 ;       .line   422; test.c     for(j = 0; j < strlen((char*)WDigit); j++)
00D0 2A00      00967         INCF    r0x01, F
00D2 D000      00968         BRA     _00437_DS_
00D4 00969 _00440_DS_:
               00970 ;       .line   426; test.c     if(LCDPos < 32u)
00D4 C000 F000 00971         MOVFF   r0x00, r0x01
00D8 6A00      00972         CLRF    r0x02
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00DA 0E00      00973         MOVLW   0x00
00DC 5C00      00974         SUBWF   r0x02, W
00DE E100      00975         BNZ     _00448_DS_
00E0 0E20      00976         MOVLW   0x20
00E2 5C00      00977         SUBWF   r0x01, W
00E4 00978 _00448_DS_:
00E4 E200      00979         BC      _00436_DS_
               00980 ;       .line   427; test.c     LCDText[LCDPos] = 0;
00E6 6A00      00981         CLRF    r0x01
00E8 0E00      00982         MOVLW   LOW(_LCDText)
00EA 2600      00983         ADDWF   r0x00, F
00EC 0E00      00984         MOVLW   HIGH(_LCDText)
00EE 2200      00985         ADDWFC  r0x01, F
00F0 C000 FFE9 00986         MOVFF   r0x00, FSR0L
00F4 C000 FFEA 00987         MOVFF   r0x01, FSR0H
00F8 0E00      00988         MOVLW   0x00
00FA 6EEF      00989         MOVWF   INDF0
00FC 00990 _00436_DS_:
               00991 ;       .line   428; test.c     LCDUpdate();
00FC EC00 F000 00992         CALL    _LCDUpdate
0100 CFE4 F000 00993         MOVFF   PREINC1, r0x05
0104 CFE4 F000 00994         MOVFF   PREINC1, r0x04
0108 CFE4 F000 00995         MOVFF   PREINC1, r0x03
010C CFE4 F000 00996         MOVFF   PREINC1, r0x02
0110 CFE4 F000 00997         MOVFF   PREINC1, r0x01
0114 CFE4 F000 00998         MOVFF   PREINC1, r0x00
0118 CFE4 FFD9 00999         MOVFF   PREINC1, FSR2L
011C 0012      01000         RETURN  
               01001 
               01002 ; ; Starting pCode block
               01003 S_test__convert_value   code
0000 01004 _convert_value:
               01005 ;       .line   396; test.c     void convert_value(int value, char* r){
0000 CFD9 FFE5 01006         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 01007         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 01008         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 01009         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 01010         MOVFF   r0x02, POSTDEC1
0014 C000 FFE5 01011         MOVFF   r0x03, POSTDEC1
0018 C000 FFE5 01012         MOVFF   r0x04, POSTDEC1
001C 0E02      01013         MOVLW   0x02
001E CFDB F000 01014         MOVFF   PLUSW2, r0x00
0022 0E03      01015         MOVLW   0x03
0024 CFDB F000 01016         MOVFF   PLUSW2, r0x01
0028 0E04      01017         MOVLW   0x04
002A CFDB F000 01018         MOVFF   PLUSW2, r0x02
002E 0E05      01019         MOVLW   0x05
0030 CFDB F000 01020         MOVFF   PLUSW2, r0x03
0034 0E06      01021         MOVLW   0x06
0036 CFDB F000 01022         MOVFF   PLUSW2, r0x04
               01023 ;       .line   398; test.c     if(value<=9) sprintf(r, "0%d", value);
003A 5000      01024         MOVF    r0x01, W
003C 0F80      01025         ADDLW   0x80
003E 0F80      01026         ADDLW   0x80
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0040 E100      01027         BNZ     _00430_DS_
0042 0E0A      01028         MOVLW   0x0a
0044 5C00      01029         SUBWF   r0x00, W
0046 01030 _00430_DS_:
0046 E200      01031         BC      _00425_DS_
0048 5000      01032         MOVF    r0x01, W
004A 6EE5      01033         MOVWF   POSTDEC1
004C 5000      01034         MOVF    r0x00, W
004E 6EE5      01035         MOVWF   POSTDEC1
0050 0E00      01036         MOVLW   UPPER(__str_15)
0052 6EE5      01037         MOVWF   POSTDEC1
0054 0E00      01038         MOVLW   HIGH(__str_15)
0056 6EE5      01039         MOVWF   POSTDEC1
0058 0E00      01040         MOVLW   LOW(__str_15)
005A 6EE5      01041         MOVWF   POSTDEC1
005C 5000      01042         MOVF    r0x04, W
005E 6EE5      01043         MOVWF   POSTDEC1
0060 5000      01044         MOVF    r0x03, W
0062 6EE5      01045         MOVWF   POSTDEC1
0064 5000      01046         MOVF    r0x02, W
0066 6EE5      01047         MOVWF   POSTDEC1
0068 EC00 F000 01048         CALL    _sprintf
006C 0E08      01049         MOVLW   0x08
006E 26E1      01050         ADDWF   FSR1L, F
0070 D000      01051         BRA     _00427_DS_
0072 01052 _00425_DS_:
               01053 ;       .line   399; test.c     else sprintf(r, "%d", value);
0072 5000      01054         MOVF    r0x01, W
0074 6EE5      01055         MOVWF   POSTDEC1
0076 5000      01056         MOVF    r0x00, W
0078 6EE5      01057         MOVWF   POSTDEC1
007A 0E00      01058         MOVLW   UPPER(__str_16)
007C 6EE5      01059         MOVWF   POSTDEC1
007E 0E00      01060         MOVLW   HIGH(__str_16)
0080 6EE5      01061         MOVWF   POSTDEC1
0082 0E00      01062         MOVLW   LOW(__str_16)
0084 6EE5      01063         MOVWF   POSTDEC1
0086 5000      01064         MOVF    r0x04, W
0088 6EE5      01065         MOVWF   POSTDEC1
008A 5000      01066         MOVF    r0x03, W
008C 6EE5      01067         MOVWF   POSTDEC1
008E 5000      01068         MOVF    r0x02, W
0090 6EE5      01069         MOVWF   POSTDEC1
0092 EC00 F000 01070         CALL    _sprintf
0096 0E08      01071         MOVLW   0x08
0098 26E1      01072         ADDWF   FSR1L, F
009A 01073 _00427_DS_:
009A CFE4 F000 01074         MOVFF   PREINC1, r0x04
009E CFE4 F000 01075         MOVFF   PREINC1, r0x03
00A2 CFE4 F000 01076         MOVFF   PREINC1, r0x02
00A6 CFE4 F000 01077         MOVFF   PREINC1, r0x01
00AA CFE4 F000 01078         MOVFF   PREINC1, r0x00
00AE CFE4 FFD9 01079         MOVFF   PREINC1, FSR2L
00B2 0012      01080         RETURN  
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01081 
               01082 ; ; Starting pCode block
               01083 S_test__add_hour        code
0000 01084 _add_hour:
               01085 ;       .line   386; test.c     void add_hour(){
0000 CFD9 FFE5 01086         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 01087         MOVFF   FSR1L, FSR2L
0008 0000      01088         BANKSEL _hour
               01089 ;       .line   388; test.c     hour++;
000A 2B00      01090         INCF    _hour, F, B
000C E300      01091         BNC     _10463_DS_
000E 0000      01092         BANKSEL (_hour + 1)
0010 2B00      01093         INCF    (_hour + 1), F, B
0012 01094 _10463_DS_:
0012 0000      01095         BANKSEL (_hour + 1)
               01096 ;       .line   389; test.c     if(hour>=24){ 
0014 5100      01097         MOVF    (_hour + 1), W, B
0016 0F80      01098         ADDLW   0x80
0018 0F80      01099         ADDLW   0x80
001A E100      01100         BNZ     _00419_DS_
001C 0E18      01101         MOVLW   0x18
001E 0000      01102         BANKSEL _hour
0020 5D00      01103         SUBWF   _hour, W, B
0022 01104 _00419_DS_:
0022 E300      01105         BNC     _00416_DS_
0024 0000      01106         BANKSEL _hour
               01107 ;       .line   390; test.c     hour = 0;               
0026 6B00      01108         CLRF    _hour, B
0028 0000      01109         BANKSEL (_hour + 1)
002A 6B00      01110         CLRF    (_hour + 1), B
002C 0000      01111         BANKSEL _ring_today
               01112 ;       .line   391; test.c     ring_today = 0;
002E 6B00      01113         CLRF    _ring_today, B
0030 0000      01114         BANKSEL (_ring_today + 1)
0032 6B00      01115         CLRF    (_ring_today + 1), B
0034 01116 _00416_DS_:
0034 CFE4 FFD9 01117         MOVFF   PREINC1, FSR2L
0038 0012      01118         RETURN  
               01119 
               01120 ; ; Starting pCode block
               01121 S_test__add_minute      code
0000 01122 _add_minute:
               01123 ;       .line   376; test.c     void add_minute(){
0000 CFD9 FFE5 01124         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 01125         MOVFF   FSR1L, FSR2L
0008 0000      01126         BANKSEL _minute
               01127 ;       .line   378; test.c     minute++;
000A 2B00      01128         INCF    _minute, F, B
000C E300      01129         BNC     _20464_DS_
000E 0000      01130         BANKSEL (_minute + 1)
0010 2B00      01131         INCF    (_minute + 1), F, B
0012 01132 _20464_DS_:
0012 0000      01133         BANKSEL (_minute + 1)
               01134 ;       .line   379; test.c     if(minute>=60){
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0014 5100      01135         MOVF    (_minute + 1), W, B
0016 0F80      01136         ADDLW   0x80
0018 0F80      01137         ADDLW   0x80
001A E100      01138         BNZ     _00409_DS_
001C 0E3C      01139         MOVLW   0x3c
001E 0000      01140         BANKSEL _minute
0020 5D00      01141         SUBWF   _minute, W, B
0022 01142 _00409_DS_:
0022 E300      01143         BNC     _00406_DS_
0024 0000      01144         BANKSEL _minute
               01145 ;       .line   380; test.c     minute = 0;             
0026 6B00      01146         CLRF    _minute, B
0028 0000      01147         BANKSEL (_minute + 1)
002A 6B00      01148         CLRF    (_minute + 1), B
               01149 ;       .line   381; test.c     add_hour();
002C EC00 F000 01150         CALL    _add_hour
0030 01151 _00406_DS_:
0030 CFE4 FFD9 01152         MOVFF   PREINC1, FSR2L
0034 0012      01153         RETURN  
               01154 
               01155 ; ; Starting pCode block
               01156 S_test__add_second      code
0000 01157 _add_second:
               01158 ;       .line   366; test.c     void add_second(){
0000 CFD9 FFE5 01159         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 01160         MOVFF   FSR1L, FSR2L
0008 0000      01161         BANKSEL _second
               01162 ;       .line   368; test.c     second++;
000A 2B00      01163         INCF    _second, F, B
000C E300      01164         BNC     _30465_DS_
000E 0000      01165         BANKSEL (_second + 1)
0010 2B00      01166         INCF    (_second + 1), F, B
0012 01167 _30465_DS_:
0012 0000      01168         BANKSEL (_second + 1)
               01169 ;       .line   369; test.c     if(second>=60){
0014 5100      01170         MOVF    (_second + 1), W, B
0016 0F80      01171         ADDLW   0x80
0018 0F80      01172         ADDLW   0x80
001A E100      01173         BNZ     _00399_DS_
001C 0E3C      01174         MOVLW   0x3c
001E 0000      01175         BANKSEL _second
0020 5D00      01176         SUBWF   _second, W, B
0022 01177 _00399_DS_:
0022 E300      01178         BNC     _00396_DS_
0024 0000      01179         BANKSEL _second
               01180 ;       .line   370; test.c     second = 0;             
0026 6B00      01181         CLRF    _second, B
0028 0000      01182         BANKSEL (_second + 1)
002A 6B00      01183         CLRF    (_second + 1), B
               01184 ;       .line   371; test.c     add_minute();
002C EC00 F000 01185         CALL    _add_minute
0030 01186 _00396_DS_:
0030 CFE4 FFD9 01187         MOVFF   PREINC1, FSR2L
0034 0012      01188         RETURN  
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01189 
               01190 ; ; Starting pCode block
               01191 S_test__update_lcd      code
0000 01192 _update_lcd:
               01193 ;       .line   268; test.c     void update_lcd(){
0000 CFD9 FFE5 01194         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 01195         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 01196         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 01197         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 01198         MOVFF   r0x02, POSTDEC1
0014 C000 FFE5 01199         MOVFF   r0x03, POSTDEC1
0018 C000 FFE5 01200         MOVFF   r0x04, POSTDEC1
001C C000 FFE5 01201         MOVFF   r0x05, POSTDEC1
0020 C000 FFE5 01202         MOVFF   r0x06, POSTDEC1
0024 C000 FFE5 01203         MOVFF   r0x07, POSTDEC1
0028 C000 FFE5 01204         MOVFF   r0x08, POSTDEC1
002C C000 FFE5 01205         MOVFF   r0x09, POSTDEC1
0030 C000 FFE5 01206         MOVFF   r0x0a, POSTDEC1
0034 C000 FFE5 01207         MOVFF   r0x0b, POSTDEC1
0038 C000 FFE5 01208         MOVFF   r0x0c, POSTDEC1
003C C000 FFE5 01209         MOVFF   r0x0d, POSTDEC1
0040 C000 FFE5 01210         MOVFF   r0x0e, POSTDEC1
0044 C000 FFE5 01211         MOVFF   r0x0f, POSTDEC1
0048 C000 FFE5 01212         MOVFF   r0x10, POSTDEC1
004C C000 FFE5 01213         MOVFF   r0x11, POSTDEC1
0050 0000      01214         BANKSEL _state
               01215 ;       .line   279; test.c     if(state==0){           
0052 5100      01216         MOVF    _state, W, B
0054 0000      01217         BANKSEL (_state + 1)
0056 1100      01218         IORWF   (_state + 1), W, B
0058 E100      01219         BNZ     _00353_DS_
               01220 ;       .line   281; test.c     sprintf(lcd, " STARTING...    ");
005A 0E00      01221         MOVLW   HIGH(_update_lcd_lcd_1_1)
005C 6E00      01222         MOVWF   r0x01
005E 0E00      01223         MOVLW   LOW(_update_lcd_lcd_1_1)
0060 6E00      01224         MOVWF   r0x00
0062 0E80      01225         MOVLW   0x80
0064 6E00      01226         MOVWF   r0x02
0066 0E00      01227         MOVLW   UPPER(__str_0)
0068 6EE5      01228         MOVWF   POSTDEC1
006A 0E00      01229         MOVLW   HIGH(__str_0)
006C 6EE5      01230         MOVWF   POSTDEC1
006E 0E00      01231         MOVLW   LOW(__str_0)
0070 6EE5      01232         MOVWF   POSTDEC1
0072 5000      01233         MOVF    r0x02, W
0074 6EE5      01234         MOVWF   POSTDEC1
0076 5000      01235         MOVF    r0x01, W
0078 6EE5      01236         MOVWF   POSTDEC1
007A 5000      01237         MOVF    r0x00, W
007C 6EE5      01238         MOVWF   POSTDEC1
007E EC00 F000 01239         CALL    _sprintf
0082 0E06      01240         MOVLW   0x06
0084 26E1      01241         ADDWF   FSR1L, F
0086 EF00 F000 01242         GOTO    _00354_DS_
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
008A 01243 _00353_DS_:
008A 0000      01244         BANKSEL _state
               01245 ;       .line   284; test.c     }else if(state==SHOW_TIME){     
008C 5100      01246         MOVF    _state, W, B
008E 0A01      01247         XORLW   0x01
0090 E100      01248         BNZ     _00374_DS_
0092 0000      01249         BANKSEL (_state + 1)
0094 5100      01250         MOVF    (_state + 1), W, B
0096 E000      01251         BZ      _00375_DS_
0098 01252 _00374_DS_:
0098 D000      01253         BRA     _00350_DS_
009A 01254 _00375_DS_:
               01255 ;       .line   286; test.c     convert_value(hour, h);
009A 0E00      01256         MOVLW   HIGH(_update_lcd_h_1_1)
009C 6E00      01257         MOVWF   r0x01
009E 0E00      01258         MOVLW   LOW(_update_lcd_h_1_1)
00A0 6E00      01259         MOVWF   r0x00
00A2 0E80      01260         MOVLW   0x80
00A4 6E00      01261         MOVWF   r0x02
00A6 5000      01262         MOVF    r0x02, W
00A8 6EE5      01263         MOVWF   POSTDEC1
00AA 5000      01264         MOVF    r0x01, W
00AC 6EE5      01265         MOVWF   POSTDEC1
00AE 5000      01266         MOVF    r0x00, W
00B0 6EE5      01267         MOVWF   POSTDEC1
00B2 0000      01268         BANKSEL (_hour + 1)
00B4 5100      01269         MOVF    (_hour + 1), W, B
00B6 6EE5      01270         MOVWF   POSTDEC1
00B8 0000      01271         BANKSEL _hour
00BA 5100      01272         MOVF    _hour, W, B
00BC 6EE5      01273         MOVWF   POSTDEC1
00BE EC00 F000 01274         CALL    _convert_value
00C2 0E05      01275         MOVLW   0x05
00C4 26E1      01276         ADDWF   FSR1L, F
               01277 ;       .line   287; test.c     convert_value(minute, m);
00C6 0E00      01278         MOVLW   HIGH(_update_lcd_m_1_1)
00C8 6E00      01279         MOVWF   r0x01
00CA 0E00      01280         MOVLW   LOW(_update_lcd_m_1_1)
00CC 6E00      01281         MOVWF   r0x00
00CE 0E80      01282         MOVLW   0x80
00D0 6E00      01283         MOVWF   r0x02
00D2 5000      01284         MOVF    r0x02, W
00D4 6EE5      01285         MOVWF   POSTDEC1
00D6 5000      01286         MOVF    r0x01, W
00D8 6EE5      01287         MOVWF   POSTDEC1
00DA 5000      01288         MOVF    r0x00, W
00DC 6EE5      01289         MOVWF   POSTDEC1
00DE 0000      01290         BANKSEL (_minute + 1)
00E0 5100      01291         MOVF    (_minute + 1), W, B
00E2 6EE5      01292         MOVWF   POSTDEC1
00E4 0000      01293         BANKSEL _minute
00E6 5100      01294         MOVF    _minute, W, B
00E8 6EE5      01295         MOVWF   POSTDEC1
00EA EC00 F000 01296         CALL    _convert_value
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00EE 0E05      01297         MOVLW   0x05
00F0 26E1      01298         ADDWF   FSR1L, F
               01299 ;       .line   288; test.c     convert_value(second, s);
00F2 0E00      01300         MOVLW   HIGH(_update_lcd_s_1_1)
00F4 6E00      01301         MOVWF   r0x01
00F6 0E00      01302         MOVLW   LOW(_update_lcd_s_1_1)
00F8 6E00      01303         MOVWF   r0x00
00FA 0E80      01304         MOVLW   0x80
00FC 6E00      01305         MOVWF   r0x02
00FE 5000      01306         MOVF    r0x02, W
0100 6EE5      01307         MOVWF   POSTDEC1
0102 5000      01308         MOVF    r0x01, W
0104 6EE5      01309         MOVWF   POSTDEC1
0106 5000      01310         MOVF    r0x00, W
0108 6EE5      01311         MOVWF   POSTDEC1
010A 0000      01312         BANKSEL (_second + 1)
010C 5100      01313         MOVF    (_second + 1), W, B
010E 6EE5      01314         MOVWF   POSTDEC1
0110 0000      01315         BANKSEL _second
0112 5100      01316         MOVF    _second, W, B
0114 6EE5      01317         MOVWF   POSTDEC1
0116 EC00 F000 01318         CALL    _convert_value
011A 0E05      01319         MOVLW   0x05
011C 26E1      01320         ADDWF   FSR1L, F
011E 0000      01321         BANKSEL _alarm_ring
               01322 ;       .line   291; test.c     if(alarm_ring){
0120 5100      01323         MOVF    _alarm_ring, W, B
0122 0000      01324         BANKSEL (_alarm_ring + 1)
0124 1100      01325         IORWF   (_alarm_ring + 1), W, B
0126 B4D8      01326         BTFSC   STATUS, 2
0128 D000      01327         BRA     _00312_DS_
012A 0000      01328         BANKSEL _blink
               01329 ;       .line   293; test.c     if(blink) sprintf(lcd,  " !! %s:%s:%s !!  WAKE UP! DUDE! ", h, m, s);
012C 5100      01330         MOVF    _blink, W, B
012E 0000      01331         BANKSEL (_blink + 1)
0130 1100      01332         IORWF   (_blink + 1), W, B
0132 B4D8      01333         BTFSC   STATUS, 2
0134 D000      01334         BRA     _00306_DS_
0136 0E00      01335         MOVLW   HIGH(_update_lcd_s_1_1)
0138 6E00      01336         MOVWF   r0x01
013A 0E00      01337         MOVLW   LOW(_update_lcd_s_1_1)
013C 6E00      01338         MOVWF   r0x00
013E 0E80      01339         MOVLW   0x80
0140 6E00      01340         MOVWF   r0x02
0142 0E00      01341         MOVLW   HIGH(_update_lcd_m_1_1)
0144 6E00      01342         MOVWF   r0x04
0146 0E00      01343         MOVLW   LOW(_update_lcd_m_1_1)
0148 6E00      01344         MOVWF   r0x03
014A 0E80      01345         MOVLW   0x80
014C 6E00      01346         MOVWF   r0x05
014E 0E00      01347         MOVLW   HIGH(_update_lcd_h_1_1)
0150 6E00      01348         MOVWF   r0x07
0152 0E00      01349         MOVLW   LOW(_update_lcd_h_1_1)
0154 6E00      01350         MOVWF   r0x06
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0156 0E80      01351         MOVLW   0x80
0158 6E00      01352         MOVWF   r0x08
015A 0E00      01353         MOVLW   HIGH(_update_lcd_lcd_1_1)
015C 6E00      01354         MOVWF   r0x0a
015E 0E00      01355         MOVLW   LOW(_update_lcd_lcd_1_1)
0160 6E00      01356         MOVWF   r0x09
0162 0E80      01357         MOVLW   0x80
0164 6E00      01358         MOVWF   r0x0b
0166 5000      01359         MOVF    r0x02, W
0168 6EE5      01360         MOVWF   POSTDEC1
016A 5000      01361         MOVF    r0x01, W
016C 6EE5      01362         MOVWF   POSTDEC1
016E 5000      01363         MOVF    r0x00, W
0170 6EE5      01364         MOVWF   POSTDEC1
0172 5000      01365         MOVF    r0x05, W
0174 6EE5      01366         MOVWF   POSTDEC1
0176 5000      01367         MOVF    r0x04, W
0178 6EE5      01368         MOVWF   POSTDEC1
017A 5000      01369         MOVF    r0x03, W
017C 6EE5      01370         MOVWF   POSTDEC1
017E 5000      01371         MOVF    r0x08, W
0180 6EE5      01372         MOVWF   POSTDEC1
0182 5000      01373         MOVF    r0x07, W
0184 6EE5      01374         MOVWF   POSTDEC1
0186 5000      01375         MOVF    r0x06, W
0188 6EE5      01376         MOVWF   POSTDEC1
018A 0E00      01377         MOVLW   UPPER(__str_1)
018C 6EE5      01378         MOVWF   POSTDEC1
018E 0E00      01379         MOVLW   HIGH(__str_1)
0190 6EE5      01380         MOVWF   POSTDEC1
0192 0E00      01381         MOVLW   LOW(__str_1)
0194 6EE5      01382         MOVWF   POSTDEC1
0196 5000      01383         MOVF    r0x0b, W
0198 6EE5      01384         MOVWF   POSTDEC1
019A 5000      01385         MOVF    r0x0a, W
019C 6EE5      01386         MOVWF   POSTDEC1
019E 5000      01387         MOVF    r0x09, W
01A0 6EE5      01388         MOVWF   POSTDEC1
01A2 EC00 F000 01389         CALL    _sprintf
01A6 0E0F      01390         MOVLW   0x0f
01A8 26E1      01391         ADDWF   FSR1L, F
01AA EF00 F000 01392         GOTO    _00354_DS_
01AE 01393 _00306_DS_:
               01394 ;       .line   294; test.c     else sprintf(lcd,       "    %s:%s:%s     WAKE UP! DUDE! ", h, m, s);
01AE 0E00      01395         MOVLW   HIGH(_update_lcd_s_1_1)
01B0 6E00      01396         MOVWF   r0x01
01B2 0E00      01397         MOVLW   LOW(_update_lcd_s_1_1)
01B4 6E00      01398         MOVWF   r0x00
01B6 0E80      01399         MOVLW   0x80
01B8 6E00      01400         MOVWF   r0x02
01BA 0E00      01401         MOVLW   HIGH(_update_lcd_m_1_1)
01BC 6E00      01402         MOVWF   r0x04
01BE 0E00      01403         MOVLW   LOW(_update_lcd_m_1_1)
01C0 6E00      01404         MOVWF   r0x03
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
01C2 0E80      01405         MOVLW   0x80
01C4 6E00      01406         MOVWF   r0x05
01C6 0E00      01407         MOVLW   HIGH(_update_lcd_h_1_1)
01C8 6E00      01408         MOVWF   r0x07
01CA 0E00      01409         MOVLW   LOW(_update_lcd_h_1_1)
01CC 6E00      01410         MOVWF   r0x06
01CE 0E80      01411         MOVLW   0x80
01D0 6E00      01412         MOVWF   r0x08
01D2 0E00      01413         MOVLW   HIGH(_update_lcd_lcd_1_1)
01D4 6E00      01414         MOVWF   r0x0a
01D6 0E00      01415         MOVLW   LOW(_update_lcd_lcd_1_1)
01D8 6E00      01416         MOVWF   r0x09
01DA 0E80      01417         MOVLW   0x80
01DC 6E00      01418         MOVWF   r0x0b
01DE 5000      01419         MOVF    r0x02, W
01E0 6EE5      01420         MOVWF   POSTDEC1
01E2 5000      01421         MOVF    r0x01, W
01E4 6EE5      01422         MOVWF   POSTDEC1
01E6 5000      01423         MOVF    r0x00, W
01E8 6EE5      01424         MOVWF   POSTDEC1
01EA 5000      01425         MOVF    r0x05, W
01EC 6EE5      01426         MOVWF   POSTDEC1
01EE 5000      01427         MOVF    r0x04, W
01F0 6EE5      01428         MOVWF   POSTDEC1
01F2 5000      01429         MOVF    r0x03, W
01F4 6EE5      01430         MOVWF   POSTDEC1
01F6 5000      01431         MOVF    r0x08, W
01F8 6EE5      01432         MOVWF   POSTDEC1
01FA 5000      01433         MOVF    r0x07, W
01FC 6EE5      01434         MOVWF   POSTDEC1
01FE 5000      01435         MOVF    r0x06, W
0200 6EE5      01436         MOVWF   POSTDEC1
0202 0E00      01437         MOVLW   UPPER(__str_2)
0204 6EE5      01438         MOVWF   POSTDEC1
0206 0E00      01439         MOVLW   HIGH(__str_2)
0208 6EE5      01440         MOVWF   POSTDEC1
020A 0E00      01441         MOVLW   LOW(__str_2)
020C 6EE5      01442         MOVWF   POSTDEC1
020E 5000      01443         MOVF    r0x0b, W
0210 6EE5      01444         MOVWF   POSTDEC1
0212 5000      01445         MOVF    r0x0a, W
0214 6EE5      01446         MOVWF   POSTDEC1
0216 5000      01447         MOVF    r0x09, W
0218 6EE5      01448         MOVWF   POSTDEC1
021A EC00 F000 01449         CALL    _sprintf
021E 0E0F      01450         MOVLW   0x0f
0220 26E1      01451         ADDWF   FSR1L, F
0222 EF00 F000 01452         GOTO    _00354_DS_
0226 01453 _00312_DS_:
0226 0000      01454         BANKSEL _alarm_set
               01455 ;       .line   296; test.c     }else if(alarm_set){
0228 5100      01456         MOVF    _alarm_set, W, B
022A 0000      01457         BANKSEL (_alarm_set + 1)
022C 1100      01458         IORWF   (_alarm_set + 1), W, B
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
022E B4D8      01459         BTFSC   STATUS, 2
0230 D000      01460         BRA     _00309_DS_
               01461 ;       .line   298; test.c     convert_value(alarm_hour, a_h);
0232 0E00      01462         MOVLW   HIGH(_update_lcd_a_h_1_1)
0234 6E00      01463         MOVWF   r0x01
0236 0E00      01464         MOVLW   LOW(_update_lcd_a_h_1_1)
0238 6E00      01465         MOVWF   r0x00
023A 0E80      01466         MOVLW   0x80
023C 6E00      01467         MOVWF   r0x02
023E 5000      01468         MOVF    r0x02, W
0240 6EE5      01469         MOVWF   POSTDEC1
0242 5000      01470         MOVF    r0x01, W
0244 6EE5      01471         MOVWF   POSTDEC1
0246 5000      01472         MOVF    r0x00, W
0248 6EE5      01473         MOVWF   POSTDEC1
024A 0000      01474         BANKSEL (_alarm_hour + 1)
024C 5100      01475         MOVF    (_alarm_hour + 1), W, B
024E 6EE5      01476         MOVWF   POSTDEC1
0250 0000      01477         BANKSEL _alarm_hour
0252 5100      01478         MOVF    _alarm_hour, W, B
0254 6EE5      01479         MOVWF   POSTDEC1
0256 EC00 F000 01480         CALL    _convert_value
025A 0E05      01481         MOVLW   0x05
025C 26E1      01482         ADDWF   FSR1L, F
               01483 ;       .line   299; test.c     convert_value(alarm_minute, a_m);
025E 0E00      01484         MOVLW   HIGH(_update_lcd_a_m_1_1)
0260 6E00      01485         MOVWF   r0x01
0262 0E00      01486         MOVLW   LOW(_update_lcd_a_m_1_1)
0264 6E00      01487         MOVWF   r0x00
0266 0E80      01488         MOVLW   0x80
0268 6E00      01489         MOVWF   r0x02
026A 5000      01490         MOVF    r0x02, W
026C 6EE5      01491         MOVWF   POSTDEC1
026E 5000      01492         MOVF    r0x01, W
0270 6EE5      01493         MOVWF   POSTDEC1
0272 5000      01494         MOVF    r0x00, W
0274 6EE5      01495         MOVWF   POSTDEC1
0276 0000      01496         BANKSEL (_alarm_minute + 1)
0278 5100      01497         MOVF    (_alarm_minute + 1), W, B
027A 6EE5      01498         MOVWF   POSTDEC1
027C 0000      01499         BANKSEL _alarm_minute
027E 5100      01500         MOVF    _alarm_minute, W, B
0280 6EE5      01501         MOVWF   POSTDEC1
0282 EC00 F000 01502         CALL    _convert_value
0286 0E05      01503         MOVLW   0x05
0288 26E1      01504         ADDWF   FSR1L, F
               01505 ;       .line   300; test.c     sprintf(lcd, "    %s:%s:%s     ALARM  [%s:%s]", h, m, s, a_h, a_m);
028A 0E00      01506         MOVLW   HIGH(_update_lcd_a_m_1_1)
028C 6E00      01507         MOVWF   r0x01
028E 0E00      01508         MOVLW   LOW(_update_lcd_a_m_1_1)
0290 6E00      01509         MOVWF   r0x00
0292 0E80      01510         MOVLW   0x80
0294 6E00      01511         MOVWF   r0x02
0296 0E00      01512         MOVLW   HIGH(_update_lcd_a_h_1_1)
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0298 6E00      01513         MOVWF   r0x04
029A 0E00      01514         MOVLW   LOW(_update_lcd_a_h_1_1)
029C 6E00      01515         MOVWF   r0x03
029E 0E80      01516         MOVLW   0x80
02A0 6E00      01517         MOVWF   r0x05
02A2 0E00      01518         MOVLW   HIGH(_update_lcd_s_1_1)
02A4 6E00      01519         MOVWF   r0x07
02A6 0E00      01520         MOVLW   LOW(_update_lcd_s_1_1)
02A8 6E00      01521         MOVWF   r0x06
02AA 0E80      01522         MOVLW   0x80
02AC 6E00      01523         MOVWF   r0x08
02AE 0E00      01524         MOVLW   HIGH(_update_lcd_m_1_1)
02B0 6E00      01525         MOVWF   r0x0a
02B2 0E00      01526         MOVLW   LOW(_update_lcd_m_1_1)
02B4 6E00      01527         MOVWF   r0x09
02B6 0E80      01528         MOVLW   0x80
02B8 6E00      01529         MOVWF   r0x0b
02BA 0E00      01530         MOVLW   HIGH(_update_lcd_h_1_1)
02BC 6E00      01531         MOVWF   r0x0d
02BE 0E00      01532         MOVLW   LOW(_update_lcd_h_1_1)
02C0 6E00      01533         MOVWF   r0x0c
02C2 0E80      01534         MOVLW   0x80
02C4 6E00      01535         MOVWF   r0x0e
02C6 0E00      01536         MOVLW   HIGH(_update_lcd_lcd_1_1)
02C8 6E00      01537         MOVWF   r0x10
02CA 0E00      01538         MOVLW   LOW(_update_lcd_lcd_1_1)
02CC 6E00      01539         MOVWF   r0x0f
02CE 0E80      01540         MOVLW   0x80
02D0 6E00      01541         MOVWF   r0x11
02D2 5000      01542         MOVF    r0x02, W
02D4 6EE5      01543         MOVWF   POSTDEC1
02D6 5000      01544         MOVF    r0x01, W
02D8 6EE5      01545         MOVWF   POSTDEC1
02DA 5000      01546         MOVF    r0x00, W
02DC 6EE5      01547         MOVWF   POSTDEC1
02DE 5000      01548         MOVF    r0x05, W
02E0 6EE5      01549         MOVWF   POSTDEC1
02E2 5000      01550         MOVF    r0x04, W
02E4 6EE5      01551         MOVWF   POSTDEC1
02E6 5000      01552         MOVF    r0x03, W
02E8 6EE5      01553         MOVWF   POSTDEC1
02EA 5000      01554         MOVF    r0x08, W
02EC 6EE5      01555         MOVWF   POSTDEC1
02EE 5000      01556         MOVF    r0x07, W
02F0 6EE5      01557         MOVWF   POSTDEC1
02F2 5000      01558         MOVF    r0x06, W
02F4 6EE5      01559         MOVWF   POSTDEC1
02F6 5000      01560         MOVF    r0x0b, W
02F8 6EE5      01561         MOVWF   POSTDEC1
02FA 5000      01562         MOVF    r0x0a, W
02FC 6EE5      01563         MOVWF   POSTDEC1
02FE 5000      01564         MOVF    r0x09, W
0300 6EE5      01565         MOVWF   POSTDEC1
0302 5000      01566         MOVF    r0x0e, W
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0304 6EE5      01567         MOVWF   POSTDEC1
0306 5000      01568         MOVF    r0x0d, W
0308 6EE5      01569         MOVWF   POSTDEC1
030A 5000      01570         MOVF    r0x0c, W
030C 6EE5      01571         MOVWF   POSTDEC1
030E 0E00      01572         MOVLW   UPPER(__str_3)
0310 6EE5      01573         MOVWF   POSTDEC1
0312 0E00      01574         MOVLW   HIGH(__str_3)
0314 6EE5      01575         MOVWF   POSTDEC1
0316 0E00      01576         MOVLW   LOW(__str_3)
0318 6EE5      01577         MOVWF   POSTDEC1
031A 5000      01578         MOVF    r0x11, W
031C 6EE5      01579         MOVWF   POSTDEC1
031E 5000      01580         MOVF    r0x10, W
0320 6EE5      01581         MOVWF   POSTDEC1
0322 5000      01582         MOVF    r0x0f, W
0324 6EE5      01583         MOVWF   POSTDEC1
0326 EC00 F000 01584         CALL    _sprintf
032A 0E15      01585         MOVLW   0x15
032C 26E1      01586         ADDWF   FSR1L, F
032E EF00 F000 01587         GOTO    _00354_DS_
0332 01588 _00309_DS_:
               01589 ;       .line   304; test.c     sprintf(lcd, "    %s:%s:%s       ALARM: OFF", h, m, s);
0332 0E00      01590         MOVLW   HIGH(_update_lcd_s_1_1)
0334 6E00      01591         MOVWF   r0x01
0336 0E00      01592         MOVLW   LOW(_update_lcd_s_1_1)
0338 6E00      01593         MOVWF   r0x00
033A 0E80      01594         MOVLW   0x80
033C 6E00      01595         MOVWF   r0x02
033E 0E00      01596         MOVLW   HIGH(_update_lcd_m_1_1)
0340 6E00      01597         MOVWF   r0x04
0342 0E00      01598         MOVLW   LOW(_update_lcd_m_1_1)
0344 6E00      01599         MOVWF   r0x03
0346 0E80      01600         MOVLW   0x80
0348 6E00      01601         MOVWF   r0x05
034A 0E00      01602         MOVLW   HIGH(_update_lcd_h_1_1)
034C 6E00      01603         MOVWF   r0x07
034E 0E00      01604         MOVLW   LOW(_update_lcd_h_1_1)
0350 6E00      01605         MOVWF   r0x06
0352 0E80      01606         MOVLW   0x80
0354 6E00      01607         MOVWF   r0x08
0356 0E00      01608         MOVLW   HIGH(_update_lcd_lcd_1_1)
0358 6E00      01609         MOVWF   r0x0a
035A 0E00      01610         MOVLW   LOW(_update_lcd_lcd_1_1)
035C 6E00      01611         MOVWF   r0x09
035E 0E80      01612         MOVLW   0x80
0360 6E00      01613         MOVWF   r0x0b
0362 5000      01614         MOVF    r0x02, W
0364 6EE5      01615         MOVWF   POSTDEC1
0366 5000      01616         MOVF    r0x01, W
0368 6EE5      01617         MOVWF   POSTDEC1
036A 5000      01618         MOVF    r0x00, W
036C 6EE5      01619         MOVWF   POSTDEC1
036E 5000      01620         MOVF    r0x05, W
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0370 6EE5      01621         MOVWF   POSTDEC1
0372 5000      01622         MOVF    r0x04, W
0374 6EE5      01623         MOVWF   POSTDEC1
0376 5000      01624         MOVF    r0x03, W
0378 6EE5      01625         MOVWF   POSTDEC1
037A 5000      01626         MOVF    r0x08, W
037C 6EE5      01627         MOVWF   POSTDEC1
037E 5000      01628         MOVF    r0x07, W
0380 6EE5      01629         MOVWF   POSTDEC1
0382 5000      01630         MOVF    r0x06, W
0384 6EE5      01631         MOVWF   POSTDEC1
0386 0E00      01632         MOVLW   UPPER(__str_4)
0388 6EE5      01633         MOVWF   POSTDEC1
038A 0E00      01634         MOVLW   HIGH(__str_4)
038C 6EE5      01635         MOVWF   POSTDEC1
038E 0E00      01636         MOVLW   LOW(__str_4)
0390 6EE5      01637         MOVWF   POSTDEC1
0392 5000      01638         MOVF    r0x0b, W
0394 6EE5      01639         MOVWF   POSTDEC1
0396 5000      01640         MOVF    r0x0a, W
0398 6EE5      01641         MOVWF   POSTDEC1
039A 5000      01642         MOVF    r0x09, W
039C 6EE5      01643         MOVWF   POSTDEC1
039E EC00 F000 01644         CALL    _sprintf
03A2 0E0F      01645         MOVLW   0x0f
03A4 26E1      01646         ADDWF   FSR1L, F
03A6 EF00 F000 01647         GOTO    _00354_DS_
03AA 01648 _00350_DS_:
03AA 0000      01649         BANKSEL _state
               01650 ;       .line   309; test.c     }else if(state == CONFIG_CLOCK){        
03AC 5100      01651         MOVF    _state, W, B
03AE 0A02      01652         XORLW   0x02
03B0 E100      01653         BNZ     _00376_DS_
03B2 0000      01654         BANKSEL (_state + 1)
03B4 5100      01655         MOVF    (_state + 1), W, B
03B6 E000      01656         BZ      _00377_DS_
03B8 01657 _00376_DS_:
03B8 D000      01658         BRA     _00347_DS_
03BA 01659 _00377_DS_:
               01660 ;       .line   311; test.c     sprintf(lcd, "      MENU        CHANGE CLOCK?");
03BA 0E00      01661         MOVLW   HIGH(_update_lcd_lcd_1_1)
03BC 6E00      01662         MOVWF   r0x01
03BE 0E00      01663         MOVLW   LOW(_update_lcd_lcd_1_1)
03C0 6E00      01664         MOVWF   r0x00
03C2 0E80      01665         MOVLW   0x80
03C4 6E00      01666         MOVWF   r0x02
03C6 0E00      01667         MOVLW   UPPER(__str_5)
03C8 6EE5      01668         MOVWF   POSTDEC1
03CA 0E00      01669         MOVLW   HIGH(__str_5)
03CC 6EE5      01670         MOVWF   POSTDEC1
03CE 0E00      01671         MOVLW   LOW(__str_5)
03D0 6EE5      01672         MOVWF   POSTDEC1
03D2 5000      01673         MOVF    r0x02, W
03D4 6EE5      01674         MOVWF   POSTDEC1
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
03D6 5000      01675         MOVF    r0x01, W
03D8 6EE5      01676         MOVWF   POSTDEC1
03DA 5000      01677         MOVF    r0x00, W
03DC 6EE5      01678         MOVWF   POSTDEC1
03DE EC00 F000 01679         CALL    _sprintf
03E2 0E06      01680         MOVLW   0x06
03E4 26E1      01681         ADDWF   FSR1L, F
03E6 EF00 F000 01682         GOTO    _00354_DS_
03EA 01683 _00347_DS_:
03EA 0000      01684         BANKSEL _state
               01685 ;       .line   314; test.c     }else if(state == CONFIG_ALARM){        
03EC 5100      01686         MOVF    _state, W, B
03EE 0A03      01687         XORLW   0x03
03F0 E100      01688         BNZ     _00378_DS_
03F2 0000      01689         BANKSEL (_state + 1)
03F4 5100      01690         MOVF    (_state + 1), W, B
03F6 E000      01691         BZ      _00379_DS_
03F8 01692 _00378_DS_:
03F8 D000      01693         BRA     _00344_DS_
03FA 01694 _00379_DS_:
               01695 ;       .line   316; test.c     sprintf(lcd, "      MENU        CHANGE ALARM?");
03FA 0E00      01696         MOVLW   HIGH(_update_lcd_lcd_1_1)
03FC 6E00      01697         MOVWF   r0x01
03FE 0E00      01698         MOVLW   LOW(_update_lcd_lcd_1_1)
0400 6E00      01699         MOVWF   r0x00
0402 0E80      01700         MOVLW   0x80
0404 6E00      01701         MOVWF   r0x02
0406 0E00      01702         MOVLW   UPPER(__str_6)
0408 6EE5      01703         MOVWF   POSTDEC1
040A 0E00      01704         MOVLW   HIGH(__str_6)
040C 6EE5      01705         MOVWF   POSTDEC1
040E 0E00      01706         MOVLW   LOW(__str_6)
0410 6EE5      01707         MOVWF   POSTDEC1
0412 5000      01708         MOVF    r0x02, W
0414 6EE5      01709         MOVWF   POSTDEC1
0416 5000      01710         MOVF    r0x01, W
0418 6EE5      01711         MOVWF   POSTDEC1
041A 5000      01712         MOVF    r0x00, W
041C 6EE5      01713         MOVWF   POSTDEC1
041E EC00 F000 01714         CALL    _sprintf
0422 0E06      01715         MOVLW   0x06
0424 26E1      01716         ADDWF   FSR1L, F
0426 EF00 F000 01717         GOTO    _00354_DS_
042A 01718 _00344_DS_:
042A 0000      01719         BANKSEL _state
               01720 ;       .line   319; test.c     }else if(state == CONFIG_CLOCK_HOUR){   
042C 5100      01721         MOVF    _state, W, B
042E 0A04      01722         XORLW   0x04
0430 E100      01723         BNZ     _00380_DS_
0432 0000      01724         BANKSEL (_state + 1)
0434 5100      01725         MOVF    (_state + 1), W, B
0436 E000      01726         BZ      _00381_DS_
0438 01727 _00380_DS_:
0438 D000      01728         BRA     _00341_DS_
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
043A 01729 _00381_DS_:
               01730 ;       .line   321; test.c     convert_value(hour, h);
043A 0E00      01731         MOVLW   HIGH(_update_lcd_h_1_1)
043C 6E00      01732         MOVWF   r0x01
043E 0E00      01733         MOVLW   LOW(_update_lcd_h_1_1)
0440 6E00      01734         MOVWF   r0x00
0442 0E80      01735         MOVLW   0x80
0444 6E00      01736         MOVWF   r0x02
0446 5000      01737         MOVF    r0x02, W
0448 6EE5      01738         MOVWF   POSTDEC1
044A 5000      01739         MOVF    r0x01, W
044C 6EE5      01740         MOVWF   POSTDEC1
044E 5000      01741         MOVF    r0x00, W
0450 6EE5      01742         MOVWF   POSTDEC1
0452 0000      01743         BANKSEL (_hour + 1)
0454 5100      01744         MOVF    (_hour + 1), W, B
0456 6EE5      01745         MOVWF   POSTDEC1
0458 0000      01746         BANKSEL _hour
045A 5100      01747         MOVF    _hour, W, B
045C 6EE5      01748         MOVWF   POSTDEC1
045E EC00 F000 01749         CALL    _convert_value
0462 0E05      01750         MOVLW   0x05
0464 26E1      01751         ADDWF   FSR1L, F
               01752 ;       .line   322; test.c     convert_value(minute, m);
0466 0E00      01753         MOVLW   HIGH(_update_lcd_m_1_1)
0468 6E00      01754         MOVWF   r0x01
046A 0E00      01755         MOVLW   LOW(_update_lcd_m_1_1)
046C 6E00      01756         MOVWF   r0x00
046E 0E80      01757         MOVLW   0x80
0470 6E00      01758         MOVWF   r0x02
0472 5000      01759         MOVF    r0x02, W
0474 6EE5      01760         MOVWF   POSTDEC1
0476 5000      01761         MOVF    r0x01, W
0478 6EE5      01762         MOVWF   POSTDEC1
047A 5000      01763         MOVF    r0x00, W
047C 6EE5      01764         MOVWF   POSTDEC1
047E 0000      01765         BANKSEL (_minute + 1)
0480 5100      01766         MOVF    (_minute + 1), W, B
0482 6EE5      01767         MOVWF   POSTDEC1
0484 0000      01768         BANKSEL _minute
0486 5100      01769         MOVF    _minute, W, B
0488 6EE5      01770         MOVWF   POSTDEC1
048A EC00 F000 01771         CALL    _convert_value
048E 0E05      01772         MOVLW   0x05
0490 26E1      01773         ADDWF   FSR1L, F
0492 0000      01774         BANKSEL _blink
               01775 ;       .line   324; test.c     if(blink) sprintf(lcd, "SET CLOCK:          [%s]: %s", h, m);
0494 5100      01776         MOVF    _blink, W, B
0496 0000      01777         BANKSEL (_blink + 1)
0498 1100      01778         IORWF   (_blink + 1), W, B
049A E000      01779         BZ      _00315_DS_
049C 0E00      01780         MOVLW   HIGH(_update_lcd_m_1_1)
049E 6E00      01781         MOVWF   r0x01
04A0 0E00      01782         MOVLW   LOW(_update_lcd_m_1_1)
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
04A2 6E00      01783         MOVWF   r0x00
04A4 0E80      01784         MOVLW   0x80
04A6 6E00      01785         MOVWF   r0x02
04A8 0E00      01786         MOVLW   HIGH(_update_lcd_h_1_1)
04AA 6E00      01787         MOVWF   r0x04
04AC 0E00      01788         MOVLW   LOW(_update_lcd_h_1_1)
04AE 6E00      01789         MOVWF   r0x03
04B0 0E80      01790         MOVLW   0x80
04B2 6E00      01791         MOVWF   r0x05
04B4 0E00      01792         MOVLW   HIGH(_update_lcd_lcd_1_1)
04B6 6E00      01793         MOVWF   r0x07
04B8 0E00      01794         MOVLW   LOW(_update_lcd_lcd_1_1)
04BA 6E00      01795         MOVWF   r0x06
04BC 0E80      01796         MOVLW   0x80
04BE 6E00      01797         MOVWF   r0x08
04C0 5000      01798         MOVF    r0x02, W
04C2 6EE5      01799         MOVWF   POSTDEC1
04C4 5000      01800         MOVF    r0x01, W
04C6 6EE5      01801         MOVWF   POSTDEC1
04C8 5000      01802         MOVF    r0x00, W
04CA 6EE5      01803         MOVWF   POSTDEC1
04CC 5000      01804         MOVF    r0x05, W
04CE 6EE5      01805         MOVWF   POSTDEC1
04D0 5000      01806         MOVF    r0x04, W
04D2 6EE5      01807         MOVWF   POSTDEC1
04D4 5000      01808         MOVF    r0x03, W
04D6 6EE5      01809         MOVWF   POSTDEC1
04D8 0E00      01810         MOVLW   UPPER(__str_7)
04DA 6EE5      01811         MOVWF   POSTDEC1
04DC 0E00      01812         MOVLW   HIGH(__str_7)
04DE 6EE5      01813         MOVWF   POSTDEC1
04E0 0E00      01814         MOVLW   LOW(__str_7)
04E2 6EE5      01815         MOVWF   POSTDEC1
04E4 5000      01816         MOVF    r0x08, W
04E6 6EE5      01817         MOVWF   POSTDEC1
04E8 5000      01818         MOVF    r0x07, W
04EA 6EE5      01819         MOVWF   POSTDEC1
04EC 5000      01820         MOVF    r0x06, W
04EE 6EE5      01821         MOVWF   POSTDEC1
04F0 EC00 F000 01822         CALL    _sprintf
04F4 0E0C      01823         MOVLW   0x0c
04F6 26E1      01824         ADDWF   FSR1L, F
04F8 EF00 F000 01825         GOTO    _00354_DS_
04FC 01826 _00315_DS_:
               01827 ;       .line   325; test.c     else sprintf(lcd, "SET CLOCK:           %s : %s", h, m);        
04FC 0E00      01828         MOVLW   HIGH(_update_lcd_m_1_1)
04FE 6E00      01829         MOVWF   r0x01
0500 0E00      01830         MOVLW   LOW(_update_lcd_m_1_1)
0502 6E00      01831         MOVWF   r0x00
0504 0E80      01832         MOVLW   0x80
0506 6E00      01833         MOVWF   r0x02
0508 0E00      01834         MOVLW   HIGH(_update_lcd_h_1_1)
050A 6E00      01835         MOVWF   r0x04
050C 0E00      01836         MOVLW   LOW(_update_lcd_h_1_1)
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
050E 6E00      01837         MOVWF   r0x03
0510 0E80      01838         MOVLW   0x80
0512 6E00      01839         MOVWF   r0x05
0514 0E00      01840         MOVLW   HIGH(_update_lcd_lcd_1_1)
0516 6E00      01841         MOVWF   r0x07
0518 0E00      01842         MOVLW   LOW(_update_lcd_lcd_1_1)
051A 6E00      01843         MOVWF   r0x06
051C 0E80      01844         MOVLW   0x80
051E 6E00      01845         MOVWF   r0x08
0520 5000      01846         MOVF    r0x02, W
0522 6EE5      01847         MOVWF   POSTDEC1
0524 5000      01848         MOVF    r0x01, W
0526 6EE5      01849         MOVWF   POSTDEC1
0528 5000      01850         MOVF    r0x00, W
052A 6EE5      01851         MOVWF   POSTDEC1
052C 5000      01852         MOVF    r0x05, W
052E 6EE5      01853         MOVWF   POSTDEC1
0530 5000      01854         MOVF    r0x04, W
0532 6EE5      01855         MOVWF   POSTDEC1
0534 5000      01856         MOVF    r0x03, W
0536 6EE5      01857         MOVWF   POSTDEC1
0538 0E00      01858         MOVLW   UPPER(__str_8)
053A 6EE5      01859         MOVWF   POSTDEC1
053C 0E00      01860         MOVLW   HIGH(__str_8)
053E 6EE5      01861         MOVWF   POSTDEC1
0540 0E00      01862         MOVLW   LOW(__str_8)
0542 6EE5      01863         MOVWF   POSTDEC1
0544 5000      01864         MOVF    r0x08, W
0546 6EE5      01865         MOVWF   POSTDEC1
0548 5000      01866         MOVF    r0x07, W
054A 6EE5      01867         MOVWF   POSTDEC1
054C 5000      01868         MOVF    r0x06, W
054E 6EE5      01869         MOVWF   POSTDEC1
0550 EC00 F000 01870         CALL    _sprintf
0554 0E0C      01871         MOVLW   0x0c
0556 26E1      01872         ADDWF   FSR1L, F
0558 EF00 F000 01873         GOTO    _00354_DS_
055C 01874 _00341_DS_:
055C 0000      01875         BANKSEL _state
               01876 ;       .line   328; test.c     }else if(state == CONFIG_CLOCK_MINUTE){ 
055E 5100      01877         MOVF    _state, W, B
0560 0A05      01878         XORLW   0x05
0562 E100      01879         BNZ     _00382_DS_
0564 0000      01880         BANKSEL (_state + 1)
0566 5100      01881         MOVF    (_state + 1), W, B
0568 E000      01882         BZ      _00383_DS_
056A 01883 _00382_DS_:
056A D000      01884         BRA     _00338_DS_
056C 01885 _00383_DS_:
               01886 ;       .line   330; test.c     convert_value(hour, h);
056C 0E00      01887         MOVLW   HIGH(_update_lcd_h_1_1)
056E 6E00      01888         MOVWF   r0x01
0570 0E00      01889         MOVLW   LOW(_update_lcd_h_1_1)
0572 6E00      01890         MOVWF   r0x00
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0574 0E80      01891         MOVLW   0x80
0576 6E00      01892         MOVWF   r0x02
0578 5000      01893         MOVF    r0x02, W
057A 6EE5      01894         MOVWF   POSTDEC1
057C 5000      01895         MOVF    r0x01, W
057E 6EE5      01896         MOVWF   POSTDEC1
0580 5000      01897         MOVF    r0x00, W
0582 6EE5      01898         MOVWF   POSTDEC1
0584 0000      01899         BANKSEL (_hour + 1)
0586 5100      01900         MOVF    (_hour + 1), W, B
0588 6EE5      01901         MOVWF   POSTDEC1
058A 0000      01902         BANKSEL _hour
058C 5100      01903         MOVF    _hour, W, B
058E 6EE5      01904         MOVWF   POSTDEC1
0590 EC00 F000 01905         CALL    _convert_value
0594 0E05      01906         MOVLW   0x05
0596 26E1      01907         ADDWF   FSR1L, F
               01908 ;       .line   331; test.c     convert_value(minute, m);
0598 0E00      01909         MOVLW   HIGH(_update_lcd_m_1_1)
059A 6E00      01910         MOVWF   r0x01
059C 0E00      01911         MOVLW   LOW(_update_lcd_m_1_1)
059E 6E00      01912         MOVWF   r0x00
05A0 0E80      01913         MOVLW   0x80
05A2 6E00      01914         MOVWF   r0x02
05A4 5000      01915         MOVF    r0x02, W
05A6 6EE5      01916         MOVWF   POSTDEC1
05A8 5000      01917         MOVF    r0x01, W
05AA 6EE5      01918         MOVWF   POSTDEC1
05AC 5000      01919         MOVF    r0x00, W
05AE 6EE5      01920         MOVWF   POSTDEC1
05B0 0000      01921         BANKSEL (_minute + 1)
05B2 5100      01922         MOVF    (_minute + 1), W, B
05B4 6EE5      01923         MOVWF   POSTDEC1
05B6 0000      01924         BANKSEL _minute
05B8 5100      01925         MOVF    _minute, W, B
05BA 6EE5      01926         MOVWF   POSTDEC1
05BC EC00 F000 01927         CALL    _convert_value
05C0 0E05      01928         MOVLW   0x05
05C2 26E1      01929         ADDWF   FSR1L, F
05C4 0000      01930         BANKSEL _blink
               01931 ;       .line   333; test.c     if(blink) sprintf(lcd, "SET CLOCK:           %s :[%s]", h, m);
05C6 5100      01932         MOVF    _blink, W, B
05C8 0000      01933         BANKSEL (_blink + 1)
05CA 1100      01934         IORWF   (_blink + 1), W, B
05CC E000      01935         BZ      _00318_DS_
05CE 0E00      01936         MOVLW   HIGH(_update_lcd_m_1_1)
05D0 6E00      01937         MOVWF   r0x01
05D2 0E00      01938         MOVLW   LOW(_update_lcd_m_1_1)
05D4 6E00      01939         MOVWF   r0x00
05D6 0E80      01940         MOVLW   0x80
05D8 6E00      01941         MOVWF   r0x02
05DA 0E00      01942         MOVLW   HIGH(_update_lcd_h_1_1)
05DC 6E00      01943         MOVWF   r0x04
05DE 0E00      01944         MOVLW   LOW(_update_lcd_h_1_1)
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
05E0 6E00      01945         MOVWF   r0x03
05E2 0E80      01946         MOVLW   0x80
05E4 6E00      01947         MOVWF   r0x05
05E6 0E00      01948         MOVLW   HIGH(_update_lcd_lcd_1_1)
05E8 6E00      01949         MOVWF   r0x07
05EA 0E00      01950         MOVLW   LOW(_update_lcd_lcd_1_1)
05EC 6E00      01951         MOVWF   r0x06
05EE 0E80      01952         MOVLW   0x80
05F0 6E00      01953         MOVWF   r0x08
05F2 5000      01954         MOVF    r0x02, W
05F4 6EE5      01955         MOVWF   POSTDEC1
05F6 5000      01956         MOVF    r0x01, W
05F8 6EE5      01957         MOVWF   POSTDEC1
05FA 5000      01958         MOVF    r0x00, W
05FC 6EE5      01959         MOVWF   POSTDEC1
05FE 5000      01960         MOVF    r0x05, W
0600 6EE5      01961         MOVWF   POSTDEC1
0602 5000      01962         MOVF    r0x04, W
0604 6EE5      01963         MOVWF   POSTDEC1
0606 5000      01964         MOVF    r0x03, W
0608 6EE5      01965         MOVWF   POSTDEC1
060A 0E00      01966         MOVLW   UPPER(__str_9)
060C 6EE5      01967         MOVWF   POSTDEC1
060E 0E00      01968         MOVLW   HIGH(__str_9)
0610 6EE5      01969         MOVWF   POSTDEC1
0612 0E00      01970         MOVLW   LOW(__str_9)
0614 6EE5      01971         MOVWF   POSTDEC1
0616 5000      01972         MOVF    r0x08, W
0618 6EE5      01973         MOVWF   POSTDEC1
061A 5000      01974         MOVF    r0x07, W
061C 6EE5      01975         MOVWF   POSTDEC1
061E 5000      01976         MOVF    r0x06, W
0620 6EE5      01977         MOVWF   POSTDEC1
0622 EC00 F000 01978         CALL    _sprintf
0626 0E0C      01979         MOVLW   0x0c
0628 26E1      01980         ADDWF   FSR1L, F
062A D000      01981         BRA     _00354_DS_
062C 01982 _00318_DS_:
               01983 ;       .line   334; test.c     else sprintf(lcd, "SET CLOCK:           %s : %s", h, m);        
062C 0E00      01984         MOVLW   HIGH(_update_lcd_m_1_1)
062E 6E00      01985         MOVWF   r0x01
0630 0E00      01986         MOVLW   LOW(_update_lcd_m_1_1)
0632 6E00      01987         MOVWF   r0x00
0634 0E80      01988         MOVLW   0x80
0636 6E00      01989         MOVWF   r0x02
0638 0E00      01990         MOVLW   HIGH(_update_lcd_h_1_1)
063A 6E00      01991         MOVWF   r0x04
063C 0E00      01992         MOVLW   LOW(_update_lcd_h_1_1)
063E 6E00      01993         MOVWF   r0x03
0640 0E80      01994         MOVLW   0x80
0642 6E00      01995         MOVWF   r0x05
0644 0E00      01996         MOVLW   HIGH(_update_lcd_lcd_1_1)
0646 6E00      01997         MOVWF   r0x07
0648 0E00      01998         MOVLW   LOW(_update_lcd_lcd_1_1)
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
064A 6E00      01999         MOVWF   r0x06
064C 0E80      02000         MOVLW   0x80
064E 6E00      02001         MOVWF   r0x08
0650 5000      02002         MOVF    r0x02, W
0652 6EE5      02003         MOVWF   POSTDEC1
0654 5000      02004         MOVF    r0x01, W
0656 6EE5      02005         MOVWF   POSTDEC1
0658 5000      02006         MOVF    r0x00, W
065A 6EE5      02007         MOVWF   POSTDEC1
065C 5000      02008         MOVF    r0x05, W
065E 6EE5      02009         MOVWF   POSTDEC1
0660 5000      02010         MOVF    r0x04, W
0662 6EE5      02011         MOVWF   POSTDEC1
0664 5000      02012         MOVF    r0x03, W
0666 6EE5      02013         MOVWF   POSTDEC1
0668 0E00      02014         MOVLW   UPPER(__str_8)
066A 6EE5      02015         MOVWF   POSTDEC1
066C 0E00      02016         MOVLW   HIGH(__str_8)
066E 6EE5      02017         MOVWF   POSTDEC1
0670 0E00      02018         MOVLW   LOW(__str_8)
0672 6EE5      02019         MOVWF   POSTDEC1
0674 5000      02020         MOVF    r0x08, W
0676 6EE5      02021         MOVWF   POSTDEC1
0678 5000      02022         MOVF    r0x07, W
067A 6EE5      02023         MOVWF   POSTDEC1
067C 5000      02024         MOVF    r0x06, W
067E 6EE5      02025         MOVWF   POSTDEC1
0680 EC00 F000 02026         CALL    _sprintf
0684 0E0C      02027         MOVLW   0x0c
0686 26E1      02028         ADDWF   FSR1L, F
0688 D000      02029         BRA     _00354_DS_
068A 02030 _00338_DS_:
068A 0000      02031         BANKSEL _state
               02032 ;       .line   337; test.c     }else if(state == CONFIG_ALARM_ON_OFF){ 
068C 5100      02033         MOVF    _state, W, B
068E 0A06      02034         XORLW   0x06
0690 E100      02035         BNZ     _00384_DS_
0692 0000      02036         BANKSEL (_state + 1)
0694 5100      02037         MOVF    (_state + 1), W, B
0696 E000      02038         BZ      _00385_DS_
0698 02039 _00384_DS_:
0698 D000      02040         BRA     _00335_DS_
069A 02041 _00385_DS_:
069A 0000      02042         BANKSEL _alarm_set
               02043 ;       .line   339; test.c     if(alarm_set) sprintf(lcd, "SET ALARM:            [ON ]");
069C 5100      02044         MOVF    _alarm_set, W, B
069E 0000      02045         BANKSEL (_alarm_set + 1)
06A0 1100      02046         IORWF   (_alarm_set + 1), W, B
06A2 E000      02047         BZ      _00321_DS_
06A4 0E00      02048         MOVLW   HIGH(_update_lcd_lcd_1_1)
06A6 6E00      02049         MOVWF   r0x01
06A8 0E00      02050         MOVLW   LOW(_update_lcd_lcd_1_1)
06AA 6E00      02051         MOVWF   r0x00
06AC 0E80      02052         MOVLW   0x80
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
06AE 6E00      02053         MOVWF   r0x02
06B0 0E00      02054         MOVLW   UPPER(__str_10)
06B2 6EE5      02055         MOVWF   POSTDEC1
06B4 0E00      02056         MOVLW   HIGH(__str_10)
06B6 6EE5      02057         MOVWF   POSTDEC1
06B8 0E00      02058         MOVLW   LOW(__str_10)
06BA 6EE5      02059         MOVWF   POSTDEC1
06BC 5000      02060         MOVF    r0x02, W
06BE 6EE5      02061         MOVWF   POSTDEC1
06C0 5000      02062         MOVF    r0x01, W
06C2 6EE5      02063         MOVWF   POSTDEC1
06C4 5000      02064         MOVF    r0x00, W
06C6 6EE5      02065         MOVWF   POSTDEC1
06C8 EC00 F000 02066         CALL    _sprintf
06CC 0E06      02067         MOVLW   0x06
06CE 26E1      02068         ADDWF   FSR1L, F
06D0 D000      02069         BRA     _00354_DS_
06D2 02070 _00321_DS_:
               02071 ;       .line   340; test.c     else sprintf(lcd, "SET ALARM:            [OFF]");       
06D2 0E00      02072         MOVLW   HIGH(_update_lcd_lcd_1_1)
06D4 6E00      02073         MOVWF   r0x01
06D6 0E00      02074         MOVLW   LOW(_update_lcd_lcd_1_1)
06D8 6E00      02075         MOVWF   r0x00
06DA 0E80      02076         MOVLW   0x80
06DC 6E00      02077         MOVWF   r0x02
06DE 0E00      02078         MOVLW   UPPER(__str_11)
06E0 6EE5      02079         MOVWF   POSTDEC1
06E2 0E00      02080         MOVLW   HIGH(__str_11)
06E4 6EE5      02081         MOVWF   POSTDEC1
06E6 0E00      02082         MOVLW   LOW(__str_11)
06E8 6EE5      02083         MOVWF   POSTDEC1
06EA 5000      02084         MOVF    r0x02, W
06EC 6EE5      02085         MOVWF   POSTDEC1
06EE 5000      02086         MOVF    r0x01, W
06F0 6EE5      02087         MOVWF   POSTDEC1
06F2 5000      02088         MOVF    r0x00, W
06F4 6EE5      02089         MOVWF   POSTDEC1
06F6 EC00 F000 02090         CALL    _sprintf
06FA 0E06      02091         MOVLW   0x06
06FC 26E1      02092         ADDWF   FSR1L, F
06FE D000      02093         BRA     _00354_DS_
0700 02094 _00335_DS_:
0700 0000      02095         BANKSEL _state
               02096 ;       .line   343; test.c     }else if(state == CONFIG_ALARM_HOUR){   
0702 5100      02097         MOVF    _state, W, B
0704 0A07      02098         XORLW   0x07
0706 E100      02099         BNZ     _00386_DS_
0708 0000      02100         BANKSEL (_state + 1)
070A 5100      02101         MOVF    (_state + 1), W, B
070C E000      02102         BZ      _00387_DS_
070E 02103 _00386_DS_:
070E D000      02104         BRA     _00332_DS_
0710 02105 _00387_DS_:
               02106 ;       .line   345; test.c     convert_value(alarm_hour, h);
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0710 0E00      02107         MOVLW   HIGH(_update_lcd_h_1_1)
0712 6E00      02108         MOVWF   r0x01
0714 0E00      02109         MOVLW   LOW(_update_lcd_h_1_1)
0716 6E00      02110         MOVWF   r0x00
0718 0E80      02111         MOVLW   0x80
071A 6E00      02112         MOVWF   r0x02
071C 5000      02113         MOVF    r0x02, W
071E 6EE5      02114         MOVWF   POSTDEC1
0720 5000      02115         MOVF    r0x01, W
0722 6EE5      02116         MOVWF   POSTDEC1
0724 5000      02117         MOVF    r0x00, W
0726 6EE5      02118         MOVWF   POSTDEC1
0728 0000      02119         BANKSEL (_alarm_hour + 1)
072A 5100      02120         MOVF    (_alarm_hour + 1), W, B
072C 6EE5      02121         MOVWF   POSTDEC1
072E 0000      02122         BANKSEL _alarm_hour
0730 5100      02123         MOVF    _alarm_hour, W, B
0732 6EE5      02124         MOVWF   POSTDEC1
0734 EC00 F000 02125         CALL    _convert_value
0738 0E05      02126         MOVLW   0x05
073A 26E1      02127         ADDWF   FSR1L, F
               02128 ;       .line   346; test.c     convert_value(alarm_minute, m);
073C 0E00      02129         MOVLW   HIGH(_update_lcd_m_1_1)
073E 6E00      02130         MOVWF   r0x01
0740 0E00      02131         MOVLW   LOW(_update_lcd_m_1_1)
0742 6E00      02132         MOVWF   r0x00
0744 0E80      02133         MOVLW   0x80
0746 6E00      02134         MOVWF   r0x02
0748 5000      02135         MOVF    r0x02, W
074A 6EE5      02136         MOVWF   POSTDEC1
074C 5000      02137         MOVF    r0x01, W
074E 6EE5      02138         MOVWF   POSTDEC1
0750 5000      02139         MOVF    r0x00, W
0752 6EE5      02140         MOVWF   POSTDEC1
0754 0000      02141         BANKSEL (_alarm_minute + 1)
0756 5100      02142         MOVF    (_alarm_minute + 1), W, B
0758 6EE5      02143         MOVWF   POSTDEC1
075A 0000      02144         BANKSEL _alarm_minute
075C 5100      02145         MOVF    _alarm_minute, W, B
075E 6EE5      02146         MOVWF   POSTDEC1
0760 EC00 F000 02147         CALL    _convert_value
0764 0E05      02148         MOVLW   0x05
0766 26E1      02149         ADDWF   FSR1L, F
0768 0000      02150         BANKSEL _blink
               02151 ;       .line   348; test.c     if(blink) sprintf(lcd, "SET ALARM:          [%s]: %s", h, m);
076A 5100      02152         MOVF    _blink, W, B
076C 0000      02153         BANKSEL (_blink + 1)
076E 1100      02154         IORWF   (_blink + 1), W, B
0770 E000      02155         BZ      _00324_DS_
0772 0E00      02156         MOVLW   HIGH(_update_lcd_m_1_1)
0774 6E00      02157         MOVWF   r0x01
0776 0E00      02158         MOVLW   LOW(_update_lcd_m_1_1)
0778 6E00      02159         MOVWF   r0x00
077A 0E80      02160         MOVLW   0x80
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
077C 6E00      02161         MOVWF   r0x02
077E 0E00      02162         MOVLW   HIGH(_update_lcd_h_1_1)
0780 6E00      02163         MOVWF   r0x04
0782 0E00      02164         MOVLW   LOW(_update_lcd_h_1_1)
0784 6E00      02165         MOVWF   r0x03
0786 0E80      02166         MOVLW   0x80
0788 6E00      02167         MOVWF   r0x05
078A 0E00      02168         MOVLW   HIGH(_update_lcd_lcd_1_1)
078C 6E00      02169         MOVWF   r0x07
078E 0E00      02170         MOVLW   LOW(_update_lcd_lcd_1_1)
0790 6E00      02171         MOVWF   r0x06
0792 0E80      02172         MOVLW   0x80
0794 6E00      02173         MOVWF   r0x08
0796 5000      02174         MOVF    r0x02, W
0798 6EE5      02175         MOVWF   POSTDEC1
079A 5000      02176         MOVF    r0x01, W
079C 6EE5      02177         MOVWF   POSTDEC1
079E 5000      02178         MOVF    r0x00, W
07A0 6EE5      02179         MOVWF   POSTDEC1
07A2 5000      02180         MOVF    r0x05, W
07A4 6EE5      02181         MOVWF   POSTDEC1
07A6 5000      02182         MOVF    r0x04, W
07A8 6EE5      02183         MOVWF   POSTDEC1
07AA 5000      02184         MOVF    r0x03, W
07AC 6EE5      02185         MOVWF   POSTDEC1
07AE 0E00      02186         MOVLW   UPPER(__str_12)
07B0 6EE5      02187         MOVWF   POSTDEC1
07B2 0E00      02188         MOVLW   HIGH(__str_12)
07B4 6EE5      02189         MOVWF   POSTDEC1
07B6 0E00      02190         MOVLW   LOW(__str_12)
07B8 6EE5      02191         MOVWF   POSTDEC1
07BA 5000      02192         MOVF    r0x08, W
07BC 6EE5      02193         MOVWF   POSTDEC1
07BE 5000      02194         MOVF    r0x07, W
07C0 6EE5      02195         MOVWF   POSTDEC1
07C2 5000      02196         MOVF    r0x06, W
07C4 6EE5      02197         MOVWF   POSTDEC1
07C6 EC00 F000 02198         CALL    _sprintf
07CA 0E0C      02199         MOVLW   0x0c
07CC 26E1      02200         ADDWF   FSR1L, F
07CE D000      02201         BRA     _00354_DS_
07D0 02202 _00324_DS_:
               02203 ;       .line   349; test.c     else sprintf(lcd, "SET ALARM:           %s : %s", h, m);        
07D0 0E00      02204         MOVLW   HIGH(_update_lcd_m_1_1)
07D2 6E00      02205         MOVWF   r0x01
07D4 0E00      02206         MOVLW   LOW(_update_lcd_m_1_1)
07D6 6E00      02207         MOVWF   r0x00
07D8 0E80      02208         MOVLW   0x80
07DA 6E00      02209         MOVWF   r0x02
07DC 0E00      02210         MOVLW   HIGH(_update_lcd_h_1_1)
07DE 6E00      02211         MOVWF   r0x04
07E0 0E00      02212         MOVLW   LOW(_update_lcd_h_1_1)
07E2 6E00      02213         MOVWF   r0x03
07E4 0E80      02214         MOVLW   0x80
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
07E6 6E00      02215         MOVWF   r0x05
07E8 0E00      02216         MOVLW   HIGH(_update_lcd_lcd_1_1)
07EA 6E00      02217         MOVWF   r0x07
07EC 0E00      02218         MOVLW   LOW(_update_lcd_lcd_1_1)
07EE 6E00      02219         MOVWF   r0x06
07F0 0E80      02220         MOVLW   0x80
07F2 6E00      02221         MOVWF   r0x08
07F4 5000      02222         MOVF    r0x02, W
07F6 6EE5      02223         MOVWF   POSTDEC1
07F8 5000      02224         MOVF    r0x01, W
07FA 6EE5      02225         MOVWF   POSTDEC1
07FC 5000      02226         MOVF    r0x00, W
07FE 6EE5      02227         MOVWF   POSTDEC1
0800 5000      02228         MOVF    r0x05, W
0802 6EE5      02229         MOVWF   POSTDEC1
0804 5000      02230         MOVF    r0x04, W
0806 6EE5      02231         MOVWF   POSTDEC1
0808 5000      02232         MOVF    r0x03, W
080A 6EE5      02233         MOVWF   POSTDEC1
080C 0E00      02234         MOVLW   UPPER(__str_13)
080E 6EE5      02235         MOVWF   POSTDEC1
0810 0E00      02236         MOVLW   HIGH(__str_13)
0812 6EE5      02237         MOVWF   POSTDEC1
0814 0E00      02238         MOVLW   LOW(__str_13)
0816 6EE5      02239         MOVWF   POSTDEC1
0818 5000      02240         MOVF    r0x08, W
081A 6EE5      02241         MOVWF   POSTDEC1
081C 5000      02242         MOVF    r0x07, W
081E 6EE5      02243         MOVWF   POSTDEC1
0820 5000      02244         MOVF    r0x06, W
0822 6EE5      02245         MOVWF   POSTDEC1
0824 EC00 F000 02246         CALL    _sprintf
0828 0E0C      02247         MOVLW   0x0c
082A 26E1      02248         ADDWF   FSR1L, F
082C D000      02249         BRA     _00354_DS_
082E 02250 _00332_DS_:
082E 0000      02251         BANKSEL _state
               02252 ;       .line   352; test.c     }else if(state == CONFIG_ALARM_MINUTE){ 
0830 5100      02253         MOVF    _state, W, B
0832 0A08      02254         XORLW   0x08
0834 E100      02255         BNZ     _00388_DS_
0836 0000      02256         BANKSEL (_state + 1)
0838 5100      02257         MOVF    (_state + 1), W, B
083A E000      02258         BZ      _00389_DS_
083C 02259 _00388_DS_:
083C D000      02260         BRA     _00354_DS_
083E 02261 _00389_DS_:
               02262 ;       .line   354; test.c     convert_value(alarm_hour, h);
083E 0E00      02263         MOVLW   HIGH(_update_lcd_h_1_1)
0840 6E00      02264         MOVWF   r0x01
0842 0E00      02265         MOVLW   LOW(_update_lcd_h_1_1)
0844 6E00      02266         MOVWF   r0x00
0846 0E80      02267         MOVLW   0x80
0848 6E00      02268         MOVWF   r0x02
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
084A 5000      02269         MOVF    r0x02, W
084C 6EE5      02270         MOVWF   POSTDEC1
084E 5000      02271         MOVF    r0x01, W
0850 6EE5      02272         MOVWF   POSTDEC1
0852 5000      02273         MOVF    r0x00, W
0854 6EE5      02274         MOVWF   POSTDEC1
0856 0000      02275         BANKSEL (_alarm_hour + 1)
0858 5100      02276         MOVF    (_alarm_hour + 1), W, B
085A 6EE5      02277         MOVWF   POSTDEC1
085C 0000      02278         BANKSEL _alarm_hour
085E 5100      02279         MOVF    _alarm_hour, W, B
0860 6EE5      02280         MOVWF   POSTDEC1
0862 EC00 F000 02281         CALL    _convert_value
0866 0E05      02282         MOVLW   0x05
0868 26E1      02283         ADDWF   FSR1L, F
               02284 ;       .line   355; test.c     convert_value(alarm_minute, m);
086A 0E00      02285         MOVLW   HIGH(_update_lcd_m_1_1)
086C 6E00      02286         MOVWF   r0x01
086E 0E00      02287         MOVLW   LOW(_update_lcd_m_1_1)
0870 6E00      02288         MOVWF   r0x00
0872 0E80      02289         MOVLW   0x80
0874 6E00      02290         MOVWF   r0x02
0876 5000      02291         MOVF    r0x02, W
0878 6EE5      02292         MOVWF   POSTDEC1
087A 5000      02293         MOVF    r0x01, W
087C 6EE5      02294         MOVWF   POSTDEC1
087E 5000      02295         MOVF    r0x00, W
0880 6EE5      02296         MOVWF   POSTDEC1
0882 0000      02297         BANKSEL (_alarm_minute + 1)
0884 5100      02298         MOVF    (_alarm_minute + 1), W, B
0886 6EE5      02299         MOVWF   POSTDEC1
0888 0000      02300         BANKSEL _alarm_minute
088A 5100      02301         MOVF    _alarm_minute, W, B
088C 6EE5      02302         MOVWF   POSTDEC1
088E EC00 F000 02303         CALL    _convert_value
0892 0E05      02304         MOVLW   0x05
0894 26E1      02305         ADDWF   FSR1L, F
0896 0000      02306         BANKSEL _blink
               02307 ;       .line   357; test.c     if(blink) sprintf(lcd, "SET ALARM:           %s :[%s]", h, m);
0898 5100      02308         MOVF    _blink, W, B
089A 0000      02309         BANKSEL (_blink + 1)
089C 1100      02310         IORWF   (_blink + 1), W, B
089E E000      02311         BZ      _00327_DS_
08A0 0E00      02312         MOVLW   HIGH(_update_lcd_m_1_1)
08A2 6E00      02313         MOVWF   r0x01
08A4 0E00      02314         MOVLW   LOW(_update_lcd_m_1_1)
08A6 6E00      02315         MOVWF   r0x00
08A8 0E80      02316         MOVLW   0x80
08AA 6E00      02317         MOVWF   r0x02
08AC 0E00      02318         MOVLW   HIGH(_update_lcd_h_1_1)
08AE 6E00      02319         MOVWF   r0x04
08B0 0E00      02320         MOVLW   LOW(_update_lcd_h_1_1)
08B2 6E00      02321         MOVWF   r0x03
08B4 0E80      02322         MOVLW   0x80
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
08B6 6E00      02323         MOVWF   r0x05
08B8 0E00      02324         MOVLW   HIGH(_update_lcd_lcd_1_1)
08BA 6E00      02325         MOVWF   r0x07
08BC 0E00      02326         MOVLW   LOW(_update_lcd_lcd_1_1)
08BE 6E00      02327         MOVWF   r0x06
08C0 0E80      02328         MOVLW   0x80
08C2 6E00      02329         MOVWF   r0x08
08C4 5000      02330         MOVF    r0x02, W
08C6 6EE5      02331         MOVWF   POSTDEC1
08C8 5000      02332         MOVF    r0x01, W
08CA 6EE5      02333         MOVWF   POSTDEC1
08CC 5000      02334         MOVF    r0x00, W
08CE 6EE5      02335         MOVWF   POSTDEC1
08D0 5000      02336         MOVF    r0x05, W
08D2 6EE5      02337         MOVWF   POSTDEC1
08D4 5000      02338         MOVF    r0x04, W
08D6 6EE5      02339         MOVWF   POSTDEC1
08D8 5000      02340         MOVF    r0x03, W
08DA 6EE5      02341         MOVWF   POSTDEC1
08DC 0E00      02342         MOVLW   UPPER(__str_14)
08DE 6EE5      02343         MOVWF   POSTDEC1
08E0 0E00      02344         MOVLW   HIGH(__str_14)
08E2 6EE5      02345         MOVWF   POSTDEC1
08E4 0E00      02346         MOVLW   LOW(__str_14)
08E6 6EE5      02347         MOVWF   POSTDEC1
08E8 5000      02348         MOVF    r0x08, W
08EA 6EE5      02349         MOVWF   POSTDEC1
08EC 5000      02350         MOVF    r0x07, W
08EE 6EE5      02351         MOVWF   POSTDEC1
08F0 5000      02352         MOVF    r0x06, W
08F2 6EE5      02353         MOVWF   POSTDEC1
08F4 EC00 F000 02354         CALL    _sprintf
08F8 0E0C      02355         MOVLW   0x0c
08FA 26E1      02356         ADDWF   FSR1L, F
08FC D000      02357         BRA     _00354_DS_
08FE 02358 _00327_DS_:
               02359 ;       .line   358; test.c     else sprintf(lcd, "SET ALARM:           %s : %s", h, m);        
08FE 0E00      02360         MOVLW   HIGH(_update_lcd_m_1_1)
0900 6E00      02361         MOVWF   r0x01
0902 0E00      02362         MOVLW   LOW(_update_lcd_m_1_1)
0904 6E00      02363         MOVWF   r0x00
0906 0E80      02364         MOVLW   0x80
0908 6E00      02365         MOVWF   r0x02
090A 0E00      02366         MOVLW   HIGH(_update_lcd_h_1_1)
090C 6E00      02367         MOVWF   r0x04
090E 0E00      02368         MOVLW   LOW(_update_lcd_h_1_1)
0910 6E00      02369         MOVWF   r0x03
0912 0E80      02370         MOVLW   0x80
0914 6E00      02371         MOVWF   r0x05
0916 0E00      02372         MOVLW   HIGH(_update_lcd_lcd_1_1)
0918 6E00      02373         MOVWF   r0x07
091A 0E00      02374         MOVLW   LOW(_update_lcd_lcd_1_1)
091C 6E00      02375         MOVWF   r0x06
091E 0E80      02376         MOVLW   0x80
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0920 6E00      02377         MOVWF   r0x08
0922 5000      02378         MOVF    r0x02, W
0924 6EE5      02379         MOVWF   POSTDEC1
0926 5000      02380         MOVF    r0x01, W
0928 6EE5      02381         MOVWF   POSTDEC1
092A 5000      02382         MOVF    r0x00, W
092C 6EE5      02383         MOVWF   POSTDEC1
092E 5000      02384         MOVF    r0x05, W
0930 6EE5      02385         MOVWF   POSTDEC1
0932 5000      02386         MOVF    r0x04, W
0934 6EE5      02387         MOVWF   POSTDEC1
0936 5000      02388         MOVF    r0x03, W
0938 6EE5      02389         MOVWF   POSTDEC1
093A 0E00      02390         MOVLW   UPPER(__str_13)
093C 6EE5      02391         MOVWF   POSTDEC1
093E 0E00      02392         MOVLW   HIGH(__str_13)
0940 6EE5      02393         MOVWF   POSTDEC1
0942 0E00      02394         MOVLW   LOW(__str_13)
0944 6EE5      02395         MOVWF   POSTDEC1
0946 5000      02396         MOVF    r0x08, W
0948 6EE5      02397         MOVWF   POSTDEC1
094A 5000      02398         MOVF    r0x07, W
094C 6EE5      02399         MOVWF   POSTDEC1
094E 5000      02400         MOVF    r0x06, W
0950 6EE5      02401         MOVWF   POSTDEC1
0952 EC00 F000 02402         CALL    _sprintf
0956 0E0C      02403         MOVLW   0x0c
0958 26E1      02404         ADDWF   FSR1L, F
095A 02405 _00354_DS_:
               02406 ;       .line   362; test.c     DisplayString (0, lcd);
095A 0E00      02407         MOVLW   HIGH(_update_lcd_lcd_1_1)
095C 6E00      02408         MOVWF   r0x01
095E 0E00      02409         MOVLW   LOW(_update_lcd_lcd_1_1)
0960 6E00      02410         MOVWF   r0x00
0962 0E80      02411         MOVLW   0x80
0964 6E00      02412         MOVWF   r0x02
0966 5000      02413         MOVF    r0x02, W
0968 6EE5      02414         MOVWF   POSTDEC1
096A 5000      02415         MOVF    r0x01, W
096C 6EE5      02416         MOVWF   POSTDEC1
096E 5000      02417         MOVF    r0x00, W
0970 6EE5      02418         MOVWF   POSTDEC1
0972 0E00      02419         MOVLW   0x00
0974 6EE5      02420         MOVWF   POSTDEC1
0976 EC00 F000 02421         CALL    _DisplayString
097A 0E04      02422         MOVLW   0x04
097C 26E1      02423         ADDWF   FSR1L, F
097E CFE4 F000 02424         MOVFF   PREINC1, r0x11
0982 CFE4 F000 02425         MOVFF   PREINC1, r0x10
0986 CFE4 F000 02426         MOVFF   PREINC1, r0x0f
098A CFE4 F000 02427         MOVFF   PREINC1, r0x0e
098E CFE4 F000 02428         MOVFF   PREINC1, r0x0d
0992 CFE4 F000 02429         MOVFF   PREINC1, r0x0c
0996 CFE4 F000 02430         MOVFF   PREINC1, r0x0b
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
099A CFE4 F000 02431         MOVFF   PREINC1, r0x0a
099E CFE4 F000 02432         MOVFF   PREINC1, r0x09
09A2 CFE4 F000 02433         MOVFF   PREINC1, r0x08
09A6 CFE4 F000 02434         MOVFF   PREINC1, r0x07
09AA CFE4 F000 02435         MOVFF   PREINC1, r0x06
09AE CFE4 F000 02436         MOVFF   PREINC1, r0x05
09B2 CFE4 F000 02437         MOVFF   PREINC1, r0x04
09B6 CFE4 F000 02438         MOVFF   PREINC1, r0x03
09BA CFE4 F000 02439         MOVFF   PREINC1, r0x02
09BE CFE4 F000 02440         MOVFF   PREINC1, r0x01
09C2 CFE4 F000 02441         MOVFF   PREINC1, r0x00
09C6 CFE4 FFD9 02442         MOVFF   PREINC1, FSR2L
09CA 0012      02443         RETURN  
               02444 
               02445 ; ; Starting pCode block
               02446 S_test__check_alarm     code
0000 02447 _check_alarm:
               02448 ;       .line   257; test.c     void check_alarm(){
0000 CFD9 FFE5 02449         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 02450         MOVFF   FSR1L, FSR2L
0008 0000      02451         BANKSEL _alarm_set
               02452 ;       .line   259; test.c     if(alarm_set && !ring_today && hour == alarm_hour && minute == alarm_minute){
000A 5100      02453         MOVF    _alarm_set, W, B
000C 0000      02454         BANKSEL (_alarm_set + 1)
000E 1100      02455         IORWF   (_alarm_set + 1), W, B
0010 E000      02456         BZ      _00291_DS_
0012 0000      02457         BANKSEL _ring_today
0014 5100      02458         MOVF    _ring_today, W, B
0016 0000      02459         BANKSEL (_ring_today + 1)
0018 1100      02460         IORWF   (_ring_today + 1), W, B
001A E100      02461         BNZ     _00291_DS_
001C 0000      02462         BANKSEL _hour
001E 5100      02463         MOVF    _hour, W, B
0020 0000      02464         BANKSEL _alarm_hour
0022 1900      02465         XORWF   _alarm_hour, W, B
0024 E100      02466         BNZ     _00297_DS_
0026 0000      02467         BANKSEL (_hour + 1)
0028 5100      02468         MOVF    (_hour + 1), W, B
002A 0000      02469         BANKSEL (_alarm_hour + 1)
002C 1900      02470         XORWF   (_alarm_hour + 1), W, B
002E E000      02471         BZ      _00298_DS_
0030 02472 _00297_DS_:
0030 D000      02473         BRA     _00291_DS_
0032 02474 _00298_DS_:
0032 0000      02475         BANKSEL _minute
0034 5100      02476         MOVF    _minute, W, B
0036 0000      02477         BANKSEL _alarm_minute
0038 1900      02478         XORWF   _alarm_minute, W, B
003A E100      02479         BNZ     _00299_DS_
003C 0000      02480         BANKSEL (_minute + 1)
003E 5100      02481         MOVF    (_minute + 1), W, B
0040 0000      02482         BANKSEL (_alarm_minute + 1)
0042 1900      02483         XORWF   (_alarm_minute + 1), W, B
0044 E000      02484         BZ      _00300_DS_
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0046 02485 _00299_DS_:
0046 D000      02486         BRA     _00291_DS_
0048 02487 _00300_DS_:
               02488 ;       .line   261; test.c     alarm_ring = 1;
0048 0E01      02489         MOVLW   0x01
004A 0000      02490         BANKSEL _alarm_ring
004C 6F00      02491         MOVWF   _alarm_ring, B
004E 0000      02492         BANKSEL (_alarm_ring + 1)
0050 6B00      02493         CLRF    (_alarm_ring + 1), B
               02494 ;       .line   262; test.c     ring_today = 1;
0052 0E01      02495         MOVLW   0x01
0054 0000      02496         BANKSEL _ring_today
0056 6F00      02497         MOVWF   _ring_today, B
0058 0000      02498         BANKSEL (_ring_today + 1)
005A 6B00      02499         CLRF    (_ring_today + 1), B
005C 02500 _00291_DS_:
005C CFE4 FFD9 02501         MOVFF   PREINC1, FSR2L
0060 0012      02502         RETURN  
               02503 
               02504 ; ; Starting pCode block
               02505 S_test__timer0_conf     code
0000 02506 _timer0_conf:
               02507 ;       .line   217; test.c     void timer0_conf(){
0000 CFD9 FFE5 02508         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 02509         MOVFF   FSR1L, FSR2L
               02510 ;       .line   218; test.c     T0CONbits.T08BIT = 0;  //use timer0 16-bit counter
0008 9C00      02511         BCF     _T0CONbits, 6
               02512 ;       .line   219; test.c     T0CONbits.T0CS = 0;  //use timer0 instruction cycle clock
000A 9A00      02513         BCF     _T0CONbits, 5
               02514 ;       .line   220; test.c     INTCONbits.TMR0IE = 1; // enable timer0 interrupt
000C 8A00      02515         BSF     _INTCONbits, 5
               02516 ;       .line   221; test.c     T0CONbits.PSA = 0;  //enable timer0 prescaler
000E 9600      02517         BCF     _T0CONbits, 3
               02518 ;       .line   223; test.c     T0CONbits.T0PS2 = 1;
0010 8400      02519         BSF     _T0CONbits, 2
               02520 ;       .line   224; test.c     T0CONbits.T0PS1 = 1;
0012 8200      02521         BSF     _T0CONbits, 1
               02522 ;       .line   225; test.c     T0CONbits.T0PS0 = 0;
0014 9000      02523         BCF     _T0CONbits, 0
               02524 ;       .line   227; test.c     TMR0L = LOW(14364);
0016 0E1C      02525         MOVLW   0x1c
0018 6E00      02526         MOVWF   _TMR0L
               02527 ;       .line   228; test.c     TMR0H = HIGH(14364);
001A 0E38      02528         MOVLW   0x38
001C 6E00      02529         MOVWF   _TMR0H
001E CFE4 FFD9 02530         MOVFF   PREINC1, FSR2L
0022 0012      02531         RETURN  
               02532 
               02533 ; ; Starting pCode block
               02534 S_test__high_isrr       code
0000 02535 _high_isrr:
               02536 ;       .line   57; test.c      void high_isrr (void) interrupt 1{
0000 CFE8 FFE5 02537         MOVFF   WREG, POSTDEC1
0004 CFD8 FFE5 02538         MOVFF   STATUS, POSTDEC1
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0008 CFE0 FFE5 02539         MOVFF   BSR, POSTDEC1
000C CFF3 FFE5 02540         MOVFF   PRODL, POSTDEC1
0010 CFF4 FFE5 02541         MOVFF   PRODH, POSTDEC1
0014 CFE9 FFE5 02542         MOVFF   FSR0L, POSTDEC1
0018 CFEA FFE5 02543         MOVFF   FSR0H, POSTDEC1
001C CFFA FFE5 02544         MOVFF   PCLATH, POSTDEC1
0020 CFFB FFE5 02545         MOVFF   PCLATU, POSTDEC1
0024 CFD9 FFE5 02546         MOVFF   FSR2L, POSTDEC1
0028 CFE1 FFD9 02547         MOVFF   FSR1L, FSR2L
002C C000 FFE5 02548         MOVFF   r0x00, POSTDEC1
0030 C000 FFE5 02549         MOVFF   r0x01, POSTDEC1
               02550 ;       .line   59; test.c      if(INTCONbits.T0IF){
0034 A400      02551         BTFSS   _INTCONbits, 2
0036 D000      02552         BRA     _00188_DS_
               02553 ;       .line   61; test.c      TMR0L = LOW(14364);
0038 0E1C      02554         MOVLW   0x1c
003A 6E00      02555         MOVWF   _TMR0L
               02556 ;       .line   62; test.c      TMR0H = HIGH(14364);
003C 0E38      02557         MOVLW   0x38
003E 6E00      02558         MOVWF   _TMR0H
               02559 ;       .line   64; test.c      INTCONbits.T0IF = 0;
0040 9400      02560         BCF     _INTCONbits, 2
               02561 ;       .line   66; test.c      blink^=1;
0042 0E01      02562         MOVLW   0x01
0044 0000      02563         BANKSEL _blink
0046 1B00      02564         XORWF   _blink, F, B
               02565 ;       .line   67; test.c      update_lcd();
0048 EC00 F000 02566         CALL    _update_lcd
004C 0000      02567         BANKSEL _alarm_ring
               02568 ;       .line   69; test.c      if(alarm_ring){ LED1_IO ^= 1; LED2_IO ^= 1; }
004E 5100      02569         MOVF    _alarm_ring, W, B
0050 0000      02570         BANKSEL (_alarm_ring + 1)
0052 1100      02571         IORWF   (_alarm_ring + 1), W, B
0054 E000      02572         BZ      _00106_DS_
0056 6A00      02573         CLRF    r0x00
0058 B200      02574         BTFSC   _LATJbits, 1
005A 2A00      02575         INCF    r0x00, F
005C 0E01      02576         MOVLW   0x01
005E 1A00      02577         XORWF   r0x00, F
0060 5000      02578         MOVF    r0x00, W
0062 0B01      02579         ANDLW   0x01
0064 44E8      02580         RLNCF   WREG, W
0066 6EF4      02581         MOVWF   PRODH
0068 5000      02582         MOVF    _LATJbits, W
006A 0BFD      02583         ANDLW   0xfd
006C 10F4      02584         IORWF   PRODH, W
006E 6E00      02585         MOVWF   _LATJbits
0070 6A00      02586         CLRF    r0x00
0072 B400      02587         BTFSC   _LATJbits, 2
0074 2A00      02588         INCF    r0x00, F
0076 0E01      02589         MOVLW   0x01
0078 1A00      02590         XORWF   r0x00, F
007A 5000      02591         MOVF    r0x00, W
007C 0B01      02592         ANDLW   0x01
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
007E 44E8      02593         RLNCF   WREG, W
0080 44E8      02594         RLNCF   WREG, W
0082 6EF4      02595         MOVWF   PRODH
0084 5000      02596         MOVF    _LATJbits, W
0086 0BFB      02597         ANDLW   0xfb
0088 10F4      02598         IORWF   PRODH, W
008A 6E00      02599         MOVWF   _LATJbits
008C D000      02600         BRA     _00107_DS_
008E 02601 _00106_DS_:
               02602 ;       .line   70; test.c      else{ LED1_IO = 0; LED2_IO = 0; }
008E 9200      02603         BCF     _LATJbits, 1
0090 9400      02604         BCF     _LATJbits, 2
0092 02605 _00107_DS_:
               02606 ;       .line   71; test.c      if(state == SHOW_TIME) LED0_IO ^=1;
0092 6A00      02607         CLRF    r0x00
0094 0000      02608         BANKSEL _state
0096 5100      02609         MOVF    _state, W, B
0098 0A01      02610         XORLW   0x01
009A E100      02611         BNZ     _00228_DS_
009C 0000      02612         BANKSEL (_state + 1)
009E 5100      02613         MOVF    (_state + 1), W, B
00A0 E100      02614         BNZ     _00228_DS_
00A2 2A00      02615         INCF    r0x00, F
00A4 02616 _00228_DS_:
00A4 5000      02617         MOVF    r0x00, W
00A6 E000      02618         BZ      _00109_DS_
00A8 6A00      02619         CLRF    r0x01
00AA B000      02620         BTFSC   _LATJbits, 0
00AC 2A00      02621         INCF    r0x01, F
00AE 0E01      02622         MOVLW   0x01
00B0 1A00      02623         XORWF   r0x01, F
00B2 5000      02624         MOVF    r0x01, W
00B4 0B01      02625         ANDLW   0x01
00B6 6EF4      02626         MOVWF   PRODH
00B8 5000      02627         MOVF    _LATJbits, W
00BA 0BFE      02628         ANDLW   0xfe
00BC 10F4      02629         IORWF   PRODH, W
00BE 6E00      02630         MOVWF   _LATJbits
00C0 D000      02631         BRA     _00110_DS_
00C2 02632 _00109_DS_:
               02633 ;       .line   72; test.c      else LED0_IO = 0;
00C2 9000      02634         BCF     _LATJbits, 0
00C4 02635 _00110_DS_:
               02636 ;       .line   74; test.c      if(state == SHOW_TIME) check_alarm();
00C4 5000      02637         MOVF    r0x00, W
00C6 E000      02638         BZ      _00112_DS_
00C8 EC00 F000 02639         CALL    _check_alarm
00CC 02640 _00112_DS_:
00CC 0000      02641         BANKSEL _state
               02642 ;       .line   75; test.c      if(state != CONFIG_CLOCK_HOUR && state!=CONFIG_CLOCK_MINUTE) add_second();
00CE 5100      02643         MOVF    _state, W, B
00D0 0A04      02644         XORLW   0x04
00D2 E100      02645         BNZ     _00231_DS_
00D4 0000      02646         BANKSEL (_state + 1)
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00D6 5100      02647         MOVF    (_state + 1), W, B
00D8 E000      02648         BZ      _00114_DS_
00DA 02649 _00231_DS_:
00DA 0000      02650         BANKSEL _state
00DC 5100      02651         MOVF    _state, W, B
00DE 0A05      02652         XORLW   0x05
00E0 E100      02653         BNZ     _00233_DS_
00E2 0000      02654         BANKSEL (_state + 1)
00E4 5100      02655         MOVF    (_state + 1), W, B
00E6 E000      02656         BZ      _00114_DS_
00E8 02657 _00233_DS_:
00E8 EC00 F000 02658         CALL    _add_second
00EC 02659 _00114_DS_:
               02660 ;       .line   77; test.c      INTCON3bits.INT1F  = 0;   //clear INT1 flag
00EC 9000      02661         BCF     _INTCON3bits, 0
00EE D000      02662         BRA     _00190_DS_
00F0 02663 _00188_DS_:
               02664 ;       .line   80; test.c      else if(INTCON3bits.INT1F){
00F0 A000      02665         BTFSS   _INTCON3bits, 0
00F2 D000      02666         BRA     _00185_DS_
00F4 0000      02667         BANKSEL _state
               02668 ;       .line   83; test.c      if(state == SHOW_TIME){                 
00F6 5100      02669         MOVF    _state, W, B
00F8 0A01      02670         XORLW   0x01
00FA E100      02671         BNZ     _00143_DS_
00FC 0000      02672         BANKSEL (_state + 1)
00FE 5100      02673         MOVF    (_state + 1), W, B
0100 E000      02674         BZ      _00235_DS_
0102 02675 _00234_DS_:
0102 D000      02676         BRA     _00143_DS_
0104 02677 _00235_DS_:
0104 0000      02678         BANKSEL _alarm_ring
               02679 ;       .line   85; test.c      if(alarm_ring){
0106 5100      02680         MOVF    _alarm_ring, W, B
0108 0000      02681         BANKSEL (_alarm_ring + 1)
010A 1100      02682         IORWF   (_alarm_ring + 1), W, B
010C E000      02683         BZ      _00117_DS_
010E 0000      02684         BANKSEL _alarm_set
               02685 ;       .line   87; test.c      alarm_set = 0; 
0110 6B00      02686         CLRF    _alarm_set, B
0112 0000      02687         BANKSEL (_alarm_set + 1)
0114 6B00      02688         CLRF    (_alarm_set + 1), B
0116 0000      02689         BANKSEL _alarm_ring
               02690 ;       .line   88; test.c      alarm_ring = 0;
0118 6B00      02691         CLRF    _alarm_ring, B
011A 0000      02692         BANKSEL (_alarm_ring + 1)
011C 6B00      02693         CLRF    (_alarm_ring + 1), B
011E D000      02694         BRA     _00118_DS_
0120 02695 _00117_DS_:
               02696 ;       .line   90; test.c      }else state = CONFIG_CLOCK;
0120 0E02      02697         MOVLW   0x02
0122 0000      02698         BANKSEL _state
0124 6F00      02699         MOVWF   _state, B
0126 0000      02700         BANKSEL (_state + 1)
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0128 6B00      02701         CLRF    (_state + 1), B
012A 02702 _00118_DS_:
               02703 ;       .line   92; test.c      update_lcd();
012A EC00 F000 02704         CALL    _update_lcd
012E D000      02705         BRA     _00144_DS_
0130 02706 _00143_DS_:
0130 0000      02707         BANKSEL _state
               02708 ;       .line   95; test.c      }else if(state == CONFIG_CLOCK){                        
0132 5100      02709         MOVF    _state, W, B
0134 0A02      02710         XORLW   0x02
0136 E100      02711         BNZ     _00140_DS_
0138 0000      02712         BANKSEL (_state + 1)
013A 5100      02713         MOVF    (_state + 1), W, B
013C E000      02714         BZ      _00237_DS_
013E 02715 _00236_DS_:
013E D000      02716         BRA     _00140_DS_
0140 02717 _00237_DS_:
               02718 ;       .line   97; test.c      state = CONFIG_ALARM;
0140 0E03      02719         MOVLW   0x03
0142 0000      02720         BANKSEL _state
0144 6F00      02721         MOVWF   _state, B
0146 0000      02722         BANKSEL (_state + 1)
0148 6B00      02723         CLRF    (_state + 1), B
               02724 ;       .line   98; test.c      update_lcd();
014A EC00 F000 02725         CALL    _update_lcd
014E D000      02726         BRA     _00144_DS_
0150 02727 _00140_DS_:
0150 0000      02728         BANKSEL _state
               02729 ;       .line   101; test.c     }else if(state == CONFIG_ALARM){                        
0152 5100      02730         MOVF    _state, W, B
0154 0A03      02731         XORLW   0x03
0156 E100      02732         BNZ     _00137_DS_
0158 0000      02733         BANKSEL (_state + 1)
015A 5100      02734         MOVF    (_state + 1), W, B
015C E000      02735         BZ      _00239_DS_
015E 02736 _00238_DS_:
015E D000      02737         BRA     _00137_DS_
0160 02738 _00239_DS_:
               02739 ;       .line   103; test.c     state = SHOW_TIME;
0160 0E01      02740         MOVLW   0x01
0162 0000      02741         BANKSEL _state
0164 6F00      02742         MOVWF   _state, B
0166 0000      02743         BANKSEL (_state + 1)
0168 6B00      02744         CLRF    (_state + 1), B
               02745 ;       .line   104; test.c     update_lcd();
016A EC00 F000 02746         CALL    _update_lcd
016E D000      02747         BRA     _00144_DS_
0170 02748 _00137_DS_:
0170 0000      02749         BANKSEL _state
               02750 ;       .line   107; test.c     }else if(state == CONFIG_CLOCK_HOUR){                   
0172 5100      02751         MOVF    _state, W, B
0174 0A04      02752         XORLW   0x04
0176 E100      02753         BNZ     _00134_DS_
0178 0000      02754         BANKSEL (_state + 1)
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 52


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
017A 5100      02755         MOVF    (_state + 1), W, B
017C E000      02756         BZ      _00241_DS_
017E 02757 _00240_DS_:
017E D000      02758         BRA     _00134_DS_
0180 02759 _00241_DS_:
               02760 ;       .line   109; test.c     state = CONFIG_CLOCK_MINUTE;
0180 0E05      02761         MOVLW   0x05
0182 0000      02762         BANKSEL _state
0184 6F00      02763         MOVWF   _state, B
0186 0000      02764         BANKSEL (_state + 1)
0188 6B00      02765         CLRF    (_state + 1), B
               02766 ;       .line   110; test.c     update_lcd();
018A EC00 F000 02767         CALL    _update_lcd
018E D000      02768         BRA     _00144_DS_
0190 02769 _00134_DS_:
0190 0000      02770         BANKSEL _state
               02771 ;       .line   113; test.c     }else if(state == CONFIG_CLOCK_MINUTE){         
0192 5100      02772         MOVF    _state, W, B
0194 0A05      02773         XORLW   0x05
0196 E100      02774         BNZ     _00131_DS_
0198 0000      02775         BANKSEL (_state + 1)
019A 5100      02776         MOVF    (_state + 1), W, B
019C E000      02777         BZ      _00243_DS_
019E 02778 _00242_DS_:
019E D000      02779         BRA     _00131_DS_
01A0 02780 _00243_DS_:
01A0 0000      02781         BANKSEL _ring_today
               02782 ;       .line   115; test.c     ring_today = 0;
01A2 6B00      02783         CLRF    _ring_today, B
01A4 0000      02784         BANKSEL (_ring_today + 1)
01A6 6B00      02785         CLRF    (_ring_today + 1), B
01A8 0000      02786         BANKSEL _second
               02787 ;       .line   116; test.c     second = 0;
01AA 6B00      02788         CLRF    _second, B
01AC 0000      02789         BANKSEL (_second + 1)
01AE 6B00      02790         CLRF    (_second + 1), B
               02791 ;       .line   117; test.c     state = SHOW_TIME;
01B0 0E01      02792         MOVLW   0x01
01B2 0000      02793         BANKSEL _state
01B4 6F00      02794         MOVWF   _state, B
01B6 0000      02795         BANKSEL (_state + 1)
01B8 6B00      02796         CLRF    (_state + 1), B
               02797 ;       .line   118; test.c     update_lcd();
01BA EC00 F000 02798         CALL    _update_lcd
01BE D000      02799         BRA     _00144_DS_
01C0 02800 _00131_DS_:
01C0 0000      02801         BANKSEL _state
               02802 ;       .line   121; test.c     }else if(state == CONFIG_ALARM_ON_OFF){                 
01C2 5100      02803         MOVF    _state, W, B
01C4 0A06      02804         XORLW   0x06
01C6 E100      02805         BNZ     _00128_DS_
01C8 0000      02806         BANKSEL (_state + 1)
01CA 5100      02807         MOVF    (_state + 1), W, B
01CC E000      02808         BZ      _00245_DS_
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 53


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
01CE 02809 _00244_DS_:
01CE D000      02810         BRA     _00128_DS_
01D0 02811 _00245_DS_:
01D0 0000      02812         BANKSEL _alarm_set
               02813 ;       .line   123; test.c     if(alarm_set) state = CONFIG_ALARM_HOUR;
01D2 5100      02814         MOVF    _alarm_set, W, B
01D4 0000      02815         BANKSEL (_alarm_set + 1)
01D6 1100      02816         IORWF   (_alarm_set + 1), W, B
01D8 E000      02817         BZ      _00120_DS_
01DA 0E07      02818         MOVLW   0x07
01DC 0000      02819         BANKSEL _state
01DE 6F00      02820         MOVWF   _state, B
01E0 0000      02821         BANKSEL (_state + 1)
01E2 6B00      02822         CLRF    (_state + 1), B
01E4 D000      02823         BRA     _00121_DS_
01E6 02824 _00120_DS_:
               02825 ;       .line   124; test.c     else state = SHOW_TIME;
01E6 0E01      02826         MOVLW   0x01
01E8 0000      02827         BANKSEL _state
01EA 6F00      02828         MOVWF   _state, B
01EC 0000      02829         BANKSEL (_state + 1)
01EE 6B00      02830         CLRF    (_state + 1), B
01F0 02831 _00121_DS_:
               02832 ;       .line   126; test.c     update_lcd();
01F0 EC00 F000 02833         CALL    _update_lcd
01F4 D000      02834         BRA     _00144_DS_
01F6 02835 _00128_DS_:
01F6 0000      02836         BANKSEL _state
               02837 ;       .line   129; test.c     }else if(state == CONFIG_ALARM_HOUR){                   
01F8 5100      02838         MOVF    _state, W, B
01FA 0A07      02839         XORLW   0x07
01FC E100      02840         BNZ     _00125_DS_
01FE 0000      02841         BANKSEL (_state + 1)
0200 5100      02842         MOVF    (_state + 1), W, B
0202 E000      02843         BZ      _00247_DS_
0204 02844 _00246_DS_:
0204 D000      02845         BRA     _00125_DS_
0206 02846 _00247_DS_:
               02847 ;       .line   131; test.c     state = CONFIG_ALARM_MINUTE;
0206 0E08      02848         MOVLW   0x08
0208 0000      02849         BANKSEL _state
020A 6F00      02850         MOVWF   _state, B
020C 0000      02851         BANKSEL (_state + 1)
020E 6B00      02852         CLRF    (_state + 1), B
               02853 ;       .line   132; test.c     update_lcd();
0210 EC00 F000 02854         CALL    _update_lcd
0214 D000      02855         BRA     _00144_DS_
0216 02856 _00125_DS_:
0216 0000      02857         BANKSEL _state
               02858 ;       .line   135; test.c     }else if(state == CONFIG_ALARM_MINUTE){         
0218 5100      02859         MOVF    _state, W, B
021A 0A08      02860         XORLW   0x08
021C E100      02861         BNZ     _00144_DS_
021E 0000      02862         BANKSEL (_state + 1)
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 54


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0220 5100      02863         MOVF    (_state + 1), W, B
0222 E000      02864         BZ      _00249_DS_
0224 02865 _00248_DS_:
0224 D000      02866         BRA     _00144_DS_
0226 02867 _00249_DS_:
0226 0000      02868         BANKSEL _ring_today
               02869 ;       .line   137; test.c     ring_today = 0;
0228 6B00      02870         CLRF    _ring_today, B
022A 0000      02871         BANKSEL (_ring_today + 1)
022C 6B00      02872         CLRF    (_ring_today + 1), B
               02873 ;       .line   138; test.c     state = SHOW_TIME;
022E 0E01      02874         MOVLW   0x01
0230 0000      02875         BANKSEL _state
0232 6F00      02876         MOVWF   _state, B
0234 0000      02877         BANKSEL (_state + 1)
0236 6B00      02878         CLRF    (_state + 1), B
               02879 ;       .line   139; test.c     update_lcd();
0238 EC00 F000 02880         CALL    _update_lcd
023C 02881 _00144_DS_:
               02882 ;       .line   144; test.c     INTCON3bits.INT1F = 0;          
023C 9000      02883         BCF     _INTCON3bits, 0
023E D000      02884         BRA     _00190_DS_
0240 02885 _00185_DS_:
               02886 ;       .line   147; test.c     }else if(INTCON3bits.INT3F == 1){       
0240 6A00      02887         CLRF    r0x00
0242 B400      02888         BTFSC   _INTCON3bits, 2
0244 2A00      02889         INCF    r0x00, F
0246 5000      02890         MOVF    r0x00, W
0248 0A01      02891         XORLW   0x01
024A E000      02892         BZ      _00251_DS_
024C D000      02893         BRA     _00190_DS_
024E 02894 _00251_DS_:
024E 0000      02895         BANKSEL _state
               02896 ;       .line   150; test.c     if(state==SHOW_TIME){
0250 5100      02897         MOVF    _state, W, B
0252 0A01      02898         XORLW   0x01
0254 E100      02899         BNZ     _00180_DS_
0256 0000      02900         BANKSEL (_state + 1)
0258 5100      02901         MOVF    (_state + 1), W, B
025A E000      02902         BZ      _00253_DS_
025C 02903 _00252_DS_:
025C D000      02904         BRA     _00180_DS_
025E 02905 _00253_DS_:
025E 0000      02906         BANKSEL _alarm_ring
               02907 ;       .line   152; test.c     alarm_ring = 0;
0260 6B00      02908         CLRF    _alarm_ring, B
0262 0000      02909         BANKSEL (_alarm_ring + 1)
0264 6B00      02910         CLRF    (_alarm_ring + 1), B
0266 0000      02911         BANKSEL _alarm_set
               02912 ;       .line   153; test.c     if(alarm_set) alarm_set = 0;
0268 5100      02913         MOVF    _alarm_set, W, B
026A 0000      02914         BANKSEL (_alarm_set + 1)
026C 1100      02915         IORWF   (_alarm_set + 1), W, B
026E E000      02916         BZ      _00146_DS_
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 55


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0270 0000      02917         BANKSEL _alarm_set
0272 6B00      02918         CLRF    _alarm_set, B
0274 0000      02919         BANKSEL (_alarm_set + 1)
0276 6B00      02920         CLRF    (_alarm_set + 1), B
0278 D000      02921         BRA     _00147_DS_
027A 02922 _00146_DS_:
               02923 ;       .line   154; test.c     else alarm_set = 1;
027A 0E01      02924         MOVLW   0x01
027C 0000      02925         BANKSEL _alarm_set
027E 6F00      02926         MOVWF   _alarm_set, B
0280 0000      02927         BANKSEL (_alarm_set + 1)
0282 6B00      02928         CLRF    (_alarm_set + 1), B
0284 02929 _00147_DS_:
               02930 ;       .line   155; test.c     update_lcd();
0284 EC00 F000 02931         CALL    _update_lcd
0288 D000      02932         BRA     _00181_DS_
028A 02933 _00180_DS_:
028A 0000      02934         BANKSEL _state
               02935 ;       .line   158; test.c     }else if(state == CONFIG_CLOCK){                        
028C 5100      02936         MOVF    _state, W, B
028E 0A02      02937         XORLW   0x02
0290 E100      02938         BNZ     _00177_DS_
0292 0000      02939         BANKSEL (_state + 1)
0294 5100      02940         MOVF    (_state + 1), W, B
0296 E000      02941         BZ      _00255_DS_
0298 02942 _00254_DS_:
0298 D000      02943         BRA     _00177_DS_
029A 02944 _00255_DS_:
               02945 ;       .line   160; test.c     state = CONFIG_CLOCK_HOUR;
029A 0E04      02946         MOVLW   0x04
029C 0000      02947         BANKSEL _state
029E 6F00      02948         MOVWF   _state, B
02A0 0000      02949         BANKSEL (_state + 1)
02A2 6B00      02950         CLRF    (_state + 1), B
               02951 ;       .line   161; test.c     update_lcd();
02A4 EC00 F000 02952         CALL    _update_lcd
02A8 D000      02953         BRA     _00181_DS_
02AA 02954 _00177_DS_:
02AA 0000      02955         BANKSEL _state
               02956 ;       .line   164; test.c     }else if(state == CONFIG_ALARM){                        
02AC 5100      02957         MOVF    _state, W, B
02AE 0A03      02958         XORLW   0x03
02B0 E100      02959         BNZ     _00174_DS_
02B2 0000      02960         BANKSEL (_state + 1)
02B4 5100      02961         MOVF    (_state + 1), W, B
02B6 E000      02962         BZ      _00257_DS_
02B8 02963 _00256_DS_:
02B8 D000      02964         BRA     _00174_DS_
02BA 02965 _00257_DS_:
               02966 ;       .line   166; test.c     state = CONFIG_ALARM_ON_OFF;
02BA 0E06      02967         MOVLW   0x06
02BC 0000      02968         BANKSEL _state
02BE 6F00      02969         MOVWF   _state, B
02C0 0000      02970         BANKSEL (_state + 1)
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 56


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
02C2 6B00      02971         CLRF    (_state + 1), B
               02972 ;       .line   167; test.c     update_lcd();
02C4 EC00 F000 02973         CALL    _update_lcd
02C8 D000      02974         BRA     _00181_DS_
02CA 02975 _00174_DS_:
02CA 0000      02976         BANKSEL _state
               02977 ;       .line   170; test.c     }else if(state == CONFIG_CLOCK_HOUR){                   
02CC 5100      02978         MOVF    _state, W, B
02CE 0A04      02979         XORLW   0x04
02D0 E100      02980         BNZ     _00171_DS_
02D2 0000      02981         BANKSEL (_state + 1)
02D4 5100      02982         MOVF    (_state + 1), W, B
02D6 E000      02983         BZ      _00259_DS_
02D8 02984 _00258_DS_:
02D8 D000      02985         BRA     _00171_DS_
02DA 02986 _00259_DS_:
02DA 0000      02987         BANKSEL _hour
               02988 ;       .line   172; test.c     hour++;
02DC 2B00      02989         INCF    _hour, F, B
02DE E300      02990         BNC     _40466_DS_
02E0 0000      02991         BANKSEL (_hour + 1)
02E2 2B00      02992         INCF    (_hour + 1), F, B
02E4 02993 _40466_DS_:
02E4 0000      02994         BANKSEL (_hour + 1)
               02995 ;       .line   173; test.c     if(hour>=24) hour = 0;
02E6 5100      02996         MOVF    (_hour + 1), W, B
02E8 0F80      02997         ADDLW   0x80
02EA 0F80      02998         ADDLW   0x80
02EC E100      02999         BNZ     _00260_DS_
02EE 0E18      03000         MOVLW   0x18
02F0 0000      03001         BANKSEL _hour
02F2 5D00      03002         SUBWF   _hour, W, B
02F4 03003 _00260_DS_:
02F4 E300      03004         BNC     _00149_DS_
02F6 0000      03005         BANKSEL _hour
02F8 6B00      03006         CLRF    _hour, B
02FA 0000      03007         BANKSEL (_hour + 1)
02FC 6B00      03008         CLRF    (_hour + 1), B
02FE 03009 _00149_DS_:
               03010 ;       .line   175; test.c     update_lcd();
02FE EC00 F000 03011         CALL    _update_lcd
0302 D000      03012         BRA     _00181_DS_
0304 03013 _00171_DS_:
0304 0000      03014         BANKSEL _state
               03015 ;       .line   178; test.c     }else if(state == CONFIG_CLOCK_MINUTE){         
0306 5100      03016         MOVF    _state, W, B
0308 0A05      03017         XORLW   0x05
030A E100      03018         BNZ     _00168_DS_
030C 0000      03019         BANKSEL (_state + 1)
030E 5100      03020         MOVF    (_state + 1), W, B
0310 E000      03021         BZ      _00262_DS_
0312 03022 _00261_DS_:
0312 D000      03023         BRA     _00168_DS_
0314 03024 _00262_DS_:
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 57


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0314 0000      03025         BANKSEL _minute
               03026 ;       .line   180; test.c     minute++;
0316 2B00      03027         INCF    _minute, F, B
0318 E300      03028         BNC     _50467_DS_
031A 0000      03029         BANKSEL (_minute + 1)
031C 2B00      03030         INCF    (_minute + 1), F, B
031E 03031 _50467_DS_:
031E 0000      03032         BANKSEL (_minute + 1)
               03033 ;       .line   181; test.c     if(minute>=60) minute = 0;
0320 5100      03034         MOVF    (_minute + 1), W, B
0322 0F80      03035         ADDLW   0x80
0324 0F80      03036         ADDLW   0x80
0326 E100      03037         BNZ     _00263_DS_
0328 0E3C      03038         MOVLW   0x3c
032A 0000      03039         BANKSEL _minute
032C 5D00      03040         SUBWF   _minute, W, B
032E 03041 _00263_DS_:
032E E300      03042         BNC     _00151_DS_
0330 0000      03043         BANKSEL _minute
0332 6B00      03044         CLRF    _minute, B
0334 0000      03045         BANKSEL (_minute + 1)
0336 6B00      03046         CLRF    (_minute + 1), B
0338 03047 _00151_DS_:
               03048 ;       .line   183; test.c     update_lcd();
0338 EC00 F000 03049         CALL    _update_lcd
033C D000      03050         BRA     _00181_DS_
033E 03051 _00168_DS_:
033E 0000      03052         BANKSEL _state
               03053 ;       .line   186; test.c     }else if(state == CONFIG_ALARM_ON_OFF){                 
0340 5100      03054         MOVF    _state, W, B
0342 0A06      03055         XORLW   0x06
0344 E100      03056         BNZ     _00165_DS_
0346 0000      03057         BANKSEL (_state + 1)
0348 5100      03058         MOVF    (_state + 1), W, B
034A E000      03059         BZ      _00265_DS_
034C 03060 _00264_DS_:
034C D000      03061         BRA     _00165_DS_
034E 03062 _00265_DS_:
034E 0000      03063         BANKSEL _alarm_set
               03064 ;       .line   188; test.c     if(alarm_set) alarm_set = 0;
0350 5100      03065         MOVF    _alarm_set, W, B
0352 0000      03066         BANKSEL (_alarm_set + 1)
0354 1100      03067         IORWF   (_alarm_set + 1), W, B
0356 E000      03068         BZ      _00153_DS_
0358 0000      03069         BANKSEL _alarm_set
035A 6B00      03070         CLRF    _alarm_set, B
035C 0000      03071         BANKSEL (_alarm_set + 1)
035E 6B00      03072         CLRF    (_alarm_set + 1), B
0360 D000      03073         BRA     _00154_DS_
0362 03074 _00153_DS_:
               03075 ;       .line   189; test.c     else alarm_set = 1;
0362 0E01      03076         MOVLW   0x01
0364 0000      03077         BANKSEL _alarm_set
0366 6F00      03078         MOVWF   _alarm_set, B
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 58


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0368 0000      03079         BANKSEL (_alarm_set + 1)
036A 6B00      03080         CLRF    (_alarm_set + 1), B
036C 03081 _00154_DS_:
               03082 ;       .line   190; test.c     update_lcd();
036C EC00 F000 03083         CALL    _update_lcd
0370 D000      03084         BRA     _00181_DS_
0372 03085 _00165_DS_:
0372 0000      03086         BANKSEL _state
               03087 ;       .line   193; test.c     }else if(state == CONFIG_ALARM_HOUR){                   
0374 5100      03088         MOVF    _state, W, B
0376 0A07      03089         XORLW   0x07
0378 E100      03090         BNZ     _00162_DS_
037A 0000      03091         BANKSEL (_state + 1)
037C 5100      03092         MOVF    (_state + 1), W, B
037E E000      03093         BZ      _00267_DS_
0380 03094 _00266_DS_:
0380 D000      03095         BRA     _00162_DS_
0382 03096 _00267_DS_:
0382 0000      03097         BANKSEL _alarm_hour
               03098 ;       .line   195; test.c     alarm_hour++;
0384 2B00      03099         INCF    _alarm_hour, F, B
0386 E300      03100         BNC     _60468_DS_
0388 0000      03101         BANKSEL (_alarm_hour + 1)
038A 2B00      03102         INCF    (_alarm_hour + 1), F, B
038C 03103 _60468_DS_:
038C 0000      03104         BANKSEL (_alarm_hour + 1)
               03105 ;       .line   196; test.c     if(alarm_hour>=24) alarm_hour = 0;
038E 5100      03106         MOVF    (_alarm_hour + 1), W, B
0390 0F80      03107         ADDLW   0x80
0392 0F80      03108         ADDLW   0x80
0394 E100      03109         BNZ     _00268_DS_
0396 0E18      03110         MOVLW   0x18
0398 0000      03111         BANKSEL _alarm_hour
039A 5D00      03112         SUBWF   _alarm_hour, W, B
039C 03113 _00268_DS_:
039C E300      03114         BNC     _00156_DS_
039E 0000      03115         BANKSEL _alarm_hour
03A0 6B00      03116         CLRF    _alarm_hour, B
03A2 0000      03117         BANKSEL (_alarm_hour + 1)
03A4 6B00      03118         CLRF    (_alarm_hour + 1), B
03A6 03119 _00156_DS_:
               03120 ;       .line   198; test.c     update_lcd();
03A6 EC00 F000 03121         CALL    _update_lcd
03AA D000      03122         BRA     _00181_DS_
03AC 03123 _00162_DS_:
03AC 0000      03124         BANKSEL _state
               03125 ;       .line   201; test.c     }else if(state == CONFIG_ALARM_MINUTE){         
03AE 5100      03126         MOVF    _state, W, B
03B0 0A08      03127         XORLW   0x08
03B2 E100      03128         BNZ     _00181_DS_
03B4 0000      03129         BANKSEL (_state + 1)
03B6 5100      03130         MOVF    (_state + 1), W, B
03B8 E000      03131         BZ      _00270_DS_
03BA 03132 _00269_DS_:
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 59


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
03BA D000      03133         BRA     _00181_DS_
03BC 03134 _00270_DS_:
03BC 0000      03135         BANKSEL _alarm_minute
               03136 ;       .line   203; test.c     alarm_minute++;
03BE 2B00      03137         INCF    _alarm_minute, F, B
03C0 E300      03138         BNC     _70469_DS_
03C2 0000      03139         BANKSEL (_alarm_minute + 1)
03C4 2B00      03140         INCF    (_alarm_minute + 1), F, B
03C6 03141 _70469_DS_:
03C6 0000      03142         BANKSEL (_alarm_minute + 1)
               03143 ;       .line   204; test.c     if(alarm_minute>=60) alarm_minute = 0;
03C8 5100      03144         MOVF    (_alarm_minute + 1), W, B
03CA 0F80      03145         ADDLW   0x80
03CC 0F80      03146         ADDLW   0x80
03CE E100      03147         BNZ     _00271_DS_
03D0 0E3C      03148         MOVLW   0x3c
03D2 0000      03149         BANKSEL _alarm_minute
03D4 5D00      03150         SUBWF   _alarm_minute, W, B
03D6 03151 _00271_DS_:
03D6 E300      03152         BNC     _00158_DS_
03D8 0000      03153         BANKSEL _alarm_minute
03DA 6B00      03154         CLRF    _alarm_minute, B
03DC 0000      03155         BANKSEL (_alarm_minute + 1)
03DE 6B00      03156         CLRF    (_alarm_minute + 1), B
03E0 03157 _00158_DS_:
               03158 ;       .line   206; test.c     update_lcd();
03E0 EC00 F000 03159         CALL    _update_lcd
03E4 03160 _00181_DS_:
               03161 ;       .line   211; test.c     INTCON3bits.INT3F  = 0;         
03E4 9400      03162         BCF     _INTCON3bits, 2
03E6 03163 _00190_DS_:
03E6 CFE4 F000 03164         MOVFF   PREINC1, r0x01
03EA CFE4 F000 03165         MOVFF   PREINC1, r0x00
03EE CFE4 FFD9 03166         MOVFF   PREINC1, FSR2L
03F2 CFE4 FFFB 03167         MOVFF   PREINC1, PCLATU
03F6 CFE4 FFFA 03168         MOVFF   PREINC1, PCLATH
03FA CFE4 FFEA 03169         MOVFF   PREINC1, FSR0H
03FE CFE4 FFE9 03170         MOVFF   PREINC1, FSR0L
0402 CFE4 FFF4 03171         MOVFF   PREINC1, PRODH
0406 CFE4 FFF3 03172         MOVFF   PREINC1, PRODL
040A CFE4 FFE0 03173         MOVFF   PREINC1, BSR
040E CFE4 FFD8 03174         MOVFF   PREINC1, STATUS
0412 CFE4 FFE8 03175         MOVFF   PREINC1, WREG
0416 0010      03176         RETFIE  
               03177 
               03178 ; ; Starting pCode block
0418 03179 __str_0:
0418 5320 4154 03180         DB      0x20, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x2e, 0x2e, 0x2e
     5452 4E49 
     2E47 2E2E 
0424 2020 2020 03181         DB      0x20, 0x20, 0x20, 0x20, 0x00
     0000      
               03182 ; ; Starting pCode block
042A 03183 __str_1:
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 60


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
042A 2120 2021 03184         DB      0x20, 0x21, 0x21, 0x20, 0x25, 0x73, 0x3a, 0x25, 0x73, 0x3a, 0x25, 0x73
     7325 253A 
     3A73 7325 
0436 2120 2021 03185         DB      0x20, 0x21, 0x21, 0x20, 0x20, 0x57, 0x41, 0x4b, 0x45, 0x20, 0x55, 0x50
     5720 4B41 
     2045 5055 
0442 2021 5544 03186         DB      0x21, 0x20, 0x44, 0x55, 0x44, 0x45, 0x21, 0x20, 0x00
     4544 2021 
     0000      
               03187 ; ; Starting pCode block
044C 03188 __str_2:
044C 2020 2020 03189         DB      0x20, 0x20, 0x20, 0x20, 0x25, 0x73, 0x3a, 0x25, 0x73, 0x3a, 0x25, 0x73
     7325 253A 
     3A73 7325 
0458 2020 2020 03190         DB      0x20, 0x20, 0x20, 0x20, 0x20, 0x57, 0x41, 0x4b, 0x45, 0x20, 0x55, 0x50
     5720 4B41 
     2045 5055 
0464 2021 5544 03191         DB      0x21, 0x20, 0x44, 0x55, 0x44, 0x45, 0x21, 0x20, 0x00
     4544 2021 
     0000      
               03192 ; ; Starting pCode block
046E 03193 __str_3:
046E 2020 2020 03194         DB      0x20, 0x20, 0x20, 0x20, 0x25, 0x73, 0x3a, 0x25, 0x73, 0x3a, 0x25, 0x73
     7325 253A 
     3A73 7325 
047A 2020 2020 03195         DB      0x20, 0x20, 0x20, 0x20, 0x20, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x20, 0x20
     4120 414C 
     4D52 2020 
0486 255B 3A73 03196         DB      0x5b, 0x25, 0x73, 0x3a, 0x25, 0x73, 0x5d, 0x00
     7325 005D 
               03197 ; ; Starting pCode block
048E 03198 __str_4:
048E 2020 2020 03199         DB      0x20, 0x20, 0x20, 0x20, 0x25, 0x73, 0x3a, 0x25, 0x73, 0x3a, 0x25, 0x73
     7325 253A 
     3A73 7325 
049A 2020 2020 03200         DB      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x41, 0x4c, 0x41, 0x52, 0x4d
     2020 4120 
     414C 4D52 
04A6 203A 464F 03201         DB      0x3a, 0x20, 0x4f, 0x46, 0x46, 0x00
     0046      
               03202 ; ; Starting pCode block
04AC 03203 __str_5:
04AC 2020 2020 03204         DB      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x4d, 0x45, 0x4e, 0x55, 0x20, 0x20
     2020 454D 
     554E 2020 
04B8 2020 2020 03205         DB      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45
     2020 4843 
     4E41 4547 
04C4 4320 4F4C 03206         DB      0x20, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x3f, 0x00
     4B43 003F 
               03207 ; ; Starting pCode block
04CC 03208 __str_6:
04CC 2020 2020 03209         DB      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x4d, 0x45, 0x4e, 0x55, 0x20, 0x20
     2020 454D 
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 61


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     554E 2020 
04D8 2020 2020 03210         DB      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45
     2020 4843 
     4E41 4547 
04E4 4120 414C 03211         DB      0x20, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x3f, 0x00
     4D52 003F 
               03212 ; ; Starting pCode block
04EC 03213 __str_7:
04EC 4553 2054 03214         DB      0x53, 0x45, 0x54, 0x20, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x3a, 0x20, 0x20
     4C43 434F 
     3A4B 2020 
04F8 2020 2020 03215         DB      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5b, 0x25, 0x73, 0x5d
     2020 2020 
     255B 5D73 
0504 203A 7325 03216         DB      0x3a, 0x20, 0x25, 0x73, 0x00
     0000      
               03217 ; ; Starting pCode block
050A 03218 __str_8:
050A 4553 2054 03219         DB      0x53, 0x45, 0x54, 0x20, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x3a, 0x20, 0x20
     4C43 434F 
     3A4B 2020 
0516 2020 2020 03220         DB      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x73, 0x20
     2020 2020 
     2520 2073 
0522 203A 7325 03221         DB      0x3a, 0x20, 0x25, 0x73, 0x00
     0000      
               03222 ; ; Starting pCode block
0528 03223 __str_9:
0528 4553 2054 03224         DB      0x53, 0x45, 0x54, 0x20, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x3a, 0x20, 0x20
     4C43 434F 
     3A4B 2020 
0534 2020 2020 03225         DB      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x73, 0x20
     2020 2020 
     2520 2073 
0540 5B3A 7325 03226         DB      0x3a, 0x5b, 0x25, 0x73, 0x5d, 0x00
     005D      
               03227 ; ; Starting pCode block
0546 03228 __str_10:
0546 4553 2054 03229         DB      0x53, 0x45, 0x54, 0x20, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x3a, 0x20, 0x20
     4C41 5241 
     3A4D 2020 
0552 2020 2020 03230         DB      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5b, 0x4f
     2020 2020 
     2020 4F5B 
055E 204E 005D 03231         DB      0x4e, 0x20, 0x5d, 0x00
               03232 ; ; Starting pCode block
0562 03233 __str_11:
0562 4553 2054 03234         DB      0x53, 0x45, 0x54, 0x20, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x3a, 0x20, 0x20
     4C41 5241 
     3A4D 2020 
056E 2020 2020 03235         DB      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5b, 0x4f
     2020 2020 
     2020 4F5B 
057A 4646 005D 03236         DB      0x46, 0x46, 0x5d, 0x00
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 62


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               03237 ; ; Starting pCode block
057E 03238 __str_12:
057E 4553 2054 03239         DB      0x53, 0x45, 0x54, 0x20, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x3a, 0x20, 0x20
     4C41 5241 
     3A4D 2020 
058A 2020 2020 03240         DB      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5b, 0x25, 0x73, 0x5d
     2020 2020 
     255B 5D73 
0596 203A 7325 03241         DB      0x3a, 0x20, 0x25, 0x73, 0x00
     0000      
               03242 ; ; Starting pCode block
059C 03243 __str_13:
059C 4553 2054 03244         DB      0x53, 0x45, 0x54, 0x20, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x3a, 0x20, 0x20
     4C41 5241 
     3A4D 2020 
05A8 2020 2020 03245         DB      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x73, 0x20
     2020 2020 
     2520 2073 
05B4 203A 7325 03246         DB      0x3a, 0x20, 0x25, 0x73, 0x00
     0000      
               03247 ; ; Starting pCode block
05BA 03248 __str_14:
05BA 4553 2054 03249         DB      0x53, 0x45, 0x54, 0x20, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x3a, 0x20, 0x20
     4C41 5241 
     3A4D 2020 
05C6 2020 2020 03250         DB      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x73, 0x20
     2020 2020 
     2520 2073 
05D2 5B3A 7325 03251         DB      0x3a, 0x5b, 0x25, 0x73, 0x5d, 0x00
     005D      
               03252 ; ; Starting pCode block
05D8 03253 __str_15:
05D8 2530 0064 03254         DB      0x30, 0x25, 0x64, 0x00
               03255 ; ; Starting pCode block
05DC 03256 __str_16:
05DC 6425 0000 03257         DB      0x25, 0x64, 0x00
               03258 
               03259 
               03260 ; Statistics:
               03261 ; code size:     5194 (0x144a) bytes ( 3.96%)
               03262 ;                2597 (0x0a25) words
               03263 ; udata size:      53 (0x0035) bytes ( 1.38%)
               03264 ; access size:     22 (0x0016) bytes
               03265 
               03266 
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 63


SYMBOL TABLE
  LABEL                             VALUE 

BSR                               00000FE0
FSR0H                             00000FEA
FSR0L                             00000FE9
FSR1L                             00000FE1
FSR2L                             00000FD9
INDF0                             00000FEF
PCLATH                            00000FFA
PCLATU                            00000FFB
PLUSW2                            00000FDB
POSTDEC1                          00000FE5
PREINC1                           00000FE4
PRODH                             00000FF4
PRODL                             00000FF3
STATUS                            00000FD8
WREG                              00000FE8
_00106_DS_                        0000008E
_00107_DS_                        00000092
_00109_DS_                        000000C2
_00110_DS_                        000000C4
_00112_DS_                        000000CC
_00114_DS_                        000000EC
_00117_DS_                        00000120
_00118_DS_                        0000012A
_00120_DS_                        000001E6
_00121_DS_                        000001F0
_00125_DS_                        00000216
_00128_DS_                        000001F6
_00131_DS_                        000001C0
_00134_DS_                        00000190
_00137_DS_                        00000170
_00140_DS_                        00000150
_00143_DS_                        00000130
_00144_DS_                        0000023C
_00146_DS_                        0000027A
_00147_DS_                        00000284
_00149_DS_                        000002FE
_00151_DS_                        00000338
_00153_DS_                        00000362
_00154_DS_                        0000036C
_00156_DS_                        000003A6
_00158_DS_                        000003E0
_00162_DS_                        000003AC
_00165_DS_                        00000372
_00168_DS_                        0000033E
_00171_DS_                        00000304
_00174_DS_                        000002CA
_00177_DS_                        000002AA
_00180_DS_                        0000028A
_00181_DS_                        000003E4
_00185_DS_                        00000240
_00188_DS_                        000000F0
_00190_DS_                        000003E6
_00228_DS_                        000000A4
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 64


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_00231_DS_                        000000DA
_00233_DS_                        000000E8
_00234_DS_                        00000102
_00235_DS_                        00000104
_00236_DS_                        0000013E
_00237_DS_                        00000140
_00238_DS_                        0000015E
_00239_DS_                        00000160
_00240_DS_                        0000017E
_00241_DS_                        00000180
_00242_DS_                        0000019E
_00243_DS_                        000001A0
_00244_DS_                        000001CE
_00245_DS_                        000001D0
_00246_DS_                        00000204
_00247_DS_                        00000206
_00248_DS_                        00000224
_00249_DS_                        00000226
_00251_DS_                        0000024E
_00252_DS_                        0000025C
_00253_DS_                        0000025E
_00254_DS_                        00000298
_00255_DS_                        0000029A
_00256_DS_                        000002B8
_00257_DS_                        000002BA
_00258_DS_                        000002D8
_00259_DS_                        000002DA
_00260_DS_                        000002F4
_00261_DS_                        00000312
_00262_DS_                        00000314
_00263_DS_                        0000032E
_00264_DS_                        0000034C
_00265_DS_                        0000034E
_00266_DS_                        00000380
_00267_DS_                        00000382
_00268_DS_                        0000039C
_00269_DS_                        000003BA
_00270_DS_                        000003BC
_00271_DS_                        000003D6
_00291_DS_                        0000005C
_00297_DS_                        00000030
_00298_DS_                        00000032
_00299_DS_                        00000046
_00300_DS_                        00000048
_00306_DS_                        000001AE
_00309_DS_                        00000332
_00312_DS_                        00000226
_00315_DS_                        000004FC
_00318_DS_                        0000062C
_00321_DS_                        000006D2
_00324_DS_                        000007D0
_00327_DS_                        000008FE
_00332_DS_                        0000082E
_00335_DS_                        00000700
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 65


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_00338_DS_                        0000068A
_00341_DS_                        0000055C
_00344_DS_                        0000042A
_00347_DS_                        000003EA
_00350_DS_                        000003AA
_00353_DS_                        0000008A
_00354_DS_                        0000095A
_00374_DS_                        00000098
_00375_DS_                        0000009A
_00376_DS_                        000003B8
_00377_DS_                        000003BA
_00378_DS_                        000003F8
_00379_DS_                        000003FA
_00380_DS_                        00000438
_00381_DS_                        0000043A
_00382_DS_                        0000056A
_00383_DS_                        0000056C
_00384_DS_                        00000698
_00385_DS_                        0000069A
_00386_DS_                        0000070E
_00387_DS_                        00000710
_00388_DS_                        0000083C
_00389_DS_                        0000083E
_00396_DS_                        00000030
_00399_DS_                        00000022
_00406_DS_                        00000030
_00409_DS_                        00000022
_00416_DS_                        00000034
_00419_DS_                        00000022
_00425_DS_                        00000072
_00427_DS_                        0000009A
_00430_DS_                        00000046
_00436_DS_                        000000FC
_00437_DS_                        0000005C
_00440_DS_                        000000D4
_00447_DS_                        0000009A
_00448_DS_                        000000E4
_00456_DS_                        00000082
_00465_DS_                        000000CC
_00469_DS_                        00000134
_00472_DS_                        0000015E
_00476_DS_                        00000188
_00483_DS_                        00000152
_00484_DS_                        00000114
_10463_DS_                        00000012
_20464_DS_                        00000012
_30465_DS_                        00000012
_40466_DS_                        000002E4
_50467_DS_                        0000031E
_60468_DS_                        0000038C
_70469_DS_                        000003C6
_ADCON0                           00000000
_ADCON0bits                       00000000
_ADCON1                           00000000
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 66


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_ADCON1bits                       00000000
_ADCON2                           00000000
_ADCON2bits                       00000000
_ADRES                            00000000
_ADRESH                           00000000
_ADRESL                           00000000
_BAUDCON                          00000000
_BAUDCON1                         00000000
_BAUDCON1bits                     00000000
_BAUDCON2                         00000000
_BAUDCON2bits                     00000000
_BAUDCONbits                      00000000
_BAUDCTL                          00000000
_BAUDCTL1                         00000000
_BAUDCTL1bits                     00000000
_BAUDCTL2                         00000000
_BAUDCTL2bits                     00000000
_BAUDCTLbits                      00000000
_BSR                              00000000
_CCP1CON                          00000000
_CCP1CONbits                      00000000
_CCP2CON                          00000000
_CCP2CONbits                      00000000
_CCP3CON                          00000000
_CCP3CONbits                      00000000
_CCP4CON                          00000000
_CCP4CONbits                      00000000
_CCP5CON                          00000000
_CCP5CONbits                      00000000
_CCPR1                            00000000
_CCPR1H                           00000000
_CCPR1L                           00000000
_CCPR2                            00000000
_CCPR2H                           00000000
_CCPR2L                           00000000
_CCPR3                            00000000
_CCPR3H                           00000000
_CCPR3L                           00000000
_CCPR4                            00000000
_CCPR4H                           00000000
_CCPR4L                           00000000
_CCPR5                            00000000
_CCPR5H                           00000000
_CCPR5L                           00000000
_CMCON                            00000000
_CMCONbits                        00000000
_CVRCON                           00000000
_CVRCONbits                       00000000
_DDRA                             00000000
_DDRAbits                         00000000
_DDRB                             00000000
_DDRBbits                         00000000
_DDRC                             00000000
_DDRCbits                         00000000
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 67


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_DDRD                             00000000
_DDRDbits                         00000000
_DDRE                             00000000
_DDREbits                         00000000
_DDRF                             00000000
_DDRFbits                         00000000
_DDRG                             00000000
_DDRGbits                         00000000
_DDRH                             00000000
_DDRHbits                         00000000
_DDRJ                             00000000
_DDRJbits                         00000000
_DisplayString                    00000000
_DisplayWORD                      00000000
_DisplayWORD_WDigit_1_1           00000000
_EBSTCON                          00000000
_EBSTCONbits                      00000000
_EBSTCS                           00000000
_EBSTCSH                          00000000
_EBSTCSL                          00000000
_EBSTSD                           00000000
_ECCP1AS                          00000000
_ECCP1ASbits                      00000000
_ECCP1CON                         00000000
_ECCP1CONbits                     00000000
_ECCP1DEL                         00000000
_ECCP1DELbits                     00000000
_ECCP2AS                          00000000
_ECCP2ASbits                      00000000
_ECCP2CON                         00000000
_ECCP2CONbits                     00000000
_ECCP2DEL                         00000000
_ECCP2DELbits                     00000000
_ECCP3AS                          00000000
_ECCP3ASbits                      00000000
_ECCP3CON                         00000000
_ECCP3CONbits                     00000000
_ECCP3DEL                         00000000
_ECCP3DELbits                     00000000
_ECON1                            00000000
_ECON1bits                        00000000
_ECON2                            00000000
_ECON2bits                        00000000
_EDATA                            00000000
_EDATAbits                        00000000
_EDMACS                           00000000
_EDMACSH                          00000000
_EDMACSL                          00000000
_EDMADST                          00000000
_EDMADSTH                         00000000
_EDMADSTL                         00000000
_EDMAND                           00000000
_EDMANDH                          00000000
_EDMANDL                          00000000
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 68


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_EDMAST                           00000000
_EDMASTH                          00000000
_EDMASTL                          00000000
_EECON1                           00000000
_EECON1bits                       00000000
_EECON2                           00000000
_EFLOCON                          00000000
_EFLOCONbits                      00000000
_EHT0                             00000000
_EHT1                             00000000
_EHT2                             00000000
_EHT3                             00000000
_EHT4                             00000000
_EHT5                             00000000
_EHT6                             00000000
_EHT7                             00000000
_EIE                              00000000
_EIEbits                          00000000
_EIR                              00000000
_EIRbits                          00000000
_EPAUS                            00000000
_EPAUSH                           00000000
_EPAUSL                           00000000
_EPKTCNT                          00000000
_EPMCS                            00000000
_EPMCSH                           00000000
_EPMCSL                           00000000
_EPMM0                            00000000
_EPMM1                            00000000
_EPMM2                            00000000
_EPMM3                            00000000
_EPMM4                            00000000
_EPMM5                            00000000
_EPMM6                            00000000
_EPMM7                            00000000
_EPMO                             00000000
_EPMOH                            00000000
_EPMOL                            00000000
_ERDPT                            00000000
_ERDPTH                           00000000
_ERDPTL                           00000000
_ERXFCON                          00000000
_ERXFCONbits                      00000000
_ERXND                            00000000
_ERXNDH                           00000000
_ERXNDL                           00000000
_ERXRDPT                          00000000
_ERXRDPTH                         00000000
_ERXRDPTL                         00000000
_ERXST                            00000000
_ERXSTH                           00000000
_ERXSTL                           00000000
_ERXWRPT                          00000000
_ERXWRPTH                         00000000
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 69


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_ERXWRPTL                         00000000
_ESTAT                            00000000
_ESTATbits                        00000000
_ETXND                            00000000
_ETXNDH                           00000000
_ETXNDL                           00000000
_ETXST                            00000000
_ETXSTH                           00000000
_ETXSTL                           00000000
_EWOLIE                           00000000
_EWOLIEbits                       00000000
_EWOLIR                           00000000
_EWOLIRbits                       00000000
_EWRPT                            00000000
_EWRPTH                           00000000
_EWRPTL                           00000000
_FSR0H                            00000000
_FSR0L                            00000000
_FSR1H                            00000000
_FSR1L                            00000000
_FSR2H                            00000000
_FSR2L                            00000000
_INDF0                            00000000
_INDF1                            00000000
_INDF2                            00000000
_INTCON                           00000000
_INTCON2                          00000000
_INTCON2bits                      00000000
_INTCON3                          00000000
_INTCON3bits                      00000000
_INTCONbits                       00000000
_IPR1                             00000000
_IPR1bits                         00000000
_IPR2                             00000000
_IPR2bits                         00000000
_IPR3                             00000000
_IPR3bits                         00000000
_LATA                             00000000
_LATAbits                         00000000
_LATB                             00000000
_LATBbits                         00000000
_LATC                             00000000
_LATCbits                         00000000
_LATD                             00000000
_LATDbits                         00000000
_LATE                             00000000
_LATEbits                         00000000
_LATF                             00000000
_LATFbits                         00000000
_LATG                             00000000
_LATGbits                         00000000
_LATH                             00000000
_LATHbits                         00000000
_LATJ                             00000000
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 70


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_LATJbits                         00000000
_LCDInit                          00000000
_LCDText                          00000000
_LCDUpdate                        00000000
_MAADR1                           00000000
_MAADR2                           00000000
_MAADR3                           00000000
_MAADR4                           00000000
_MAADR5                           00000000
_MAADR6                           00000000
_MABBIPG                          00000000
_MACLCON1                         00000000
_MACLCON1bits                     00000000
_MACLCON2                         00000000
_MACLCON2bits                     00000000
_MACON1                           00000000
_MACON1bits                       00000000
_MACON2                           00000000
_MACON2bits                       00000000
_MACON3                           00000000
_MACON3bits                       00000000
_MACON4                           00000000
_MACON4bits                       00000000
_MAIPG                            00000000
_MAIPGH                           00000000
_MAIPGL                           00000000
_MAMXFL                           00000000
_MAMXFLH                          00000000
_MAMXFLL                          00000000
_MEMCON                           00000000
_MEMCONbits                       00000000
_MICMD                            00000000
_MICMDbits                        00000000
_MICON                            00000000
_MICONbits                        00000000
_MIRD                             00000000
_MIRDH                            00000000
_MIRDL                            00000000
_MIREGADR                         00000000
_MISTAT                           00000000
_MISTATbits                       00000000
_MIWR                             00000000
_MIWRH                            00000000
_MIWRL                            00000000
_OSCCON                           00000000
_OSCCONbits                       00000000
_OSCTUNE                          00000000
_OSCTUNEbits                      00000000
_PC                               00000000
_PCL                              00000000
_PCLATH                           00000000
_PCLATU                           00000000
_PIE1                             00000000
_PIE1bits                         00000000
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 71


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_PIE2                             00000000
_PIE2bits                         00000000
_PIE3                             00000000
_PIE3bits                         00000000
_PIR1                             00000000
_PIR1bits                         00000000
_PIR2                             00000000
_PIR2bits                         00000000
_PIR3                             00000000
_PIR3bits                         00000000
_PLUSW0                           00000000
_PLUSW1                           00000000
_PLUSW2                           00000000
_PORTA                            00000000
_PORTAbits                        00000000
_PORTB                            00000000
_PORTBbits                        00000000
_PORTC                            00000000
_PORTCbits                        00000000
_PORTD                            00000000
_PORTDbits                        00000000
_PORTE                            00000000
_PORTEbits                        00000000
_PORTF                            00000000
_PORTFbits                        00000000
_PORTG                            00000000
_PORTGbits                        00000000
_PORTH                            00000000
_PORTHbits                        00000000
_PORTJ                            00000000
_PORTJbits                        00000000
_POSTDEC0                         00000000
_POSTDEC1                         00000000
_POSTDEC2                         00000000
_POSTINC0                         00000000
_POSTINC1                         00000000
_POSTINC2                         00000000
_PR2                              00000000
_PR4                              00000000
_PREINC0                          00000000
_PREINC1                          00000000
_PREINC2                          00000000
_PROD                             00000000
_PRODH                            00000000
_PRODL                            00000000
_PSPCON                           00000000
_PSPCONbits                       00000000
_RCON                             00000000
_RCONbits                         00000000
_RCREG                            00000000
_RCREG1                           00000000
_RCREG2                           00000000
_RCSTA                            00000000
_RCSTA1                           00000000
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 72


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_RCSTA1bits                       00000000
_RCSTA2                           00000000
_RCSTA2bits                       00000000
_RCSTAbits                        00000000
_SPBRG                            00000000
_SPBRG1                           00000000
_SPBRG2                           00000000
_SPBRGH                           00000000
_SPBRGH1                          00000000
_SPBRGH2                          00000000
_SSP1ADD                          00000000
_SSP1BUF                          00000000
_SSP1CON1                         00000000
_SSP1CON1bits                     00000000
_SSP1CON2                         00000000
_SSP1CON2bits                     00000000
_SSP1STAT                         00000000
_SSP1STATbits                     00000000
_SSP2ADD                          00000000
_SSP2BUF                          00000000
_SSP2CON1                         00000000
_SSP2CON1bits                     00000000
_SSP2CON2                         00000000
_SSP2CON2bits                     00000000
_SSP2STAT                         00000000
_SSP2STATbits                     00000000
_SSPADD                           00000000
_SSPBUF                           00000000
_SSPCON1                          00000000
_SSPCON1bits                      00000000
_SSPCON2                          00000000
_SSPCON2bits                      00000000
_SSPSTAT                          00000000
_SSPSTATbits                      00000000
_STATUS                           00000000
_STATUSbits                       00000000
_STKPTR                           00000000
_STKPTRbits                       00000000
_T0CON                            00000000
_T0CONbits                        00000000
_T1CON                            00000000
_T1CONbits                        00000000
_T2CON                            00000000
_T2CONbits                        00000000
_T3CON                            00000000
_T3CONbits                        00000000
_T4CON                            00000000
_T4CONbits                        00000000
_TABLAT                           00000000
_TBLPTR                           00000000
_TBLPTRH                          00000000
_TBLPTRL                          00000000
_TBLPTRU                          00000000
_TMR0H                            00000000
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 73


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_TMR0L                            00000000
_TMR1H                            00000000
_TMR1L                            00000000
_TMR2                             00000000
_TMR3H                            00000000
_TMR3L                            00000000
_TMR4                             00000000
_TOS                              00000000
_TOSH                             00000000
_TOSL                             00000000
_TOSU                             00000000
_TRISA                            00000000
_TRISAbits                        00000000
_TRISB                            00000000
_TRISBbits                        00000000
_TRISC                            00000000
_TRISCbits                        00000000
_TRISD                            00000000
_TRISDbits                        00000000
_TRISE                            00000000
_TRISEbits                        00000000
_TRISF                            00000000
_TRISFbits                        00000000
_TRISG                            00000000
_TRISGbits                        00000000
_TRISH                            00000000
_TRISHbits                        00000000
_TRISJ                            00000000
_TRISJbits                        00000000
_TXREG                            00000000
_TXREG1                           00000000
_TXREG2                           00000000
_TXSTA                            00000000
_TXSTA1                           00000000
_TXSTA1bits                       00000000
_TXSTA2                           00000000
_TXSTA2bits                       00000000
_TXSTAbits                        00000000
_WDTCON                           00000000
_WDTCONbits                       00000000
_WREG                             00000000
__18F97J60                        00000001
__gptrget1                        00000000
__gptrput1                        00000000
__str_0                           00000418
__str_1                           0000042A
__str_10                          00000546
__str_11                          00000562
__str_12                          0000057E
__str_13                          0000059C
__str_14                          000005BA
__str_15                          000005D8
__str_16                          000005DC
__str_2                           0000044C
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 74


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
__str_3                           0000046E
__str_4                           0000048E
__str_5                           000004AC
__str_6                           000004CC
__str_7                           000004EC
__str_8                           0000050A
__str_9                           00000528
_add_hour                         00000000
_add_minute                       00000000
_add_second                       00000000
_alarm_hour                       0000000E
_alarm_minute                     00000010
_alarm_ring                       00000004
_alarm_set                        00000002
_blink                            00000012
_check_alarm                      00000000
_convert_value                    00000000
_high_isrr                        00000000
_hour                             00000008
_main                             00000000
_minute                           0000000A
_ring_today                       00000000
_second                           0000000C
_sprintf                          00000000
_state                            00000006
_stdin                            00000000
_stdout                           00000000
_strlcpy                          00000000
_strlen                           00000000
_timer0_conf                      00000000
_ultoa                            00000000
_update_lcd                       00000000
_update_lcd_a_h_1_1               00000000
_update_lcd_a_m_1_1               00000000
_update_lcd_h_1_1                 00000000
_update_lcd_lcd_1_1               00000000
_update_lcd_m_1_1                 00000000
_update_lcd_s_1_1                 00000000
ivec_0x1_high_isrr                00000008
r0x00                             00000000
r0x01                             00000001
r0x02                             00000002
r0x03                             00000003
r0x04                             00000004
r0x05                             00000005
r0x06                             00000006
r0x07                             00000007
r0x08                             00000008
r0x09                             00000009
r0x0a                             0000000A
r0x0b                             0000000B
r0x0c                             0000000C
r0x0d                             0000000D
r0x0e                             0000000E
gpasm-0.13.7 beta               Objects/test.asm3-26-2012  15:39:16          PAGE 75


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
r0x0f                             0000000F
r0x10                             00000010
r0x11                             00000011
r0x12                             00000012
r0x13                             00000013
r0x14                             00000014
r0x15                             00000015


Errors   :       0
Warnings :       0 reported,       0 suppressed
Messages :       0 reported,       0 suppressed

