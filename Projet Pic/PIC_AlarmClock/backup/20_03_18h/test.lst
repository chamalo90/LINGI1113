gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 3-20-2013  17:32:22
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Mar 19 2013) (UNIX)
                                           ; This file was generated Wed Mar 20 17:32:22 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _ConfigTimer0
                                           	global _ConfigButtons
                                           	global _ConfigLed
                                           	global _UpdateTime
                                           	global _IsItTime
                                           	global _UpdateLCD
                                           	global _ledAlarm
                                           	global _ConvertTime
                                           	global _DisplayWORD
                                           	global _DisplayString
                                           	global _strlcpy
                                           	global _hours
                                           	global _minutes
                                           	global _seconds
                                           	global _milliSec
                                           	global _alarmHours
                                           	global _alarmMinutes
                                           	global _stateMenu
                                           	global _alarmStatus
                                           	global _LCDPrint
                                           	global _h
                                           	global _m
                                           	global _s
                                           	global _hA
                                           	global _mA
                                           	global _alarmState
                                           	global _main
                                           	global _HighPriorityInterrupt
                                           	global _LowPriorityInterrupt
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _sprintf
                                           	extern _ultoa
                                           	extern _strlen
                                           	extern _LCDInit
                                           	extern _LCDUpdate
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           
                                           udata_test_0	udata
                                           _stateMenu	res	2
                                           
                                           udata_test_1	udata
                                           _hours	res	2
                                           
                                           udata_test_2	udata
                                           _minutes	res	2
                                           
                                           udata_test_3	udata
                                           _seconds	res	2
                                           
                                           udata_test_4	udata
                                           _alarmHours	res	2
                                           
                                           udata_test_5	udata
                                           _alarmMinutes	res	2
                                           
                                           udata_test_6	udata
                                           _alarmStatus	res	2
                                           
                                           udata_test_7	udata
                                           _milliSec	res	2
                                           
                                           udata_test_8	udata
                                           _h	res	3
                                           
                                           udata_test_9	udata
                                           _m	res	3
                                           
                                           udata_test_10	udata
                                           _s	res	3
                                           
                                           udata_test_11	udata
                                           _hA	res	3
                                           
                                           udata_test_12	udata
                                           _mA	res	3
                                           
                                           udata_test_13	udata
                                           _alarmState	res	9
                                           
                                           udata_test_14	udata
                                           _LCDPrint	res	32
                                           
                                           udata_test_15	udata
                                           _DisplayWORD_WDigit_1_1	res	6
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_test_ivec_0x1_HighPriorityInterrupt	code	0X000008
                                           ivec_0x1_HighPriorityInterrupt:
000008   ef96     goto	0x152c              	GOTO	_HighPriorityInterrupt
00000a   f00a
                                           
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_test_ivec_0x2_LowPriorityInterrupt	code	0X000018
                                           ivec_0x2_LowPriorityInterrupt:
000018   ef47     goto	0x288e              	GOTO	_LowPriorityInterrupt
00001a   f014
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_test__main	code
                                           _main:
0027bc   010e     movlb	0xe                	BANKSEL	_stateMenu
                                           ;	.line	69; test.c	stateMenu = STANDARD_STATE;
0027be   6b2f     clrf	0x2f, 0x1           	CLRF	_stateMenu, B
0027c0   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
0027c2   6b30     clrf	0x30, 0x1           	CLRF	(_stateMenu + 1), B
                                           ;	.line	70; test.c	INTCONbits.GIE = 1; // Activation générale des interruptions
0027c4   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	71; test.c	RCONbits.IPEN = 1; //interrupts priority enable
0027c6   8ed0     bsf	0xd0, 0x7, 0         	BSF	_RCONbits, 7
                                           ;	.line	72; test.c	LCDInit(); // initialisation du LCD
0027c8   ec68     call	0x12d0, 0           	CALL	_LCDInit
0027ca   f009
0027cc   010e     movlb	0xe                	BANKSEL	_hours
                                           ;	.line	73; test.c	hours = 0;
0027ce   6b31     clrf	0x31, 0x1           	CLRF	_hours, B
0027d0   010e     movlb	0xe                	BANKSEL	(_hours + 1)
0027d2   6b32     clrf	0x32, 0x1           	CLRF	(_hours + 1), B
0027d4   010e     movlb	0xe                	BANKSEL	_minutes
                                           ;	.line	74; test.c	minutes = 0;
0027d6   6b33     clrf	0x33, 0x1           	CLRF	_minutes, B
0027d8   010e     movlb	0xe                	BANKSEL	(_minutes + 1)
0027da   6b34     clrf	0x34, 0x1           	CLRF	(_minutes + 1), B
0027dc   010e     movlb	0xe                	BANKSEL	_seconds
                                           ;	.line	75; test.c	seconds = 0;
0027de   6b35     clrf	0x35, 0x1           	CLRF	_seconds, B
0027e0   010e     movlb	0xe                	BANKSEL	(_seconds + 1)
0027e2   6b36     clrf	0x36, 0x1           	CLRF	(_seconds + 1), B
0027e4   010e     movlb	0xe                	BANKSEL	_alarmHours
                                           ;	.line	76; test.c	alarmHours = 0;
0027e6   6b37     clrf	0x37, 0x1           	CLRF	_alarmHours, B
0027e8   010e     movlb	0xe                	BANKSEL	(_alarmHours + 1)
0027ea   6b38     clrf	0x38, 0x1           	CLRF	(_alarmHours + 1), B
0027ec   010e     movlb	0xe                	BANKSEL	_alarmMinutes
                                           ;	.line	77; test.c	alarmMinutes = 0;
0027ee   6b39     clrf	0x39, 0x1           	CLRF	_alarmMinutes, B
0027f0   010e     movlb	0xe                	BANKSEL	(_alarmMinutes + 1)
0027f2   6b3a     clrf	0x3a, 0x1           	CLRF	(_alarmMinutes + 1), B
0027f4   010e     movlb	0xe                	BANKSEL	_alarmStatus
                                           ;	.line	78; test.c	alarmStatus = 0;
0027f6   6b3b     clrf	0x3b, 0x1           	CLRF	_alarmStatus, B
0027f8   010e     movlb	0xe                	BANKSEL	(_alarmStatus + 1)
0027fa   6b3c     clrf	0x3c, 0x1           	CLRF	(_alarmStatus + 1), B
                                           ;	.line	79; test.c	ConfigTimer0();
0027fc   ec8e     call	0x1b1c, 0           	CALL	_ConfigTimer0
0027fe   f00d
                                           ;	.line	80; test.c	ConfigButtons();
002800   ec11     call	0x2a22, 0           	CALL	_ConfigButtons
002802   f015
                                           ;	.line	81; test.c	ConfigLed();
002804   ec2e     call	0x2a5c, 0           	CALL	_ConfigLed
002806   f015
                                           _00108_DS_:
                                           ;	.line	85; test.c	UpdateTime();
002808   ecf9     call	0x23f2, 0           	CALL	_UpdateTime
00280a   f011
                                           ;	.line	86; test.c	IsItTime();
00280c   ec57     call	0x26ae, 0           	CALL	_IsItTime
00280e   f013
                                           ;	.line	87; test.c	UpdateLCD();
002810   ec29     call	0x852, 0            	CALL	_UpdateLCD
002812   f004
002814   010e     movlb	0xe                	BANKSEL	_stateMenu
                                           ;	.line	88; test.c	if(stateMenu == RINGING) ledAlarm();
002816   512f     movf	0x2f, 0, 0x1        	MOVF	_stateMenu, W, B
002818   0a07     xorlw	0x7                	XORLW	0x07
00281a   e103     bnz	0x2822               	BNZ	_00114_DS_
00281c   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
00281e   5130     movf	0x30, 0, 0x1        	MOVF	(_stateMenu + 1), W, B
002820   e001     bz	0x2824                	BZ	_00115_DS_
                                           _00114_DS_:
002822   d7f2     bra	0x2808               	BRA	_00108_DS_
                                           _00115_DS_:
002824   ec72     call	0x28e4, 0           	CALL	_ledAlarm
002826   f014
002828   d7ef     bra	0x2808               	BRA	_00108_DS_
00282a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__strlcpy	code
                                           _strlcpy:
                                           ;	.line	559; test.c	strlcpy(char *dst, const char *src, size_t siz)
001764   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001766   ffe5
001768   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00176a   ffd9
00176c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00176e   ffe5
001770   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001772   ffe5
001774   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001776   ffe5
001778   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00177a   ffe5
00177c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00177e   ffe5
001780   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001782   ffe5
001784   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001786   ffe5
001788   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00178a   ffe5
00178c   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00178e   ffe5
001790   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001792   ffe5
001794   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
001796   ffe5
001798   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
00179a   ffe5
00179c   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
00179e   ffe5
0017a0   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
0017a2   ffe5
0017a4   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
0017a6   ffe5
0017a8   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
0017aa   ffe5
0017ac   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
0017ae   ffe5
0017b0   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
0017b2   ffe5
0017b4   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
0017b6   ffe5
0017b8   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
0017ba   ffe5
0017bc   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
0017be   ffe5
0017c0   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
0017c2   ffe5
0017c4   0e02     movlw	0x2                	MOVLW	0x02
0017c6   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0017c8   f000
0017ca   0e03     movlw	0x3                	MOVLW	0x03
0017cc   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0017ce   f001
0017d0   0e04     movlw	0x4                	MOVLW	0x04
0017d2   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0017d4   f002
0017d6   0e05     movlw	0x5                	MOVLW	0x05
0017d8   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0017da   f003
0017dc   0e06     movlw	0x6                	MOVLW	0x06
0017de   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0017e0   f004
0017e2   0e07     movlw	0x7                	MOVLW	0x07
0017e4   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0017e6   f005
0017e8   0e08     movlw	0x8                	MOVLW	0x08
0017ea   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
0017ec   f006
0017ee   0e09     movlw	0x9                	MOVLW	0x09
0017f0   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
0017f2   f007
                                           ;	.line	561; test.c	char       *d = dst;
0017f4   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
0017f6   f008
0017f8   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
0017fa   f009
0017fc   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
0017fe   f00a
                                           ;	.line	562; test.c	const char *s = src;
001800   c003     movff	0x3, 0xb           	MOVFF	r0x03, r0x0b
001802   f00b
001804   c004     movff	0x4, 0xc           	MOVFF	r0x04, r0x0c
001806   f00c
001808   c005     movff	0x5, 0xd           	MOVFF	r0x05, r0x0d
00180a   f00d
                                           ;	.line	563; test.c	size_t      n = siz;
00180c   c006     movff	0x6, 0xe           	MOVFF	r0x06, r0x0e
00180e   f00e
001810   c007     movff	0x7, 0xf           	MOVFF	r0x07, r0x0f
001812   f00f
                                           ;	.line	566; test.c	if (n != 0)
001814   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001816   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001818   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
00181a   d03e     bra	0x1898               	BRA	_00299_DS_
                                           ;	.line	568; test.c	while (--n != 0)
00181c   c003     movff	0x3, 0x10          	MOVFF	r0x03, r0x10
00181e   f010
001820   c004     movff	0x4, 0x11          	MOVFF	r0x04, r0x11
001822   f011
001824   c005     movff	0x5, 0x12          	MOVFF	r0x05, r0x12
001826   f012
001828   c006     movff	0x6, 0x13          	MOVFF	r0x06, r0x13
00182a   f013
00182c   c007     movff	0x7, 0x14          	MOVFF	r0x07, r0x14
00182e   f014
                                           _00295_DS_:
001830   0eff     movlw	0xff               	MOVLW	0xff
001832   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x13, F
001834   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
001836   0614     decf	0x14, 0x1, 0        	DECF	r0x14, F
001838   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
00183a   1014     iorwf	0x14, 0, 0         	IORWF	r0x14, W
00183c   e01d     bz	0x1878                	BZ	_00314_DS_
                                           ;	.line	570; test.c	if ((*d++ = *s++) == '\0')
00183e   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
001840   ffe9
001842   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
001844   fff3
001846   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
001848   ec00     call	0x2a00, 0           	CALL	__gptrget1
00184a   f015
00184c   6e15     movwf	0x15, 0            	MOVWF	r0x15
00184e   2a10     incf	0x10, 0x1, 0        	INCF	r0x10, F
001850   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001852   2a11     incf	0x11, 0x1, 0        	INCF	r0x11, F
001854   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001856   2a12     incf	0x12, 0x1, 0        	INCF	r0x12, F
001858   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
00185a   ffe5
00185c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00185e   ffe9
001860   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
001862   fff3
001864   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001866   ec47     call	0x2a8e, 0           	CALL	__gptrput1
001868   f015
00186a   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00186c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00186e   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
001870   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001872   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
001874   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
001876   e1dc     bnz	0x1830               	BNZ	_00295_DS_
                                           _00314_DS_:
                                           ;	.line	571; test.c	break;
001878   c010     movff	0x10, 0xb          	MOVFF	r0x10, r0x0b
00187a   f00b
00187c   c011     movff	0x11, 0xc          	MOVFF	r0x11, r0x0c
00187e   f00c
001880   c012     movff	0x12, 0xd          	MOVFF	r0x12, r0x0d
001882   f00d
001884   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
001886   f008
001888   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
00188a   f009
00188c   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
00188e   f00a
001890   c013     movff	0x13, 0xe          	MOVFF	r0x13, r0x0e
001892   f00e
001894   c014     movff	0x14, 0xf          	MOVFF	r0x14, r0x0f
001896   f00f
                                           _00299_DS_:
                                           ;	.line	576; test.c	if (n == 0)
001898   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
00189a   100f     iorwf	0xf, 0, 0          	IORWF	r0x0f, W
00189c   e127     bnz	0x18ec               	BNZ	_00306_DS_
                                           ;	.line	578; test.c	if (siz != 0)
00189e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0018a0   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0018a2   e009     bz	0x18b6                	BZ	_00313_DS_
                                           ;	.line	579; test.c	*d = '\0';          /* NUL-terminate dst */
0018a4   0e00     movlw	0                  	MOVLW	0x00
0018a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0018a8   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
0018aa   ffe9
0018ac   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
0018ae   fff3
0018b0   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0018b2   ec47     call	0x2a8e, 0           	CALL	__gptrput1
0018b4   f015
                                           _00313_DS_:
                                           ;	.line	580; test.c	while (*s++)
0018b6   c00b     movff	0xb, 0             	MOVFF	r0x0b, r0x00
0018b8   f000
0018ba   c00c     movff	0xc, 0x1           	MOVFF	r0x0c, r0x01
0018bc   f001
0018be   c00d     movff	0xd, 0x2           	MOVFF	r0x0d, r0x02
0018c0   f002
                                           _00302_DS_:
0018c2   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0018c4   ffe9
0018c6   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0018c8   fff3
0018ca   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0018cc   ec00     call	0x2a00, 0           	CALL	__gptrget1
0018ce   f015
0018d0   6e06     movwf	0x6, 0             	MOVWF	r0x06
0018d2   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0018d4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0018d6   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0018d8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0018da   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
0018dc   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0018de   e1f1     bnz	0x18c2               	BNZ	_00302_DS_
0018e0   c000     movff	0, 0xb             	MOVFF	r0x00, r0x0b
0018e2   f00b
0018e4   c001     movff	0x1, 0xc           	MOVFF	r0x01, r0x0c
0018e6   f00c
0018e8   c002     movff	0x2, 0xd           	MOVFF	r0x02, r0x0d
0018ea   f00d
                                           _00306_DS_:
                                           ;	.line	584; test.c	return (s - src - 1);       /* count does not include NUL */
0018ec   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0018ee   5c0b     subwf	0xb, 0, 0          	SUBWF	r0x0b, W
0018f0   6e03     movwf	0x3, 0             	MOVWF	r0x03
0018f2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0018f4   580c     subwfb	0xc, 0, 0         	SUBWFB	r0x0c, W
0018f6   6e04     movwf	0x4, 0             	MOVWF	r0x04
0018f8   0eff     movlw	0xff               	MOVLW	0xff
0018fa   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
0018fc   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0018fe   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
001900   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
001902   fff3
001904   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001906   cfe4     movff	0xfe4, 0x15        	MOVFF	PREINC1, r0x15
001908   f015
00190a   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
00190c   f014
00190e   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
001910   f013
001912   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
001914   f012
001916   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
001918   f011
00191a   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
00191c   f010
00191e   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
001920   f00f
001922   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
001924   f00e
001926   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
001928   f00d
00192a   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
00192c   f00c
00192e   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
001930   f00b
001932   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
001934   f00a
001936   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001938   f009
00193a   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00193c   f008
00193e   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001940   f007
001942   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001944   f006
001946   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001948   f005
00194a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00194c   f004
00194e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001950   f003
001952   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001954   f002
001956   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001958   f001
00195a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00195c   f000
00195e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001960   ffd9
001962   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__DisplayString	code
                                           _DisplayString:
                                           ;	.line	513; test.c	void DisplayString(BYTE pos, char* text)
00218a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00218c   ffe5
00218e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002190   ffd9
002192   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002194   ffe5
002196   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002198   ffe5
00219a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00219c   ffe5
00219e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0021a0   ffe5
0021a2   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0021a4   ffe5
0021a6   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0021a8   ffe5
0021aa   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0021ac   ffe5
0021ae   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0021b0   ffe5
0021b2   0e02     movlw	0x2                	MOVLW	0x02
0021b4   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0021b6   f000
0021b8   0e03     movlw	0x3                	MOVLW	0x03
0021ba   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0021bc   f001
0021be   0e04     movlw	0x4                	MOVLW	0x04
0021c0   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0021c2   f002
0021c4   0e05     movlw	0x5                	MOVLW	0x05
0021c6   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0021c8   f003
                                           ;	.line	515; test.c	BYTE l= strlen(text)+1;
0021ca   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0021cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021ce   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0021d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021d2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0021d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0021d6   ec9e     call	0x273c, 0           	CALL	_strlen
0021d8   f013
0021da   6e04     movwf	0x4, 0             	MOVWF	r0x04
0021dc   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
0021de   f005
0021e0   0e03     movlw	0x3                	MOVLW	0x03
0021e2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0021e4   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
                                           ;	.line	516; test.c	BYTE max= 32-pos;
0021e6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0021e8   0820     sublw	0x20               	SUBLW	0x20
0021ea   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	517; test.c	strlcpy((char*)&LCDText[pos], text,(l<max)?l:max );
0021ec   6a06     clrf	0x6, 0              	CLRF	r0x06
0021ee   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0021f0   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0021f2   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0021f4   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
0021f6   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0021f8   6e06     movwf	0x6, 0             	MOVWF	r0x06
0021fa   5000     movf	0, 0, 0             	MOVF	r0x00, W
0021fc   6e00     movwf	0, 0               	MOVWF	r0x00
0021fe   0e80     movlw	0x80               	MOVLW	0x80
002200   6e07     movwf	0x7, 0             	MOVWF	r0x07
002202   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002204   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
002206   e302     bnc	0x220c               	BNC	_00286_DS_
002208   c005     movff	0x5, 0x4           	MOVFF	r0x05, r0x04
00220a   f004
                                           _00286_DS_:
00220c   6a05     clrf	0x5, 0              	CLRF	r0x05
00220e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002210   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002212   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002214   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002216   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002218   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00221a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00221c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00221e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002220   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002222   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002224   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002226   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002228   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00222a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00222c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00222e   ecb2     call	0x1764, 0           	CALL	_strlcpy
002230   f00b
002232   0e08     movlw	0x8                	MOVLW	0x08
002234   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	518; test.c	LCDUpdate();
002236   ec33     call	0x1066, 0           	CALL	_LCDUpdate
002238   f008
00223a   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00223c   f007
00223e   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002240   f006
002242   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002244   f005
002246   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002248   f004
00224a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00224c   f003
00224e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002250   f002
002252   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002254   f001
002256   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002258   f000
00225a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00225c   ffd9
00225e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__DisplayWORD	code
                                           _DisplayWORD:
                                           ;	.line	491; test.c	void DisplayWORD(BYTE pos, WORD w) //WORD is a 16 bits unsigned
001d6a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001d6c   ffe5
001d6e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001d70   ffd9
001d72   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001d74   ffe5
001d76   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001d78   ffe5
001d7a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001d7c   ffe5
001d7e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001d80   ffe5
001d82   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001d84   ffe5
001d86   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001d88   ffe5
001d8a   0e02     movlw	0x2                	MOVLW	0x02
001d8c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001d8e   f000
001d90   0e03     movlw	0x3                	MOVLW	0x03
001d92   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001d94   f001
001d96   0e04     movlw	0x4                	MOVLW	0x04
001d98   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001d9a   f002
                                           ;	.line	499; test.c	ultoa(w, WDigit, radix);      
001d9c   6a03     clrf	0x3, 0              	CLRF	r0x03
001d9e   6a04     clrf	0x4, 0              	CLRF	r0x04
001da0   0e0a     movlw	0xa                	MOVLW	0x0a
001da2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001da4   0e0f     movlw	0xf                	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
001da6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001da8   0e57     movlw	0x57               	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
001daa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001dac   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001dae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001db0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001db2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001db4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001db6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001db8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001dba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001dbc   ecb2     call	0x1964, 0           	CALL	_ultoa
001dbe   f00c
001dc0   0e07     movlw	0x7                	MOVLW	0x07
001dc2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	500; test.c	for(j = 0; j < strlen((char*)WDigit); j++)
001dc4   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00267_DS_:
001dc6   0e0f     movlw	0xf                	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
001dc8   6e03     movwf	0x3, 0             	MOVWF	r0x03
001dca   0e57     movlw	0x57               	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
001dcc   6e02     movwf	0x2, 0             	MOVWF	r0x02
001dce   0e80     movlw	0x80               	MOVLW	0x80
001dd0   6e04     movwf	0x4, 0             	MOVWF	r0x04
001dd2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001dd4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001dd6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001dd8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001dda   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001ddc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001dde   ec9e     call	0x273c, 0           	CALL	_strlen
001de0   f013
001de2   6e02     movwf	0x2, 0             	MOVWF	r0x02
001de4   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
001de6   f003
001de8   0e03     movlw	0x3                	MOVLW	0x03
001dea   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001dec   c001     movff	0x1, 0x4           	MOVFF	r0x01, r0x04
001dee   f004
001df0   6a05     clrf	0x5, 0              	CLRF	r0x05
001df2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001df4   0f80     addlw	0x80               	ADDLW	0x80
001df6   6ef3     movwf	0xf3, 0            	MOVWF	PRODL
001df8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001dfa   0f80     addlw	0x80               	ADDLW	0x80
001dfc   5cf3     subwf	0xf3, 0, 0         	SUBWF	PRODL, W
001dfe   e102     bnz	0x1e04               	BNZ	_00277_DS_
001e00   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001e02   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
                                           _00277_DS_:
001e04   e21c     bc	0x1e3e                	BC	_00270_DS_
                                           ;	.line	502; test.c	LCDText[LCDPos++] = WDigit[j];
001e06   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
001e08   f002
001e0a   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001e0c   6a03     clrf	0x3, 0              	CLRF	r0x03
001e0e   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001e10   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
001e12   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001e14   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001e16   0e57     movlw	0x57               	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
001e18   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
001e1a   6e04     movwf	0x4, 0             	MOVWF	r0x04
001e1c   6a05     clrf	0x5, 0              	CLRF	r0x05
001e1e   0e0f     movlw	0xf                	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
001e20   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
001e22   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
001e24   ffe9
001e26   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
001e28   ffea
001e2a   cfef     movff	0xfef, 0x4         	MOVFF	INDF0, r0x04
001e2c   f004
001e2e   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
001e30   ffe9
001e32   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
001e34   ffea
001e36   c004     movff	0x4, 0xfef         	MOVFF	r0x04, INDF0
001e38   ffef
                                           ;	.line	500; test.c	for(j = 0; j < strlen((char*)WDigit); j++)
001e3a   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
001e3c   d7c4     bra	0x1dc6               	BRA	_00267_DS_
                                           _00270_DS_:
                                           ;	.line	504; test.c	if(LCDPos < 32u)
001e3e   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
001e40   f001
001e42   6a02     clrf	0x2, 0              	CLRF	r0x02
001e44   0e00     movlw	0                  	MOVLW	0x00
001e46   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
001e48   e102     bnz	0x1e4e               	BNZ	_00278_DS_
001e4a   0e20     movlw	0x20               	MOVLW	0x20
001e4c   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00278_DS_:
001e4e   e20b     bc	0x1e66                	BC	_00266_DS_
                                           ;	.line	505; test.c	LCDText[LCDPos] = 0;
001e50   6a01     clrf	0x1, 0              	CLRF	r0x01
001e52   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001e54   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001e56   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001e58   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001e5a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001e5c   ffe9
001e5e   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
001e60   ffea
001e62   0e00     movlw	0                  	MOVLW	0x00
001e64   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           _00266_DS_:
                                           ;	.line	506; test.c	LCDUpdate();
001e66   ec33     call	0x1066, 0           	CALL	_LCDUpdate
001e68   f008
001e6a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001e6c   f005
001e6e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001e70   f004
001e72   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001e74   f003
001e76   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001e78   f002
001e7a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001e7c   f001
001e7e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001e80   f000
001e82   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001e84   ffd9
001e86   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__LowPriorityInterrupt	code
                                           _LowPriorityInterrupt:
                                           ;	.line	388; test.c	void LowPriorityInterrupt(void) __interrupt (2)
00288e   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
002890   ffe5
002892   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
002894   ffe5
002896   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
002898   ffe5
00289a   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
00289c   ffe5
00289e   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
0028a0   ffe5
0028a2   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
0028a4   ffe5
0028a6   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
0028a8   ffe5
0028aa   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
0028ac   ffe5
0028ae   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
0028b0   ffe5
0028b2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0028b4   ffe5
0028b6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0028b8   ffd9
                                           ;	.line	477; test.c	}
0028ba   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0028bc   ffd9
0028be   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
0028c0   fffb
0028c2   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
0028c4   fffa
0028c6   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
0028c8   ffea
0028ca   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
0028cc   ffe9
0028ce   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
0028d0   fff4
0028d2   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
0028d4   fff3
0028d6   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
0028d8   ffe0
0028da   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
0028dc   ffd8
0028de   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
0028e0   ffe8
0028e2   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_test__HighPriorityInterrupt	code
                                           _HighPriorityInterrupt:
                                           ;	.line	297; test.c	void HighPriorityInterrupt(void) __interrupt (1)
00152c   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
00152e   ffe5
001530   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
001532   ffe5
001534   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
001536   ffe5
001538   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
00153a   ffe5
00153c   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
00153e   ffe5
001540   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
001542   ffe5
001544   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
001546   ffe5
001548   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
00154a   ffe5
00154c   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
00154e   ffe5
001550   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001552   ffe5
001554   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001556   ffd9
001558   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00155a   ffe5
                                           ;	.line	299; test.c	if (INTCONbits.TMR0IF)
00155c   a4f2     btfss	0xf2, 0x2, 0       	BTFSS	_INTCONbits, 2
00155e   d00a     bra	0x1574               	BRA	_00220_DS_
                                           ;	.line	303; test.c	TMR0H = 0xE7; 
001560   0ee7     movlw	0xe7               	MOVLW	0xe7
001562   6ed7     movwf	0xd7, 0            	MOVWF	_TMR0H
                                           ;	.line	304; test.c	TMR0L = 0x96;
001564   0e96     movlw	0x96               	MOVLW	0x96
001566   6ed6     movwf	0xd6, 0            	MOVWF	_TMR0L
                                           ;	.line	305; test.c	INTCONbits.TMR0IF = 0; // OBLIGATOIRE: Remettre le bit d'interruption à zéro
001568   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
00156a   010e     movlb	0xe                	BANKSEL	_milliSec
                                           ;	.line	306; test.c	milliSec++;
00156c   2b3d     incf	0x3d, 0x1, 0x1      	INCF	_milliSec, F, B
00156e   e302     bnc	0x1574               	BNC	_10293_DS_
001570   010e     movlb	0xe                	BANKSEL	(_milliSec + 1)
001572   2b3e     incf	0x3e, 0x1, 0x1      	INCF	(_milliSec + 1), F, B
                                           _10293_DS_:
                                           _00220_DS_:
                                           ;	.line	308; test.c	if (INTCON3bits.INT3F){ //Interupt Flag BUT1
001574   a4f0     btfss	0xf0, 0x2, 0       	BTFSS	_INTCON3bits, 2
001576   d075     bra	0x1662               	BRA	_00231_DS_
                                           ;	.line	309; test.c	switch(stateMenu){
001578   0e00     movlw	0                  	MOVLW	0x00
00157a   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
00157c   5d30     subwf	0x30, 0, 0x1       	SUBWF	(_stateMenu + 1), W, B
00157e   e103     bnz	0x1586               	BNZ	_00250_DS_
001580   0e08     movlw	0x8                	MOVLW	0x08
001582   010e     movlb	0xe                	BANKSEL	_stateMenu
001584   5d2f     subwf	0x2f, 0, 0x1       	SUBWF	_stateMenu, W, B
                                           _00250_DS_:
001586   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001588   d06b     bra	0x1660               	BRA	_00229_DS_
00158a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00158c   ffe5
00158e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001590   ffe5
001592   6a02     clrf	0x2, 0              	CLRF	r0x02
001594   010e     movlb	0xe                	BANKSEL	_stateMenu
001596   352f     rlcf	0x2f, 0, 0x1        	RLCF	_stateMenu, W, B
001598   3602     rlcf	0x2, 0x1, 0         	RLCF	r0x02, F
00159a   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
00159c   3602     rlcf	0x2, 0x1, 0         	RLCF	r0x02, F
00159e   0bfc     andlw	0xfc               	ANDLW	0xfc
0015a0   6e01     movwf	0x1, 0             	MOVWF	r0x01
0015a2   0e00     movlw	0                  	MOVLW	UPPER(_00251_DS_)
0015a4   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
0015a6   0e15     movlw	0x15               	MOVLW	HIGH(_00251_DS_)
0015a8   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
0015aa   0ec2     movlw	0xc2               	MOVLW	LOW(_00251_DS_)
0015ac   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
0015ae   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0015b0   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
0015b2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0015b4   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
0015b6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0015b8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0015ba   f002
0015bc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0015be   f001
0015c0   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00251_DS_:
0015c2   eff1     goto	0x15e2              	GOTO	_00221_DS_
0015c4   f00a
0015c6   ef01     goto	0x1602              	GOTO	_00222_DS_
0015c8   f00b
0015ca   ef07     goto	0x160e              	GOTO	_00223_DS_
0015cc   f00b
0015ce   ef0d     goto	0x161a              	GOTO	_00224_DS_
0015d0   f00b
0015d2   ef13     goto	0x1626              	GOTO	_00225_DS_
0015d4   f00b
0015d6   ef19     goto	0x1632              	GOTO	_00226_DS_
0015d8   f00b
0015da   ef1f     goto	0x163e              	GOTO	_00227_DS_
0015dc   f00b
0015de   ef25     goto	0x164a              	GOTO	_00228_DS_
0015e0   f00b
                                           _00221_DS_:
                                           ;	.line	311; test.c	alarmStatus ^=1; // Enable/disable alarm
0015e2   0e01     movlw	0x1                	MOVLW	0x01
0015e4   010e     movlb	0xe                	BANKSEL	_alarmStatus
0015e6   1b3b     xorwf	0x3b, 0x1, 0x1     	XORWF	_alarmStatus, F, B
                                           ;	.line	312; test.c	LED0_IO ^= 1;
0015e8   6a00     clrf	0, 0                	CLRF	r0x00
0015ea   b091     btfsc	0x91, 0, 0         	BTFSC	_LATJbits, 0
0015ec   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0015ee   0e01     movlw	0x1                	MOVLW	0x01
0015f0   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
0015f2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0015f4   0b01     andlw	0x1                	ANDLW	0x01
0015f6   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0015f8   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
0015fa   0bfe     andlw	0xfe               	ANDLW	0xfe
0015fc   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
0015fe   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
                                           ;	.line	313; test.c	break; // ADD SMTHNG TO STOP ALARM :)
001600   d02f     bra	0x1660               	BRA	_00229_DS_
                                           _00222_DS_:
                                           ;	.line	315; test.c	stateMenu = SET_TIME_MINUTES;
001602   0e02     movlw	0x2                	MOVLW	0x02
001604   010e     movlb	0xe                	BANKSEL	_stateMenu
001606   6f2f     movwf	0x2f, 0x1          	MOVWF	_stateMenu, B
001608   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
00160a   6b30     clrf	0x30, 0x1           	CLRF	(_stateMenu + 1), B
                                           ;	.line	316; test.c	break;
00160c   d029     bra	0x1660               	BRA	_00229_DS_
                                           _00223_DS_:
00160e   010e     movlb	0xe                	BANKSEL	_minutes
                                           ;	.line	318; test.c	minutes++;
001610   2b33     incf	0x33, 0x1, 0x1      	INCF	_minutes, F, B
001612   e302     bnc	0x1618               	BNC	_20294_DS_
001614   010e     movlb	0xe                	BANKSEL	(_minutes + 1)
001616   2b34     incf	0x34, 0x1, 0x1      	INCF	(_minutes + 1), F, B
                                           _20294_DS_:
                                           ;	.line	319; test.c	break;
001618   d023     bra	0x1660               	BRA	_00229_DS_
                                           _00224_DS_:
00161a   010e     movlb	0xe                	BANKSEL	_hours
                                           ;	.line	321; test.c	hours++;
00161c   2b31     incf	0x31, 0x1, 0x1      	INCF	_hours, F, B
00161e   e302     bnc	0x1624               	BNC	_30295_DS_
001620   010e     movlb	0xe                	BANKSEL	(_hours + 1)
001622   2b32     incf	0x32, 0x1, 0x1      	INCF	(_hours + 1), F, B
                                           _30295_DS_:
                                           ;	.line	322; test.c	break;
001624   d01d     bra	0x1660               	BRA	_00229_DS_
                                           _00225_DS_:
                                           ;	.line	324; test.c	stateMenu = SET_ALARMCLOCK_MINUTES;
001626   0e05     movlw	0x5                	MOVLW	0x05
001628   010e     movlb	0xe                	BANKSEL	_stateMenu
00162a   6f2f     movwf	0x2f, 0x1          	MOVWF	_stateMenu, B
00162c   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
00162e   6b30     clrf	0x30, 0x1           	CLRF	(_stateMenu + 1), B
                                           ;	.line	325; test.c	break;
001630   d017     bra	0x1660               	BRA	_00229_DS_
                                           _00226_DS_:
001632   010e     movlb	0xe                	BANKSEL	_alarmMinutes
                                           ;	.line	327; test.c	alarmMinutes++;
001634   2b39     incf	0x39, 0x1, 0x1      	INCF	_alarmMinutes, F, B
001636   e302     bnc	0x163c               	BNC	_40296_DS_
001638   010e     movlb	0xe                	BANKSEL	(_alarmMinutes + 1)
00163a   2b3a     incf	0x3a, 0x1, 0x1      	INCF	(_alarmMinutes + 1), F, B
                                           _40296_DS_:
                                           ;	.line	328; test.c	break;
00163c   d011     bra	0x1660               	BRA	_00229_DS_
                                           _00227_DS_:
00163e   010e     movlb	0xe                	BANKSEL	_alarmHours
                                           ;	.line	330; test.c	alarmHours++;
001640   2b37     incf	0x37, 0x1, 0x1      	INCF	_alarmHours, F, B
001642   e302     bnc	0x1648               	BNC	_50297_DS_
001644   010e     movlb	0xe                	BANKSEL	(_alarmHours + 1)
001646   2b38     incf	0x38, 0x1, 0x1      	INCF	(_alarmHours + 1), F, B
                                           _50297_DS_:
                                           ;	.line	331; test.c	break;
001648   d00b     bra	0x1660               	BRA	_00229_DS_
                                           _00228_DS_:
00164a   010e     movlb	0xe                	BANKSEL	_stateMenu
                                           ;	.line	333; test.c	stateMenu = STANDARD_STATE;
00164c   6b2f     clrf	0x2f, 0x1           	CLRF	_stateMenu, B
00164e   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
001650   6b30     clrf	0x30, 0x1           	CLRF	(_stateMenu + 1), B
001652   010e     movlb	0xe                	BANKSEL	_alarmStatus
                                           ;	.line	334; test.c	alarmStatus = 0;
001654   6b3b     clrf	0x3b, 0x1           	CLRF	_alarmStatus, B
001656   010e     movlb	0xe                	BANKSEL	(_alarmStatus + 1)
001658   6b3c     clrf	0x3c, 0x1           	CLRF	(_alarmStatus + 1), B
                                           ;	.line	335; test.c	LED0_IO = 0;
00165a   9091     bcf	0x91, 0, 0           	BCF	_LATJbits, 0
                                           ;	.line	336; test.c	LED1_IO = 0;
00165c   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	337; test.c	LED2_IO = 0;
00165e   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           _00229_DS_:
                                           ;	.line	343; test.c	INTCON3bits.INT3F = 0; // clear flag
001660   94f0     bcf	0xf0, 0x2, 0         	BCF	_INTCON3bits, 2
                                           _00231_DS_:
                                           ;	.line	346; test.c	if (INTCON3bits.INT1F){ //Interupt Flag BUT2
001662   a0f0     btfss	0xf0, 0, 0         	BTFSS	_INTCON3bits, 0
001664   d068     bra	0x1736               	BRA	_00243_DS_
                                           ;	.line	347; test.c	switch(stateMenu){
001666   0e00     movlw	0                  	MOVLW	0x00
001668   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
00166a   5d30     subwf	0x30, 0, 0x1       	SUBWF	(_stateMenu + 1), W, B
00166c   e103     bnz	0x1674               	BNZ	_00254_DS_
00166e   0e08     movlw	0x8                	MOVLW	0x08
001670   010e     movlb	0xe                	BANKSEL	_stateMenu
001672   5d2f     subwf	0x2f, 0, 0x1       	SUBWF	_stateMenu, W, B
                                           _00254_DS_:
001674   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001676   d05e     bra	0x1734               	BRA	_00240_DS_
001678   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00167a   ffe5
00167c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00167e   ffe5
001680   6a02     clrf	0x2, 0              	CLRF	r0x02
001682   010e     movlb	0xe                	BANKSEL	_stateMenu
001684   352f     rlcf	0x2f, 0, 0x1        	RLCF	_stateMenu, W, B
001686   3602     rlcf	0x2, 0x1, 0         	RLCF	r0x02, F
001688   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
00168a   3602     rlcf	0x2, 0x1, 0         	RLCF	r0x02, F
00168c   0bfc     andlw	0xfc               	ANDLW	0xfc
00168e   6e01     movwf	0x1, 0             	MOVWF	r0x01
001690   0e00     movlw	0                  	MOVLW	UPPER(_00255_DS_)
001692   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
001694   0e16     movlw	0x16               	MOVLW	HIGH(_00255_DS_)
001696   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
001698   0eb0     movlw	0xb0               	MOVLW	LOW(_00255_DS_)
00169a   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00169c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00169e   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
0016a0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0016a2   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
0016a4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0016a6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0016a8   f002
0016aa   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0016ac   f001
0016ae   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00255_DS_:
0016b0   ef68     goto	0x16d0              	GOTO	_00232_DS_
0016b2   f00b
0016b4   ef6e     goto	0x16dc              	GOTO	_00233_DS_
0016b6   f00b
0016b8   ef74     goto	0x16e8              	GOTO	_00234_DS_
0016ba   f00b
0016bc   ef7a     goto	0x16f4              	GOTO	_00235_DS_
0016be   f00b
0016c0   ef7f     goto	0x16fe              	GOTO	_00236_DS_
0016c2   f00b
0016c4   ef84     goto	0x1708              	GOTO	_00237_DS_
0016c6   f00b
0016c8   ef8a     goto	0x1714              	GOTO	_00238_DS_
0016ca   f00b
0016cc   ef8f     goto	0x171e              	GOTO	_00239_DS_
0016ce   f00b
                                           _00232_DS_:
                                           ;	.line	349; test.c	stateMenu = SET_TIME_MENU;
0016d0   0e01     movlw	0x1                	MOVLW	0x01
0016d2   010e     movlb	0xe                	BANKSEL	_stateMenu
0016d4   6f2f     movwf	0x2f, 0x1          	MOVWF	_stateMenu, B
0016d6   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
0016d8   6b30     clrf	0x30, 0x1           	CLRF	(_stateMenu + 1), B
                                           ;	.line	350; test.c	break; // ADD SMTHNG TO STOP ALARM :)
0016da   d02c     bra	0x1734               	BRA	_00240_DS_
                                           _00233_DS_:
                                           ;	.line	352; test.c	stateMenu = SET_ALARMCLOCK_MENU;
0016dc   0e04     movlw	0x4                	MOVLW	0x04
0016de   010e     movlb	0xe                	BANKSEL	_stateMenu
0016e0   6f2f     movwf	0x2f, 0x1          	MOVWF	_stateMenu, B
0016e2   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
0016e4   6b30     clrf	0x30, 0x1           	CLRF	(_stateMenu + 1), B
                                           ;	.line	353; test.c	break;
0016e6   d026     bra	0x1734               	BRA	_00240_DS_
                                           _00234_DS_:
                                           ;	.line	355; test.c	stateMenu = SET_TIME_HOURS;
0016e8   0e03     movlw	0x3                	MOVLW	0x03
0016ea   010e     movlb	0xe                	BANKSEL	_stateMenu
0016ec   6f2f     movwf	0x2f, 0x1          	MOVWF	_stateMenu, B
0016ee   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
0016f0   6b30     clrf	0x30, 0x1           	CLRF	(_stateMenu + 1), B
                                           ;	.line	356; test.c	break;
0016f2   d020     bra	0x1734               	BRA	_00240_DS_
                                           _00235_DS_:
0016f4   010e     movlb	0xe                	BANKSEL	_stateMenu
                                           ;	.line	358; test.c	stateMenu = STANDARD_STATE;
0016f6   6b2f     clrf	0x2f, 0x1           	CLRF	_stateMenu, B
0016f8   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
0016fa   6b30     clrf	0x30, 0x1           	CLRF	(_stateMenu + 1), B
                                           ;	.line	359; test.c	break;
0016fc   d01b     bra	0x1734               	BRA	_00240_DS_
                                           _00236_DS_:
0016fe   010e     movlb	0xe                	BANKSEL	_stateMenu
                                           ;	.line	361; test.c	stateMenu = STANDARD_STATE;
001700   6b2f     clrf	0x2f, 0x1           	CLRF	_stateMenu, B
001702   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
001704   6b30     clrf	0x30, 0x1           	CLRF	(_stateMenu + 1), B
                                           ;	.line	362; test.c	break;
001706   d016     bra	0x1734               	BRA	_00240_DS_
                                           _00237_DS_:
                                           ;	.line	364; test.c	stateMenu = SET_ALARMCLOCK_HOURS;
001708   0e06     movlw	0x6                	MOVLW	0x06
00170a   010e     movlb	0xe                	BANKSEL	_stateMenu
00170c   6f2f     movwf	0x2f, 0x1          	MOVWF	_stateMenu, B
00170e   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
001710   6b30     clrf	0x30, 0x1           	CLRF	(_stateMenu + 1), B
                                           ;	.line	365; test.c	break;
001712   d010     bra	0x1734               	BRA	_00240_DS_
                                           _00238_DS_:
001714   010e     movlb	0xe                	BANKSEL	_stateMenu
                                           ;	.line	367; test.c	stateMenu = STANDARD_STATE;
001716   6b2f     clrf	0x2f, 0x1           	CLRF	_stateMenu, B
001718   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
00171a   6b30     clrf	0x30, 0x1           	CLRF	(_stateMenu + 1), B
                                           ;	.line	368; test.c	break;
00171c   d00b     bra	0x1734               	BRA	_00240_DS_
                                           _00239_DS_:
00171e   010e     movlb	0xe                	BANKSEL	_stateMenu
                                           ;	.line	370; test.c	stateMenu = STANDARD_STATE;
001720   6b2f     clrf	0x2f, 0x1           	CLRF	_stateMenu, B
001722   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
001724   6b30     clrf	0x30, 0x1           	CLRF	(_stateMenu + 1), B
001726   010e     movlb	0xe                	BANKSEL	_alarmStatus
                                           ;	.line	371; test.c	alarmStatus = 0;
001728   6b3b     clrf	0x3b, 0x1           	CLRF	_alarmStatus, B
00172a   010e     movlb	0xe                	BANKSEL	(_alarmStatus + 1)
00172c   6b3c     clrf	0x3c, 0x1           	CLRF	(_alarmStatus + 1), B
                                           ;	.line	372; test.c	LED0_IO = 0;
00172e   9091     bcf	0x91, 0, 0           	BCF	_LATJbits, 0
                                           ;	.line	373; test.c	LED1_IO = 0;
001730   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	374; test.c	LED2_IO = 0;
001732   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           _00240_DS_:
                                           ;	.line	379; test.c	INTCON3bits.INT1F = 0; // clear flag
001734   90f0     bcf	0xf0, 0, 0           	BCF	_INTCON3bits, 0
                                           _00243_DS_:
001736   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001738   f000
00173a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00173c   ffd9
00173e   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
001740   fffb
001742   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
001744   fffa
001746   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
001748   ffea
00174a   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
00174c   ffe9
00174e   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
001750   fff4
001752   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
001754   fff3
001756   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
001758   ffe0
00175a   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
00175c   ffd8
00175e   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
001760   ffe8
001762   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_test__ConvertTime	code
                                           _ConvertTime:
                                           ;	.line	265; test.c	void ConvertTime(short time, char* str){
0024b2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0024b4   ffe5
0024b6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0024b8   ffd9
0024ba   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0024bc   ffe5
0024be   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0024c0   ffe5
0024c2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0024c4   ffe5
0024c6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0024c8   ffe5
0024ca   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0024cc   ffe5
0024ce   0e02     movlw	0x2                	MOVLW	0x02
0024d0   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0024d2   f000
0024d4   0e03     movlw	0x3                	MOVLW	0x03
0024d6   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0024d8   f001
0024da   0e04     movlw	0x4                	MOVLW	0x04
0024dc   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0024de   f002
0024e0   0e05     movlw	0x5                	MOVLW	0x05
0024e2   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0024e4   f003
0024e6   0e06     movlw	0x6                	MOVLW	0x06
0024e8   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0024ea   f004
                                           ;	.line	266; test.c	if(time<10){
0024ec   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0024ee   0f80     addlw	0x80               	ADDLW	0x80
0024f0   0f80     addlw	0x80               	ADDLW	0x80
0024f2   e102     bnz	0x24f8               	BNZ	_00214_DS_
0024f4   0e0a     movlw	0xa                	MOVLW	0x0a
0024f6   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00214_DS_:
0024f8   e215     bc	0x2524                	BC	_00209_DS_
                                           ;	.line	267; test.c	sprintf(str,"0%u\0",time);
0024fa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0024fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0024fe   5000     movf	0, 0, 0             	MOVF	r0x00, W
002500   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002502   0e00     movlw	0                  	MOVLW	UPPER(__str_10)
002504   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002506   0e1c     movlw	0x1c               	MOVLW	HIGH(__str_10)
002508   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00250a   0e3c     movlw	0x3c               	MOVLW	LOW(__str_10)
00250c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00250e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002510   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002512   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002514   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002516   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002518   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00251a   ec50     call	0x20a0, 0           	CALL	_sprintf
00251c   f010
00251e   0e08     movlw	0x8                	MOVLW	0x08
002520   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002522   d014     bra	0x254c               	BRA	_00211_DS_
                                           _00209_DS_:
                                           ;	.line	269; test.c	sprintf(str,"%u\0",time);
002524   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002526   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002528   5000     movf	0, 0, 0             	MOVF	r0x00, W
00252a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00252c   0e00     movlw	0                  	MOVLW	UPPER(__str_11)
00252e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002530   0e1c     movlw	0x1c               	MOVLW	HIGH(__str_11)
002532   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002534   0e42     movlw	0x42               	MOVLW	LOW(__str_11)
002536   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002538   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00253a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00253c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00253e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002540   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002542   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002544   ec50     call	0x20a0, 0           	CALL	_sprintf
002546   f010
002548   0e08     movlw	0x8                	MOVLW	0x08
00254a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00211_DS_:
00254c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00254e   f004
002550   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002552   f003
002554   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002556   f002
002558   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00255a   f001
00255c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00255e   f000
002560   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002562   ffd9
002564   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__ledAlarm	code
                                           _ledAlarm:
                                           ;	.line	257; test.c	void ledAlarm(){
0028e4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0028e6   ffe5
0028e8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0028ea   ffd9
0028ec   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0028ee   ffe5
                                           ;	.line	258; test.c	LED1_IO ^= 1;
0028f0   6a00     clrf	0, 0                	CLRF	r0x00
0028f2   b291     btfsc	0x91, 0x1, 0       	BTFSC	_LATJbits, 1
0028f4   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0028f6   0e01     movlw	0x1                	MOVLW	0x01
0028f8   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
0028fa   5000     movf	0, 0, 0             	MOVF	r0x00, W
0028fc   0b01     andlw	0x1                	ANDLW	0x01
0028fe   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
002900   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
002902   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
002904   0bfd     andlw	0xfd               	ANDLW	0xfd
002906   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
002908   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
                                           ;	.line	259; test.c	LED2_IO ^= 1;
00290a   6a00     clrf	0, 0                	CLRF	r0x00
00290c   b491     btfsc	0x91, 0x2, 0       	BTFSC	_LATJbits, 2
00290e   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002910   0e01     movlw	0x1                	MOVLW	0x01
002912   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
002914   5000     movf	0, 0, 0             	MOVF	r0x00, W
002916   0b01     andlw	0x1                	ANDLW	0x01
002918   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
00291a   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
00291c   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
00291e   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
002920   0bfb     andlw	0xfb               	ANDLW	0xfb
002922   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
002924   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
002926   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002928   f000
00292a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00292c   ffd9
00292e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__UpdateLCD	code
                                           _UpdateLCD:
                                           ;	.line	193; test.c	void UpdateLCD(){
000852   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000854   ffe5
000856   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000858   ffd9
00085a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00085c   ffe5
00085e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000860   ffe5
000862   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000864   ffe5
000866   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000868   ffe5
00086a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00086c   ffe5
00086e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000870   ffe5
000872   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000874   ffe5
000876   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000878   ffe5
00087a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00087c   ffe5
00087e   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
000880   ffe5
000882   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
000884   ffe5
000886   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
000888   ffe5
00088a   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
00088c   ffe5
00088e   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
000890   ffe5
000892   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
000894   ffe5
                                           ;	.line	194; test.c	switch(stateMenu){
000896   0e00     movlw	0                  	MOVLW	0x00
000898   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
00089a   5d30     subwf	0x30, 0, 0x1       	SUBWF	(_stateMenu + 1), W, B
00089c   e103     bnz	0x8a4                	BNZ	_00197_DS_
00089e   0e08     movlw	0x8                	MOVLW	0x08
0008a0   010e     movlb	0xe                	BANKSEL	_stateMenu
0008a2   5d2f     subwf	0x2f, 0, 0x1       	SUBWF	_stateMenu, W, B
                                           _00197_DS_:
0008a4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0008a6   ef00     goto	0x1000              	GOTO	_00192_DS_
0008a8   f008
0008aa   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
0008ac   ffe5
0008ae   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
0008b0   ffe5
0008b2   6a10     clrf	0x10, 0             	CLRF	r0x10
0008b4   010e     movlb	0xe                	BANKSEL	_stateMenu
0008b6   352f     rlcf	0x2f, 0, 0x1        	RLCF	_stateMenu, W, B
0008b8   3610     rlcf	0x10, 0x1, 0        	RLCF	r0x10, F
0008ba   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
0008bc   3610     rlcf	0x10, 0x1, 0        	RLCF	r0x10, F
0008be   0bfc     andlw	0xfc               	ANDLW	0xfc
0008c0   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
0008c2   0e00     movlw	0                  	MOVLW	UPPER(_00198_DS_)
0008c4   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
0008c6   0e08     movlw	0x8                	MOVLW	HIGH(_00198_DS_)
0008c8   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
0008ca   0ee2     movlw	0xe2               	MOVLW	LOW(_00198_DS_)
0008cc   260f     addwf	0xf, 0x1, 0        	ADDWF	r0x0f, F
0008ce   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
0008d0   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
0008d2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0008d4   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
0008d6   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
0008d8   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
0008da   f010
0008dc   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
0008de   f00f
0008e0   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00198_DS_:
0008e2   ef81     goto	0x902               	GOTO	_00181_DS_
0008e4   f004
0008e6   ef8b     goto	0xb16               	GOTO	_00185_DS_
0008e8   f005
0008ea   efa3     goto	0xb46               	GOTO	_00186_DS_
0008ec   f005
0008ee   ef26     goto	0xc4c               	GOTO	_00187_DS_
0008f0   f006
0008f2   efa9     goto	0xd52               	GOTO	_00188_DS_
0008f4   f006
0008f6   efc0     goto	0xd80               	GOTO	_00189_DS_
0008f8   f006
0008fa   ef1f     goto	0xe3e               	GOTO	_00190_DS_
0008fc   f007
0008fe   ef7e     goto	0xefc               	GOTO	_00191_DS_
000900   f007
                                           _00181_DS_:
                                           ;	.line	196; test.c	ConvertTime(hours, h);
000902   ce31     movff	0xe31, 0           	MOVFF	_hours, r0x00
000904   f000
000906   ce32     movff	0xe32, 0x1         	MOVFF	(_hours + 1), r0x01
000908   f001
00090a   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
00090c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00090e   0e5d     movlw	0x5d               	MOVLW	LOW(_h)
000910   6e02     movwf	0x2, 0             	MOVWF	r0x02
000912   0e80     movlw	0x80               	MOVLW	0x80
000914   6e04     movwf	0x4, 0             	MOVWF	r0x04
000916   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000918   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00091a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00091c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00091e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000920   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000922   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000924   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000926   5000     movf	0, 0, 0             	MOVF	r0x00, W
000928   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00092a   ec59     call	0x24b2, 0           	CALL	_ConvertTime
00092c   f012
00092e   0e05     movlw	0x5                	MOVLW	0x05
000930   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	197; test.c	ConvertTime(minutes, m);
000932   ce33     movff	0xe33, 0           	MOVFF	_minutes, r0x00
000934   f000
000936   ce34     movff	0xe34, 0x1         	MOVFF	(_minutes + 1), r0x01
000938   f001
00093a   0e0e     movlw	0xe                	MOVLW	HIGH(_m)
00093c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00093e   0e20     movlw	0x20               	MOVLW	LOW(_m)
000940   6e02     movwf	0x2, 0             	MOVWF	r0x02
000942   0e80     movlw	0x80               	MOVLW	0x80
000944   6e04     movwf	0x4, 0             	MOVWF	r0x04
000946   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000948   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00094a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00094c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00094e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000950   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000952   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000954   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000956   5000     movf	0, 0, 0             	MOVF	r0x00, W
000958   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00095a   ec59     call	0x24b2, 0           	CALL	_ConvertTime
00095c   f012
00095e   0e05     movlw	0x5                	MOVLW	0x05
000960   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	198; test.c	ConvertTime(seconds, s);
000962   ce35     movff	0xe35, 0           	MOVFF	_seconds, r0x00
000964   f000
000966   ce36     movff	0xe36, 0x1         	MOVFF	(_seconds + 1), r0x01
000968   f001
00096a   0e0e     movlw	0xe                	MOVLW	HIGH(_s)
00096c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00096e   0e23     movlw	0x23               	MOVLW	LOW(_s)
000970   6e02     movwf	0x2, 0             	MOVWF	r0x02
000972   0e80     movlw	0x80               	MOVLW	0x80
000974   6e04     movwf	0x4, 0             	MOVWF	r0x04
000976   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000978   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00097a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00097c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00097e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000980   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000982   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000984   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000986   5000     movf	0, 0, 0             	MOVF	r0x00, W
000988   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00098a   ec59     call	0x24b2, 0           	CALL	_ConvertTime
00098c   f012
00098e   0e05     movlw	0x5                	MOVLW	0x05
000990   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	199; test.c	ConvertTime(alarmHours, hA);
000992   ce37     movff	0xe37, 0           	MOVFF	_alarmHours, r0x00
000994   f000
000996   ce38     movff	0xe38, 0x1         	MOVFF	(_alarmHours + 1), r0x01
000998   f001
00099a   0e0e     movlw	0xe                	MOVLW	HIGH(_hA)
00099c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00099e   0e26     movlw	0x26               	MOVLW	LOW(_hA)
0009a0   6e02     movwf	0x2, 0             	MOVWF	r0x02
0009a2   0e80     movlw	0x80               	MOVLW	0x80
0009a4   6e04     movwf	0x4, 0             	MOVWF	r0x04
0009a6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0009a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009aa   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0009ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009ae   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0009b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009b2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0009b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009b6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0009b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009ba   ec59     call	0x24b2, 0           	CALL	_ConvertTime
0009bc   f012
0009be   0e05     movlw	0x5                	MOVLW	0x05
0009c0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	200; test.c	ConvertTime(alarmMinutes, mA);
0009c2   ce39     movff	0xe39, 0           	MOVFF	_alarmMinutes, r0x00
0009c4   f000
0009c6   ce3a     movff	0xe3a, 0x1         	MOVFF	(_alarmMinutes + 1), r0x01
0009c8   f001
0009ca   0e0e     movlw	0xe                	MOVLW	HIGH(_mA)
0009cc   6e03     movwf	0x3, 0             	MOVWF	r0x03
0009ce   0e29     movlw	0x29               	MOVLW	LOW(_mA)
0009d0   6e02     movwf	0x2, 0             	MOVWF	r0x02
0009d2   0e80     movlw	0x80               	MOVLW	0x80
0009d4   6e04     movwf	0x4, 0             	MOVWF	r0x04
0009d6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0009d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009da   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0009dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009de   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0009e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009e2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0009e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009e6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0009e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009ea   ec59     call	0x24b2, 0           	CALL	_ConvertTime
0009ec   f012
0009ee   0e05     movlw	0x5                	MOVLW	0x05
0009f0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0009f2   010e     movlb	0xe                	BANKSEL	_alarmStatus
                                           ;	.line	202; test.c	if(alarmStatus){
0009f4   513b     movf	0x3b, 0, 0x1        	MOVF	_alarmStatus, W, B
0009f6   010e     movlb	0xe                	BANKSEL	(_alarmStatus + 1)
0009f8   113c     iorwf	0x3c, 0, 0x1       	IORWF	(_alarmStatus + 1), W, B
0009fa   e02f     bz	0xa5a                 	BZ	_00183_DS_
                                           ;	.line	204; test.c	sprintf(alarmState,"ON %sh%s\0",hA, mA);
0009fc   0e0e     movlw	0xe                	MOVLW	HIGH(_mA)
0009fe   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a00   0e29     movlw	0x29               	MOVLW	LOW(_mA)
000a02   6e00     movwf	0, 0               	MOVWF	r0x00
000a04   0e80     movlw	0x80               	MOVLW	0x80
000a06   6e02     movwf	0x2, 0             	MOVWF	r0x02
000a08   0e0e     movlw	0xe                	MOVLW	HIGH(_hA)
000a0a   6e04     movwf	0x4, 0             	MOVWF	r0x04
000a0c   0e26     movlw	0x26               	MOVLW	LOW(_hA)
000a0e   6e03     movwf	0x3, 0             	MOVWF	r0x03
000a10   0e80     movlw	0x80               	MOVLW	0x80
000a12   6e05     movwf	0x5, 0             	MOVWF	r0x05
000a14   0e0f     movlw	0xf                	MOVLW	HIGH(_alarmState)
000a16   6e07     movwf	0x7, 0             	MOVWF	r0x07
000a18   0e4e     movlw	0x4e               	MOVLW	LOW(_alarmState)
000a1a   6e06     movwf	0x6, 0             	MOVWF	r0x06
000a1c   0e80     movlw	0x80               	MOVLW	0x80
000a1e   6e08     movwf	0x8, 0             	MOVWF	r0x08
000a20   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000a22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a24   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000a26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a28   5000     movf	0, 0, 0             	MOVF	r0x00, W
000a2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a2c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000a2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a30   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000a32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a34   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000a36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a38   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
000a3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a3c   0e1b     movlw	0x1b               	MOVLW	HIGH(__str_0)
000a3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a40   0e46     movlw	0x46               	MOVLW	LOW(__str_0)
000a42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a44   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000a46   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a48   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000a4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a4c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000a4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a50   ec50     call	0x20a0, 0           	CALL	_sprintf
000a52   f010
000a54   0e0c     movlw	0xc                	MOVLW	0x0c
000a56   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000a58   d016     bra	0xa86                	BRA	_00184_DS_
                                           _00183_DS_:
                                           ;	.line	206; test.c	sprintf(alarmState,"OFF     \0");
000a5a   0e0f     movlw	0xf                	MOVLW	HIGH(_alarmState)
000a5c   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a5e   0e4e     movlw	0x4e               	MOVLW	LOW(_alarmState)
000a60   6e00     movwf	0, 0               	MOVWF	r0x00
000a62   0e80     movlw	0x80               	MOVLW	0x80
000a64   6e02     movwf	0x2, 0             	MOVWF	r0x02
000a66   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
000a68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a6a   0e1b     movlw	0x1b               	MOVLW	HIGH(__str_1)
000a6c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a6e   0e50     movlw	0x50               	MOVLW	LOW(__str_1)
000a70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a72   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000a74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a76   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000a78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a7a   5000     movf	0, 0, 0             	MOVF	r0x00, W
000a7c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a7e   ec50     call	0x20a0, 0           	CALL	_sprintf
000a80   f010
000a82   0e06     movlw	0x6                	MOVLW	0x06
000a84   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00184_DS_:
                                           ;	.line	208; test.c	sprintf(LCDPrint,"    %s:%s:%s    Alarm %s",h,m,s,alarmState);
000a86   0e0f     movlw	0xf                	MOVLW	HIGH(_alarmState)
000a88   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a8a   0e4e     movlw	0x4e               	MOVLW	LOW(_alarmState)
000a8c   6e00     movwf	0, 0               	MOVWF	r0x00
000a8e   0e80     movlw	0x80               	MOVLW	0x80
000a90   6e02     movwf	0x2, 0             	MOVWF	r0x02
000a92   0e0e     movlw	0xe                	MOVLW	HIGH(_s)
000a94   6e04     movwf	0x4, 0             	MOVWF	r0x04
000a96   0e23     movlw	0x23               	MOVLW	LOW(_s)
000a98   6e03     movwf	0x3, 0             	MOVWF	r0x03
000a9a   0e80     movlw	0x80               	MOVLW	0x80
000a9c   6e05     movwf	0x5, 0             	MOVWF	r0x05
000a9e   0e0e     movlw	0xe                	MOVLW	HIGH(_m)
000aa0   6e07     movwf	0x7, 0             	MOVWF	r0x07
000aa2   0e20     movlw	0x20               	MOVLW	LOW(_m)
000aa4   6e06     movwf	0x6, 0             	MOVWF	r0x06
000aa6   0e80     movlw	0x80               	MOVLW	0x80
000aa8   6e08     movwf	0x8, 0             	MOVWF	r0x08
000aaa   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
000aac   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
000aae   0e5d     movlw	0x5d               	MOVLW	LOW(_h)
000ab0   6e09     movwf	0x9, 0             	MOVWF	r0x09
000ab2   0e80     movlw	0x80               	MOVLW	0x80
000ab4   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
000ab6   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDPrint)
000ab8   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
000aba   0e21     movlw	0x21               	MOVLW	LOW(_LCDPrint)
000abc   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
000abe   0e80     movlw	0x80               	MOVLW	0x80
000ac0   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
000ac2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000ac4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ac6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000ac8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aca   5000     movf	0, 0, 0             	MOVF	r0x00, W
000acc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ace   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000ad0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ad2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000ad4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ad6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000ad8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ada   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000adc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ade   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000ae0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ae2   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000ae4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ae6   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
000ae8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aea   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000aec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aee   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000af0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000af2   0e00     movlw	0                  	MOVLW	UPPER(__str_2)
000af4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000af6   0e1b     movlw	0x1b               	MOVLW	HIGH(__str_2)
000af8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000afa   0e5a     movlw	0x5a               	MOVLW	LOW(__str_2)
000afc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000afe   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
000b00   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b02   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
000b04   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b06   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
000b08   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b0a   ec50     call	0x20a0, 0           	CALL	_sprintf
000b0c   f010
000b0e   0e12     movlw	0x12               	MOVLW	0x12
000b10   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	209; test.c	break;
000b12   ef00     goto	0x1000              	GOTO	_00192_DS_
000b14   f008
                                           _00185_DS_:
                                           ;	.line	211; test.c	sprintf(LCDPrint, "      MENU        Set time ?");
000b16   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDPrint)
000b18   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b1a   0e21     movlw	0x21               	MOVLW	LOW(_LCDPrint)
000b1c   6e00     movwf	0, 0               	MOVWF	r0x00
000b1e   0e80     movlw	0x80               	MOVLW	0x80
000b20   6e02     movwf	0x2, 0             	MOVWF	r0x02
000b22   0e00     movlw	0                  	MOVLW	UPPER(__str_3)
000b24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b26   0e1b     movlw	0x1b               	MOVLW	HIGH(__str_3)
000b28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b2a   0e74     movlw	0x74               	MOVLW	LOW(__str_3)
000b2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b2e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000b30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b32   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000b34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b36   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b38   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b3a   ec50     call	0x20a0, 0           	CALL	_sprintf
000b3c   f010
000b3e   0e06     movlw	0x6                	MOVLW	0x06
000b40   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	212; test.c	break;
000b42   ef00     goto	0x1000              	GOTO	_00192_DS_
000b44   f008
                                           _00186_DS_:
                                           ;	.line	214; test.c	ConvertTime(hours, h);
000b46   ce31     movff	0xe31, 0           	MOVFF	_hours, r0x00
000b48   f000
000b4a   ce32     movff	0xe32, 0x1         	MOVFF	(_hours + 1), r0x01
000b4c   f001
000b4e   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
000b50   6e03     movwf	0x3, 0             	MOVWF	r0x03
000b52   0e5d     movlw	0x5d               	MOVLW	LOW(_h)
000b54   6e02     movwf	0x2, 0             	MOVWF	r0x02
000b56   0e80     movlw	0x80               	MOVLW	0x80
000b58   6e04     movwf	0x4, 0             	MOVWF	r0x04
000b5a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000b5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b5e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000b60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b62   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000b64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b66   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000b68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b6a   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b6c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b6e   ec59     call	0x24b2, 0           	CALL	_ConvertTime
000b70   f012
000b72   0e05     movlw	0x5                	MOVLW	0x05
000b74   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	215; test.c	ConvertTime(minutes, m);
000b76   ce33     movff	0xe33, 0           	MOVFF	_minutes, r0x00
000b78   f000
000b7a   ce34     movff	0xe34, 0x1         	MOVFF	(_minutes + 1), r0x01
000b7c   f001
000b7e   0e0e     movlw	0xe                	MOVLW	HIGH(_m)
000b80   6e03     movwf	0x3, 0             	MOVWF	r0x03
000b82   0e20     movlw	0x20               	MOVLW	LOW(_m)
000b84   6e02     movwf	0x2, 0             	MOVWF	r0x02
000b86   0e80     movlw	0x80               	MOVLW	0x80
000b88   6e04     movwf	0x4, 0             	MOVWF	r0x04
000b8a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000b8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b8e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000b90   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b92   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000b94   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b96   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000b98   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b9a   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b9c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b9e   ec59     call	0x24b2, 0           	CALL	_ConvertTime
000ba0   f012
000ba2   0e05     movlw	0x5                	MOVLW	0x05
000ba4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	216; test.c	ConvertTime(seconds, s);
000ba6   ce35     movff	0xe35, 0           	MOVFF	_seconds, r0x00
000ba8   f000
000baa   ce36     movff	0xe36, 0x1         	MOVFF	(_seconds + 1), r0x01
000bac   f001
000bae   0e0e     movlw	0xe                	MOVLW	HIGH(_s)
000bb0   6e03     movwf	0x3, 0             	MOVWF	r0x03
000bb2   0e23     movlw	0x23               	MOVLW	LOW(_s)
000bb4   6e02     movwf	0x2, 0             	MOVWF	r0x02
000bb6   0e80     movlw	0x80               	MOVLW	0x80
000bb8   6e04     movwf	0x4, 0             	MOVWF	r0x04
000bba   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000bbc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bbe   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000bc0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bc2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000bc4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bc6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000bc8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bca   5000     movf	0, 0, 0             	MOVF	r0x00, W
000bcc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bce   ec59     call	0x24b2, 0           	CALL	_ConvertTime
000bd0   f012
000bd2   0e05     movlw	0x5                	MOVLW	0x05
000bd4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	218; test.c	sprintf(LCDPrint,"Set Minutes     %s:[%s]:%s",h,m,s);
000bd6   0e0e     movlw	0xe                	MOVLW	HIGH(_s)
000bd8   6e01     movwf	0x1, 0             	MOVWF	r0x01
000bda   0e23     movlw	0x23               	MOVLW	LOW(_s)
000bdc   6e00     movwf	0, 0               	MOVWF	r0x00
000bde   0e80     movlw	0x80               	MOVLW	0x80
000be0   6e02     movwf	0x2, 0             	MOVWF	r0x02
000be2   0e0e     movlw	0xe                	MOVLW	HIGH(_m)
000be4   6e04     movwf	0x4, 0             	MOVWF	r0x04
000be6   0e20     movlw	0x20               	MOVLW	LOW(_m)
000be8   6e03     movwf	0x3, 0             	MOVWF	r0x03
000bea   0e80     movlw	0x80               	MOVLW	0x80
000bec   6e05     movwf	0x5, 0             	MOVWF	r0x05
000bee   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
000bf0   6e07     movwf	0x7, 0             	MOVWF	r0x07
000bf2   0e5d     movlw	0x5d               	MOVLW	LOW(_h)
000bf4   6e06     movwf	0x6, 0             	MOVWF	r0x06
000bf6   0e80     movlw	0x80               	MOVLW	0x80
000bf8   6e08     movwf	0x8, 0             	MOVWF	r0x08
000bfa   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDPrint)
000bfc   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
000bfe   0e21     movlw	0x21               	MOVLW	LOW(_LCDPrint)
000c00   6e09     movwf	0x9, 0             	MOVWF	r0x09
000c02   0e80     movlw	0x80               	MOVLW	0x80
000c04   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
000c06   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000c08   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c0a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c0c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c0e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000c10   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c12   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000c14   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c16   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c18   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c1a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000c1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c1e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000c20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c22   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000c24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c26   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000c28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c2a   0e00     movlw	0                  	MOVLW	UPPER(__str_4)
000c2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c2e   0e1b     movlw	0x1b               	MOVLW	HIGH(__str_4)
000c30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c32   0e92     movlw	0x92               	MOVLW	LOW(__str_4)
000c34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c36   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
000c38   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c3a   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000c3c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c3e   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000c40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c42   ec50     call	0x20a0, 0           	CALL	_sprintf
000c44   f010
000c46   0e0f     movlw	0xf                	MOVLW	0x0f
000c48   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	219; test.c	break;
000c4a   d1da     bra	0x1000               	BRA	_00192_DS_
                                           _00187_DS_:
                                           ;	.line	221; test.c	ConvertTime(hours, h);
000c4c   ce31     movff	0xe31, 0           	MOVFF	_hours, r0x00
000c4e   f000
000c50   ce32     movff	0xe32, 0x1         	MOVFF	(_hours + 1), r0x01
000c52   f001
000c54   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
000c56   6e03     movwf	0x3, 0             	MOVWF	r0x03
000c58   0e5d     movlw	0x5d               	MOVLW	LOW(_h)
000c5a   6e02     movwf	0x2, 0             	MOVWF	r0x02
000c5c   0e80     movlw	0x80               	MOVLW	0x80
000c5e   6e04     movwf	0x4, 0             	MOVWF	r0x04
000c60   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c62   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c64   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000c66   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c68   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000c6a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c6c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c6e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c70   5000     movf	0, 0, 0             	MOVF	r0x00, W
000c72   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c74   ec59     call	0x24b2, 0           	CALL	_ConvertTime
000c76   f012
000c78   0e05     movlw	0x5                	MOVLW	0x05
000c7a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	222; test.c	ConvertTime(minutes, m);
000c7c   ce33     movff	0xe33, 0           	MOVFF	_minutes, r0x00
000c7e   f000
000c80   ce34     movff	0xe34, 0x1         	MOVFF	(_minutes + 1), r0x01
000c82   f001
000c84   0e0e     movlw	0xe                	MOVLW	HIGH(_m)
000c86   6e03     movwf	0x3, 0             	MOVWF	r0x03
000c88   0e20     movlw	0x20               	MOVLW	LOW(_m)
000c8a   6e02     movwf	0x2, 0             	MOVWF	r0x02
000c8c   0e80     movlw	0x80               	MOVLW	0x80
000c8e   6e04     movwf	0x4, 0             	MOVWF	r0x04
000c90   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c94   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000c96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c98   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000c9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c9c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ca0   5000     movf	0, 0, 0             	MOVF	r0x00, W
000ca2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ca4   ec59     call	0x24b2, 0           	CALL	_ConvertTime
000ca6   f012
000ca8   0e05     movlw	0x5                	MOVLW	0x05
000caa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	223; test.c	ConvertTime(seconds, s);
000cac   ce35     movff	0xe35, 0           	MOVFF	_seconds, r0x00
000cae   f000
000cb0   ce36     movff	0xe36, 0x1         	MOVFF	(_seconds + 1), r0x01
000cb2   f001
000cb4   0e0e     movlw	0xe                	MOVLW	HIGH(_s)
000cb6   6e03     movwf	0x3, 0             	MOVWF	r0x03
000cb8   0e23     movlw	0x23               	MOVLW	LOW(_s)
000cba   6e02     movwf	0x2, 0             	MOVWF	r0x02
000cbc   0e80     movlw	0x80               	MOVLW	0x80
000cbe   6e04     movwf	0x4, 0             	MOVWF	r0x04
000cc0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000cc2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cc4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000cc6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cc8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000cca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ccc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000cce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cd0   5000     movf	0, 0, 0             	MOVF	r0x00, W
000cd2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cd4   ec59     call	0x24b2, 0           	CALL	_ConvertTime
000cd6   f012
000cd8   0e05     movlw	0x5                	MOVLW	0x05
000cda   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	225; test.c	sprintf(LCDPrint,"Set Hours       [%s]:%s:%s",h,m,s);
000cdc   0e0e     movlw	0xe                	MOVLW	HIGH(_s)
000cde   6e01     movwf	0x1, 0             	MOVWF	r0x01
000ce0   0e23     movlw	0x23               	MOVLW	LOW(_s)
000ce2   6e00     movwf	0, 0               	MOVWF	r0x00
000ce4   0e80     movlw	0x80               	MOVLW	0x80
000ce6   6e02     movwf	0x2, 0             	MOVWF	r0x02
000ce8   0e0e     movlw	0xe                	MOVLW	HIGH(_m)
000cea   6e04     movwf	0x4, 0             	MOVWF	r0x04
000cec   0e20     movlw	0x20               	MOVLW	LOW(_m)
000cee   6e03     movwf	0x3, 0             	MOVWF	r0x03
000cf0   0e80     movlw	0x80               	MOVLW	0x80
000cf2   6e05     movwf	0x5, 0             	MOVWF	r0x05
000cf4   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
000cf6   6e07     movwf	0x7, 0             	MOVWF	r0x07
000cf8   0e5d     movlw	0x5d               	MOVLW	LOW(_h)
000cfa   6e06     movwf	0x6, 0             	MOVWF	r0x06
000cfc   0e80     movlw	0x80               	MOVLW	0x80
000cfe   6e08     movwf	0x8, 0             	MOVWF	r0x08
000d00   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDPrint)
000d02   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
000d04   0e21     movlw	0x21               	MOVLW	LOW(_LCDPrint)
000d06   6e09     movwf	0x9, 0             	MOVWF	r0x09
000d08   0e80     movlw	0x80               	MOVLW	0x80
000d0a   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
000d0c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d10   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d14   5000     movf	0, 0, 0             	MOVF	r0x00, W
000d16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d18   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000d1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d1c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000d1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d20   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000d22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d24   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000d26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d28   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000d2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d2c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000d2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d30   0e00     movlw	0                  	MOVLW	UPPER(__str_5)
000d32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d34   0e1b     movlw	0x1b               	MOVLW	HIGH(__str_5)
000d36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d38   0eae     movlw	0xae               	MOVLW	LOW(__str_5)
000d3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d3c   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
000d3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d40   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000d42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d44   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000d46   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d48   ec50     call	0x20a0, 0           	CALL	_sprintf
000d4a   f010
000d4c   0e0f     movlw	0xf                	MOVLW	0x0f
000d4e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	226; test.c	break;
000d50   d157     bra	0x1000               	BRA	_00192_DS_
                                           _00188_DS_:
                                           ;	.line	228; test.c	sprintf(LCDPrint, "      MENU      Set Alarmclock?");
000d52   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDPrint)
000d54   6e01     movwf	0x1, 0             	MOVWF	r0x01
000d56   0e21     movlw	0x21               	MOVLW	LOW(_LCDPrint)
000d58   6e00     movwf	0, 0               	MOVWF	r0x00
000d5a   0e80     movlw	0x80               	MOVLW	0x80
000d5c   6e02     movwf	0x2, 0             	MOVWF	r0x02
000d5e   0e00     movlw	0                  	MOVLW	UPPER(__str_6)
000d60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d62   0e1b     movlw	0x1b               	MOVLW	HIGH(__str_6)
000d64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d66   0eca     movlw	0xca               	MOVLW	LOW(__str_6)
000d68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d6a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d6c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d6e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d72   5000     movf	0, 0, 0             	MOVF	r0x00, W
000d74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d76   ec50     call	0x20a0, 0           	CALL	_sprintf
000d78   f010
000d7a   0e06     movlw	0x6                	MOVLW	0x06
000d7c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	229; test.c	break;
000d7e   d140     bra	0x1000               	BRA	_00192_DS_
                                           _00189_DS_:
                                           ;	.line	231; test.c	ConvertTime(alarmHours, h);
000d80   ce37     movff	0xe37, 0           	MOVFF	_alarmHours, r0x00
000d82   f000
000d84   ce38     movff	0xe38, 0x1         	MOVFF	(_alarmHours + 1), r0x01
000d86   f001
000d88   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
000d8a   6e03     movwf	0x3, 0             	MOVWF	r0x03
000d8c   0e5d     movlw	0x5d               	MOVLW	LOW(_h)
000d8e   6e02     movwf	0x2, 0             	MOVWF	r0x02
000d90   0e80     movlw	0x80               	MOVLW	0x80
000d92   6e04     movwf	0x4, 0             	MOVWF	r0x04
000d94   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000d96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d98   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000d9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d9c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000da0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000da2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000da4   5000     movf	0, 0, 0             	MOVF	r0x00, W
000da6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000da8   ec59     call	0x24b2, 0           	CALL	_ConvertTime
000daa   f012
000dac   0e05     movlw	0x5                	MOVLW	0x05
000dae   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	232; test.c	ConvertTime(alarmMinutes, m);
000db0   ce39     movff	0xe39, 0           	MOVFF	_alarmMinutes, r0x00
000db2   f000
000db4   ce3a     movff	0xe3a, 0x1         	MOVFF	(_alarmMinutes + 1), r0x01
000db6   f001
000db8   0e0e     movlw	0xe                	MOVLW	HIGH(_m)
000dba   6e03     movwf	0x3, 0             	MOVWF	r0x03
000dbc   0e20     movlw	0x20               	MOVLW	LOW(_m)
000dbe   6e02     movwf	0x2, 0             	MOVWF	r0x02
000dc0   0e80     movlw	0x80               	MOVLW	0x80
000dc2   6e04     movwf	0x4, 0             	MOVWF	r0x04
000dc4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000dc6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dc8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000dca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dcc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000dce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dd0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000dd2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dd4   5000     movf	0, 0, 0             	MOVF	r0x00, W
000dd6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dd8   ec59     call	0x24b2, 0           	CALL	_ConvertTime
000dda   f012
000ddc   0e05     movlw	0x5                	MOVLW	0x05
000dde   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	233; test.c	sprintf(LCDPrint,"Set Alarm Min    %s:[%s]",h,m);
000de0   0e0e     movlw	0xe                	MOVLW	HIGH(_m)
000de2   6e01     movwf	0x1, 0             	MOVWF	r0x01
000de4   0e20     movlw	0x20               	MOVLW	LOW(_m)
000de6   6e00     movwf	0, 0               	MOVWF	r0x00
000de8   0e80     movlw	0x80               	MOVLW	0x80
000dea   6e02     movwf	0x2, 0             	MOVWF	r0x02
000dec   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
000dee   6e04     movwf	0x4, 0             	MOVWF	r0x04
000df0   0e5d     movlw	0x5d               	MOVLW	LOW(_h)
000df2   6e03     movwf	0x3, 0             	MOVWF	r0x03
000df4   0e80     movlw	0x80               	MOVLW	0x80
000df6   6e05     movwf	0x5, 0             	MOVWF	r0x05
000df8   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDPrint)
000dfa   6e07     movwf	0x7, 0             	MOVWF	r0x07
000dfc   0e21     movlw	0x21               	MOVLW	LOW(_LCDPrint)
000dfe   6e06     movwf	0x6, 0             	MOVWF	r0x06
000e00   0e80     movlw	0x80               	MOVLW	0x80
000e02   6e08     movwf	0x8, 0             	MOVWF	r0x08
000e04   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000e06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e08   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000e0a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e0c   5000     movf	0, 0, 0             	MOVF	r0x00, W
000e0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e10   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000e12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e14   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000e16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e18   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000e1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e1c   0e00     movlw	0                  	MOVLW	UPPER(__str_7)
000e1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e20   0e1b     movlw	0x1b               	MOVLW	HIGH(__str_7)
000e22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e24   0eea     movlw	0xea               	MOVLW	LOW(__str_7)
000e26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e28   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000e2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e2c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000e2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e30   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000e32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e34   ec50     call	0x20a0, 0           	CALL	_sprintf
000e36   f010
000e38   0e0c     movlw	0xc                	MOVLW	0x0c
000e3a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	234; test.c	break;
000e3c   d0e1     bra	0x1000               	BRA	_00192_DS_
                                           _00190_DS_:
                                           ;	.line	236; test.c	ConvertTime(alarmHours, h);
000e3e   ce37     movff	0xe37, 0           	MOVFF	_alarmHours, r0x00
000e40   f000
000e42   ce38     movff	0xe38, 0x1         	MOVFF	(_alarmHours + 1), r0x01
000e44   f001
000e46   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
000e48   6e03     movwf	0x3, 0             	MOVWF	r0x03
000e4a   0e5d     movlw	0x5d               	MOVLW	LOW(_h)
000e4c   6e02     movwf	0x2, 0             	MOVWF	r0x02
000e4e   0e80     movlw	0x80               	MOVLW	0x80
000e50   6e04     movwf	0x4, 0             	MOVWF	r0x04
000e52   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000e54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e56   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000e58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e5a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000e5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e5e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000e60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e62   5000     movf	0, 0, 0             	MOVF	r0x00, W
000e64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e66   ec59     call	0x24b2, 0           	CALL	_ConvertTime
000e68   f012
000e6a   0e05     movlw	0x5                	MOVLW	0x05
000e6c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	237; test.c	ConvertTime(alarmMinutes, m);
000e6e   ce39     movff	0xe39, 0           	MOVFF	_alarmMinutes, r0x00
000e70   f000
000e72   ce3a     movff	0xe3a, 0x1         	MOVFF	(_alarmMinutes + 1), r0x01
000e74   f001
000e76   0e0e     movlw	0xe                	MOVLW	HIGH(_m)
000e78   6e03     movwf	0x3, 0             	MOVWF	r0x03
000e7a   0e20     movlw	0x20               	MOVLW	LOW(_m)
000e7c   6e02     movwf	0x2, 0             	MOVWF	r0x02
000e7e   0e80     movlw	0x80               	MOVLW	0x80
000e80   6e04     movwf	0x4, 0             	MOVWF	r0x04
000e82   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000e84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e86   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000e88   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e8a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000e8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e8e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000e90   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e92   5000     movf	0, 0, 0             	MOVF	r0x00, W
000e94   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e96   ec59     call	0x24b2, 0           	CALL	_ConvertTime
000e98   f012
000e9a   0e05     movlw	0x5                	MOVLW	0x05
000e9c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	238; test.c	sprintf(LCDPrint,"Set Alarm Hours  [%s]:%s",h,m);
000e9e   0e0e     movlw	0xe                	MOVLW	HIGH(_m)
000ea0   6e01     movwf	0x1, 0             	MOVWF	r0x01
000ea2   0e20     movlw	0x20               	MOVLW	LOW(_m)
000ea4   6e00     movwf	0, 0               	MOVWF	r0x00
000ea6   0e80     movlw	0x80               	MOVLW	0x80
000ea8   6e02     movwf	0x2, 0             	MOVWF	r0x02
000eaa   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
000eac   6e04     movwf	0x4, 0             	MOVWF	r0x04
000eae   0e5d     movlw	0x5d               	MOVLW	LOW(_h)
000eb0   6e03     movwf	0x3, 0             	MOVWF	r0x03
000eb2   0e80     movlw	0x80               	MOVLW	0x80
000eb4   6e05     movwf	0x5, 0             	MOVWF	r0x05
000eb6   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDPrint)
000eb8   6e07     movwf	0x7, 0             	MOVWF	r0x07
000eba   0e21     movlw	0x21               	MOVLW	LOW(_LCDPrint)
000ebc   6e06     movwf	0x6, 0             	MOVWF	r0x06
000ebe   0e80     movlw	0x80               	MOVLW	0x80
000ec0   6e08     movwf	0x8, 0             	MOVWF	r0x08
000ec2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000ec4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ec6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000ec8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000eca   5000     movf	0, 0, 0             	MOVF	r0x00, W
000ecc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ece   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000ed0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ed2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000ed4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ed6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000ed8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000eda   0e00     movlw	0                  	MOVLW	UPPER(__str_8)
000edc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ede   0e1c     movlw	0x1c               	MOVLW	HIGH(__str_8)
000ee0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ee2   0e04     movlw	0x4                	MOVLW	LOW(__str_8)
000ee4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ee6   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000ee8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000eea   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000eec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000eee   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000ef0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ef2   ec50     call	0x20a0, 0           	CALL	_sprintf
000ef4   f010
000ef6   0e0c     movlw	0xc                	MOVLW	0x0c
000ef8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	239; test.c	break;
000efa   d082     bra	0x1000               	BRA	_00192_DS_
                                           _00191_DS_:
                                           ;	.line	241; test.c	ConvertTime(hours, h);
000efc   ce31     movff	0xe31, 0           	MOVFF	_hours, r0x00
000efe   f000
000f00   ce32     movff	0xe32, 0x1         	MOVFF	(_hours + 1), r0x01
000f02   f001
000f04   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
000f06   6e03     movwf	0x3, 0             	MOVWF	r0x03
000f08   0e5d     movlw	0x5d               	MOVLW	LOW(_h)
000f0a   6e02     movwf	0x2, 0             	MOVWF	r0x02
000f0c   0e80     movlw	0x80               	MOVLW	0x80
000f0e   6e04     movwf	0x4, 0             	MOVWF	r0x04
000f10   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000f12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f14   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000f16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f18   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000f1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f1c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000f1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f20   5000     movf	0, 0, 0             	MOVF	r0x00, W
000f22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f24   ec59     call	0x24b2, 0           	CALL	_ConvertTime
000f26   f012
000f28   0e05     movlw	0x5                	MOVLW	0x05
000f2a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	242; test.c	ConvertTime(minutes, m);
000f2c   ce33     movff	0xe33, 0           	MOVFF	_minutes, r0x00
000f2e   f000
000f30   ce34     movff	0xe34, 0x1         	MOVFF	(_minutes + 1), r0x01
000f32   f001
000f34   0e0e     movlw	0xe                	MOVLW	HIGH(_m)
000f36   6e03     movwf	0x3, 0             	MOVWF	r0x03
000f38   0e20     movlw	0x20               	MOVLW	LOW(_m)
000f3a   6e02     movwf	0x2, 0             	MOVWF	r0x02
000f3c   0e80     movlw	0x80               	MOVLW	0x80
000f3e   6e04     movwf	0x4, 0             	MOVWF	r0x04
000f40   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000f42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f44   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000f46   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f48   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000f4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f4c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000f4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f50   5000     movf	0, 0, 0             	MOVF	r0x00, W
000f52   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f54   ec59     call	0x24b2, 0           	CALL	_ConvertTime
000f56   f012
000f58   0e05     movlw	0x5                	MOVLW	0x05
000f5a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	243; test.c	ConvertTime(seconds, s);
000f5c   ce35     movff	0xe35, 0           	MOVFF	_seconds, r0x00
000f5e   f000
000f60   ce36     movff	0xe36, 0x1         	MOVFF	(_seconds + 1), r0x01
000f62   f001
000f64   0e0e     movlw	0xe                	MOVLW	HIGH(_s)
000f66   6e03     movwf	0x3, 0             	MOVWF	r0x03
000f68   0e23     movlw	0x23               	MOVLW	LOW(_s)
000f6a   6e02     movwf	0x2, 0             	MOVWF	r0x02
000f6c   0e80     movlw	0x80               	MOVLW	0x80
000f6e   6e04     movwf	0x4, 0             	MOVWF	r0x04
000f70   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000f72   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f74   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000f76   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f78   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000f7a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f7c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000f7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f80   5000     movf	0, 0, 0             	MOVF	r0x00, W
000f82   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f84   ec59     call	0x24b2, 0           	CALL	_ConvertTime
000f86   f012
000f88   0e05     movlw	0x5                	MOVLW	0x05
000f8a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	245; test.c	sprintf(LCDPrint, "   It's Time !      %s:%s:%s",h,m,s);
000f8c   0e0e     movlw	0xe                	MOVLW	HIGH(_s)
000f8e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000f90   0e23     movlw	0x23               	MOVLW	LOW(_s)
000f92   6e00     movwf	0, 0               	MOVWF	r0x00
000f94   0e80     movlw	0x80               	MOVLW	0x80
000f96   6e02     movwf	0x2, 0             	MOVWF	r0x02
000f98   0e0e     movlw	0xe                	MOVLW	HIGH(_m)
000f9a   6e04     movwf	0x4, 0             	MOVWF	r0x04
000f9c   0e20     movlw	0x20               	MOVLW	LOW(_m)
000f9e   6e03     movwf	0x3, 0             	MOVWF	r0x03
000fa0   0e80     movlw	0x80               	MOVLW	0x80
000fa2   6e05     movwf	0x5, 0             	MOVWF	r0x05
000fa4   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
000fa6   6e07     movwf	0x7, 0             	MOVWF	r0x07
000fa8   0e5d     movlw	0x5d               	MOVLW	LOW(_h)
000faa   6e06     movwf	0x6, 0             	MOVWF	r0x06
000fac   0e80     movlw	0x80               	MOVLW	0x80
000fae   6e08     movwf	0x8, 0             	MOVWF	r0x08
000fb0   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDPrint)
000fb2   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
000fb4   0e21     movlw	0x21               	MOVLW	LOW(_LCDPrint)
000fb6   6e09     movwf	0x9, 0             	MOVWF	r0x09
000fb8   0e80     movlw	0x80               	MOVLW	0x80
000fba   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
000fbc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000fbe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fc0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000fc2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fc4   5000     movf	0, 0, 0             	MOVF	r0x00, W
000fc6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fc8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000fca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fcc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000fce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fd0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000fd2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fd4   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000fd6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fd8   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000fda   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fdc   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000fde   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fe0   0e00     movlw	0                  	MOVLW	UPPER(__str_9)
000fe2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fe4   0e1c     movlw	0x1c               	MOVLW	HIGH(__str_9)
000fe6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fe8   0e1e     movlw	0x1e               	MOVLW	LOW(__str_9)
000fea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fec   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
000fee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ff0   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000ff2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ff4   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000ff6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ff8   ec50     call	0x20a0, 0           	CALL	_sprintf
000ffa   f010
000ffc   0e0f     movlw	0xf                	MOVLW	0x0f
000ffe   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00192_DS_:
                                           ;	.line	248; test.c	DisplayString(0, LCDPrint);
001000   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDPrint)
001002   6e01     movwf	0x1, 0             	MOVWF	r0x01
001004   0e21     movlw	0x21               	MOVLW	LOW(_LCDPrint)
001006   6e00     movwf	0, 0               	MOVWF	r0x00
001008   0e80     movlw	0x80               	MOVLW	0x80
00100a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00100c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00100e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001010   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001012   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001014   5000     movf	0, 0, 0             	MOVF	r0x00, W
001016   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001018   0e00     movlw	0                  	MOVLW	0x00
00101a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00101c   ecc5     call	0x218a, 0           	CALL	_DisplayString
00101e   f010
001020   0e04     movlw	0x4                	MOVLW	0x04
001022   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001024   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
001026   f00e
001028   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
00102a   f00d
00102c   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
00102e   f00c
001030   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
001032   f00b
001034   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
001036   f00a
001038   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
00103a   f009
00103c   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00103e   f008
001040   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001042   f007
001044   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001046   f006
001048   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00104a   f005
00104c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00104e   f004
001050   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001052   f003
001054   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001056   f002
001058   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00105a   f001
00105c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00105e   f000
001060   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001062   ffd9
001064   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__IsItTime	code
                                           _IsItTime:
                                           ;	.line	183; test.c	void IsItTime(){
0026ae   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0026b0   ffe5
0026b2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0026b4   ffd9
0026b6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0026b8   ffe5
0026ba   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0026bc   ffe5
0026be   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0026c0   ffe5
0026c2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0026c4   ffe5
                                           ;	.line	185; test.c	if(alarmStatus & (hours == alarmHours) & (minutes == alarmMinutes)){
0026c6   6a00     clrf	0, 0                	CLRF	r0x00
0026c8   010e     movlb	0xe                	BANKSEL	_hours
0026ca   5131     movf	0x31, 0, 0x1        	MOVF	_hours, W, B
0026cc   010e     movlb	0xe                	BANKSEL	_alarmHours
0026ce   1937     xorwf	0x37, 0, 0x1       	XORWF	_alarmHours, W, B
0026d0   e106     bnz	0x26de               	BNZ	_00173_DS_
0026d2   010e     movlb	0xe                	BANKSEL	(_hours + 1)
0026d4   5132     movf	0x32, 0, 0x1        	MOVF	(_hours + 1), W, B
0026d6   010e     movlb	0xe                	BANKSEL	(_alarmHours + 1)
0026d8   1938     xorwf	0x38, 0, 0x1       	XORWF	(_alarmHours + 1), W, B
0026da   e101     bnz	0x26de               	BNZ	_00173_DS_
0026dc   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
                                           _00173_DS_:
0026de   6a01     clrf	0x1, 0              	CLRF	r0x01
0026e0   be00     btfsc	0, 0x7, 0          	BTFSC	r0x00, 7
0026e2   6801     setf	0x1, 0              	SETF	r0x01
0026e4   010e     movlb	0xe                	BANKSEL	_alarmStatus
0026e6   513b     movf	0x3b, 0, 0x1        	MOVF	_alarmStatus, W, B
0026e8   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
0026ea   010e     movlb	0xe                	BANKSEL	(_alarmStatus + 1)
0026ec   513c     movf	0x3c, 0, 0x1        	MOVF	(_alarmStatus + 1), W, B
0026ee   1601     andwf	0x1, 0x1, 0        	ANDWF	r0x01, F
0026f0   6a02     clrf	0x2, 0              	CLRF	r0x02
0026f2   010e     movlb	0xe                	BANKSEL	_minutes
0026f4   5133     movf	0x33, 0, 0x1        	MOVF	_minutes, W, B
0026f6   010e     movlb	0xe                	BANKSEL	_alarmMinutes
0026f8   1939     xorwf	0x39, 0, 0x1       	XORWF	_alarmMinutes, W, B
0026fa   e106     bnz	0x2708               	BNZ	_00176_DS_
0026fc   010e     movlb	0xe                	BANKSEL	(_minutes + 1)
0026fe   5134     movf	0x34, 0, 0x1        	MOVF	(_minutes + 1), W, B
002700   010e     movlb	0xe                	BANKSEL	(_alarmMinutes + 1)
002702   193a     xorwf	0x3a, 0, 0x1       	XORWF	(_alarmMinutes + 1), W, B
002704   e101     bnz	0x2708               	BNZ	_00176_DS_
002706   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
                                           _00176_DS_:
002708   6a03     clrf	0x3, 0              	CLRF	r0x03
00270a   be02     btfsc	0x2, 0x7, 0        	BTFSC	r0x02, 7
00270c   6803     setf	0x3, 0              	SETF	r0x03
00270e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002710   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
002712   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002714   1601     andwf	0x1, 0x1, 0        	ANDWF	r0x01, F
002716   5000     movf	0, 0, 0             	MOVF	r0x00, W
002718   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
00271a   e005     bz	0x2726                	BZ	_00169_DS_
                                           ;	.line	186; test.c	stateMenu = RINGING;
00271c   0e07     movlw	0x7                	MOVLW	0x07
00271e   010e     movlb	0xe                	BANKSEL	_stateMenu
002720   6f2f     movwf	0x2f, 0x1          	MOVWF	_stateMenu, B
002722   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
002724   6b30     clrf	0x30, 0x1           	CLRF	(_stateMenu + 1), B
                                           _00169_DS_:
002726   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002728   f003
00272a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00272c   f002
00272e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002730   f001
002732   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002734   f000
002736   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002738   ffd9
00273a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__UpdateTime	code
                                           _UpdateTime:
                                           ;	.line	158; test.c	void UpdateTime(){
0023f2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0023f4   ffe5
0023f6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0023f8   ffd9
                                           ;	.line	159; test.c	if(milliSec>=1000){
0023fa   0e03     movlw	0x3                	MOVLW	0x03
0023fc   010e     movlb	0xe                	BANKSEL	(_milliSec + 1)
0023fe   5d3e     subwf	0x3e, 0, 0x1       	SUBWF	(_milliSec + 1), W, B
002400   e103     bnz	0x2408               	BNZ	_00155_DS_
002402   0ee8     movlw	0xe8               	MOVLW	0xe8
002404   010e     movlb	0xe                	BANKSEL	_milliSec
002406   5d3d     subwf	0x3d, 0, 0x1       	SUBWF	_milliSec, W, B
                                           _00155_DS_:
002408   e30b     bnc	0x2420               	BNC	_00136_DS_
                                           ;	.line	160; test.c	milliSec -= 1000;
00240a   0e18     movlw	0x18               	MOVLW	0x18
00240c   010e     movlb	0xe                	BANKSEL	_milliSec
00240e   273d     addwf	0x3d, 0x1, 0x1     	ADDWF	_milliSec, F, B
002410   0efc     movlw	0xfc               	MOVLW	0xfc
002412   010e     movlb	0xe                	BANKSEL	(_milliSec + 1)
002414   233e     addwfc	0x3e, 0x1, 0x1    	ADDWFC	(_milliSec + 1), F, B
002416   010e     movlb	0xe                	BANKSEL	_seconds
                                           ;	.line	161; test.c	seconds++;
002418   2b35     incf	0x35, 0x1, 0x1      	INCF	_seconds, F, B
00241a   e302     bnc	0x2420               	BNC	_60298_DS_
00241c   010e     movlb	0xe                	BANKSEL	(_seconds + 1)
00241e   2b36     incf	0x36, 0x1, 0x1      	INCF	(_seconds + 1), F, B
                                           _60298_DS_:
                                           _00136_DS_:
                                           ;	.line	163; test.c	if(seconds>=60)
002420   0e00     movlw	0                  	MOVLW	0x00
002422   010e     movlb	0xe                	BANKSEL	(_seconds + 1)
002424   5d36     subwf	0x36, 0, 0x1       	SUBWF	(_seconds + 1), W, B
002426   e103     bnz	0x242e               	BNZ	_00156_DS_
002428   0e3c     movlw	0x3c               	MOVLW	0x3c
00242a   010e     movlb	0xe                	BANKSEL	_seconds
00242c   5d35     subwf	0x35, 0, 0x1       	SUBWF	_seconds, W, B
                                           _00156_DS_:
00242e   e309     bnc	0x2442               	BNC	_00138_DS_
002430   010e     movlb	0xe                	BANKSEL	_seconds
                                           ;	.line	165; test.c	seconds = 0;
002432   6b35     clrf	0x35, 0x1           	CLRF	_seconds, B
002434   010e     movlb	0xe                	BANKSEL	(_seconds + 1)
002436   6b36     clrf	0x36, 0x1           	CLRF	(_seconds + 1), B
002438   010e     movlb	0xe                	BANKSEL	_minutes
                                           ;	.line	166; test.c	minutes++;
00243a   2b33     incf	0x33, 0x1, 0x1      	INCF	_minutes, F, B
00243c   e302     bnc	0x2442               	BNC	_70299_DS_
00243e   010e     movlb	0xe                	BANKSEL	(_minutes + 1)
002440   2b34     incf	0x34, 0x1, 0x1      	INCF	(_minutes + 1), F, B
                                           _70299_DS_:
                                           _00138_DS_:
002442   010e     movlb	0xe                	BANKSEL	_minutes
                                           ;	.line	168; test.c	if(minutes == 60){
002444   5133     movf	0x33, 0, 0x1        	MOVF	_minutes, W, B
002446   0a3c     xorlw	0x3c               	XORLW	0x3c
002448   e103     bnz	0x2450               	BNZ	_00157_DS_
00244a   010e     movlb	0xe                	BANKSEL	(_minutes + 1)
00244c   5134     movf	0x34, 0, 0x1        	MOVF	(_minutes + 1), W, B
00244e   e001     bz	0x2452                	BZ	_00158_DS_
                                           _00157_DS_:
002450   d009     bra	0x2464               	BRA	_00140_DS_
                                           _00158_DS_:
002452   010e     movlb	0xe                	BANKSEL	_minutes
                                           ;	.line	169; test.c	minutes = 0;
002454   6b33     clrf	0x33, 0x1           	CLRF	_minutes, B
002456   010e     movlb	0xe                	BANKSEL	(_minutes + 1)
002458   6b34     clrf	0x34, 0x1           	CLRF	(_minutes + 1), B
00245a   010e     movlb	0xe                	BANKSEL	_hours
                                           ;	.line	170; test.c	hours++;
00245c   2b31     incf	0x31, 0x1, 0x1      	INCF	_hours, F, B
00245e   e302     bnc	0x2464               	BNC	_80300_DS_
002460   010e     movlb	0xe                	BANKSEL	(_hours + 1)
002462   2b32     incf	0x32, 0x1, 0x1      	INCF	(_hours + 1), F, B
                                           _80300_DS_:
                                           _00140_DS_:
                                           ;	.line	172; test.c	if(hours > 23){
002464   0e00     movlw	0                  	MOVLW	0x00
002466   010e     movlb	0xe                	BANKSEL	(_hours + 1)
002468   5d32     subwf	0x32, 0, 0x1       	SUBWF	(_hours + 1), W, B
00246a   e103     bnz	0x2472               	BNZ	_00159_DS_
00246c   0e18     movlw	0x18               	MOVLW	0x18
00246e   010e     movlb	0xe                	BANKSEL	_hours
002470   5d31     subwf	0x31, 0, 0x1       	SUBWF	_hours, W, B
                                           _00159_DS_:
002472   e304     bnc	0x247c               	BNC	_00142_DS_
002474   010e     movlb	0xe                	BANKSEL	_hours
                                           ;	.line	173; test.c	hours = 0;
002476   6b31     clrf	0x31, 0x1           	CLRF	_hours, B
002478   010e     movlb	0xe                	BANKSEL	(_hours + 1)
00247a   6b32     clrf	0x32, 0x1           	CLRF	(_hours + 1), B
                                           _00142_DS_:
00247c   010e     movlb	0xe                	BANKSEL	_alarmMinutes
                                           ;	.line	175; test.c	if(alarmMinutes == 60){
00247e   5139     movf	0x39, 0, 0x1        	MOVF	_alarmMinutes, W, B
002480   0a3c     xorlw	0x3c               	XORLW	0x3c
002482   e103     bnz	0x248a               	BNZ	_00160_DS_
002484   010e     movlb	0xe                	BANKSEL	(_alarmMinutes + 1)
002486   513a     movf	0x3a, 0, 0x1        	MOVF	(_alarmMinutes + 1), W, B
002488   e001     bz	0x248c                	BZ	_00161_DS_
                                           _00160_DS_:
00248a   d004     bra	0x2494               	BRA	_00144_DS_
                                           _00161_DS_:
00248c   010e     movlb	0xe                	BANKSEL	_alarmMinutes
                                           ;	.line	176; test.c	alarmMinutes = 0;
00248e   6b39     clrf	0x39, 0x1           	CLRF	_alarmMinutes, B
002490   010e     movlb	0xe                	BANKSEL	(_alarmMinutes + 1)
002492   6b3a     clrf	0x3a, 0x1           	CLRF	(_alarmMinutes + 1), B
                                           _00144_DS_:
                                           ;	.line	178; test.c	if(alarmHours>23){
002494   0e00     movlw	0                  	MOVLW	0x00
002496   010e     movlb	0xe                	BANKSEL	(_alarmHours + 1)
002498   5d38     subwf	0x38, 0, 0x1       	SUBWF	(_alarmHours + 1), W, B
00249a   e103     bnz	0x24a2               	BNZ	_00162_DS_
00249c   0e18     movlw	0x18               	MOVLW	0x18
00249e   010e     movlb	0xe                	BANKSEL	_alarmHours
0024a0   5d37     subwf	0x37, 0, 0x1       	SUBWF	_alarmHours, W, B
                                           _00162_DS_:
0024a2   e304     bnc	0x24ac               	BNC	_00147_DS_
0024a4   010e     movlb	0xe                	BANKSEL	_alarmHours
                                           ;	.line	179; test.c	alarmHours = 0;	
0024a6   6b37     clrf	0x37, 0x1           	CLRF	_alarmHours, B
0024a8   010e     movlb	0xe                	BANKSEL	(_alarmHours + 1)
0024aa   6b38     clrf	0x38, 0x1           	CLRF	(_alarmHours + 1), B
                                           _00147_DS_:
0024ac   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0024ae   ffd9
0024b0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__ConfigLed	code
                                           _ConfigLed:
                                           ;	.line	144; test.c	void ConfigLed(){
002a5c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002a5e   ffe5
002a60   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002a62   ffd9
                                           ;	.line	146; test.c	LED0_TRIS = 0;
002a64   909a     bcf	0x9a, 0, 0           	BCF	_TRISJbits, 0
                                           ;	.line	147; test.c	LED1_TRIS = 0;
002a66   929a     bcf	0x9a, 0x1, 0         	BCF	_TRISJbits, 1
                                           ;	.line	148; test.c	LED2_TRIS = 0;
002a68   949a     bcf	0x9a, 0x2, 0         	BCF	_TRISJbits, 2
                                           ;	.line	150; test.c	LED0_IO = 0;
002a6a   9091     bcf	0x91, 0, 0           	BCF	_LATJbits, 0
                                           ;	.line	151; test.c	LED1_IO = 0;
002a6c   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	152; test.c	LED2_IO = 0;
002a6e   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
002a70   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002a72   ffd9
002a74   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__ConfigButtons	code
                                           _ConfigButtons:
                                           ;	.line	132; test.c	void ConfigButtons(){
002a22   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002a24   ffe5
002a26   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002a28   ffd9
                                           ;	.line	133; test.c	INTCON3bits.INT1IP = 0; // Low priority interrupt for up butt
002a2a   9cf0     bcf	0xf0, 0x6, 0         	BCF	_INTCON3bits, 6
                                           ;	.line	134; test.c	INTCON2bits.INT3IP = 0; // Low priority interrupt for down butt
002a2c   92f1     bcf	0xf1, 0x1, 0         	BCF	_INTCON2bits, 1
                                           ;	.line	135; test.c	INTCON2bits.INTEDG1 = 0; // Interrupt on falling edge
002a2e   9af1     bcf	0xf1, 0x5, 0         	BCF	_INTCON2bits, 5
                                           ;	.line	136; test.c	INTCON2bits.INTEDG3 = 0; // Interrupt on falling edge
002a30   96f1     bcf	0xf1, 0x3, 0         	BCF	_INTCON2bits, 3
                                           ;	.line	137; test.c	INTCON3bits.INT3F = 0; // clear flag
002a32   94f0     bcf	0xf0, 0x2, 0         	BCF	_INTCON3bits, 2
                                           ;	.line	138; test.c	INTCON3bits.INT1F = 0; // clear flag	
002a34   90f0     bcf	0xf0, 0, 0           	BCF	_INTCON3bits, 0
                                           ;	.line	139; test.c	INTCON3bits.INT1E = 1; // Up button interrupt enable
002a36   86f0     bsf	0xf0, 0x3, 0         	BSF	_INTCON3bits, 3
                                           ;	.line	140; test.c	INTCON3bits.INT3E = 1; // Down button interrupt enable
002a38   8af0     bsf	0xf0, 0x5, 0         	BSF	_INTCON3bits, 5
002a3a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002a3c   ffd9
002a3e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__ConfigTimer0	code
                                           _ConfigTimer0:
                                           ;	.line	100; test.c	void ConfigTimer0(void){
001b1c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001b1e   ffe5
001b20   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001b22   ffd9
                                           ;	.line	102; test.c	INTCON2bits.TMR0IP = 1; // Priorité Haute
001b24   84f1     bsf	0xf1, 0x2, 0         	BSF	_INTCON2bits, 2
                                           ;	.line	103; test.c	INTCONbits.TMR0IE = 1;	// Activation interruption Timer 0
001b26   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
                                           ;	.line	104; test.c	INTCONbits.TMR0IF = 0; // clear timer0 flag
001b28   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           ;	.line	108; test.c	T0CONbits.T08BIT = 0;		
001b2a   9cd5     bcf	0xd5, 0x6, 0         	BCF	_T0CONbits, 6
                                           ;	.line	110; test.c	T0CONbits.T0CS = 0;	
001b2c   9ad5     bcf	0xd5, 0x5, 0         	BCF	_T0CONbits, 5
                                           ;	.line	116; test.c	T0CONbits.PSA = 0;
001b2e   96d5     bcf	0xd5, 0x3, 0         	BCF	_T0CONbits, 3
                                           ;	.line	117; test.c	T0CONbits.T0PS0 = 0; //Pas de diviseur
001b30   90d5     bcf	0xd5, 0, 0           	BCF	_T0CONbits, 0
                                           ;	.line	118; test.c	T0CONbits.T0PS1 = 0;
001b32   92d5     bcf	0xd5, 0x1, 0         	BCF	_T0CONbits, 1
                                           ;	.line	119; test.c	T0CONbits.T0PS2 = 0;
001b34   94d5     bcf	0xd5, 0x2, 0         	BCF	_T0CONbits, 2
                                           ;	.line	121; test.c	TMR0H = 0xE7;
001b36   0ee7     movlw	0xe7               	MOVLW	0xe7
001b38   6ed7     movwf	0xd7, 0            	MOVWF	_TMR0H
                                           ;	.line	122; test.c	TMR0L = 0x96;
001b3a   0e96     movlw	0x96               	MOVLW	0x96
001b3c   6ed6     movwf	0xd6, 0            	MOVWF	_TMR0L
                                           ;	.line	124; test.c	T0CONbits.TMR0ON = 1;
001b3e   8ed5     bsf	0xd5, 0x7, 0         	BSF	_T0CONbits, 7
001b40   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001b42   ffd9
001b44   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
001b46   4e4f     dcfsnz	0x4f, 0x1, 0      	DB	0x4f, 0x4e, 0x20, 0x25, 0x73, 0x68, 0x25, 0x73, 0x00, 0x00
001b48   2520     addwf	0x20, 0, 0x1       
001b4a   6873     setf	0x73, 0             
001b4c   7325     btg	0x25, 0x1, 0x1       
001b4e   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_1:
001b50   464f     rlncf	0x4f, 0x1, 0       	DB	0x4f, 0x46, 0x46, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00
001b52   2046     addwfc	0x46, 0, 0        
001b54   2020     addwfc	0x20, 0, 0        
001b56   2020     addwfc	0x20, 0, 0        
001b58   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_2:
001b5a   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x73, 0x3a, 0x25, 0x73, 0x3a, 0x25, 0x73
001b5c   2020     addwfc	0x20, 0, 0        
001b5e   7325     btg	0x25, 0x1, 0x1       
001b60   253a     addwf	0x3a, 0, 0x1       
001b62   3a73     swapf	0x73, 0x1, 0       
001b64   7325     btg	0x25, 0x1, 0x1       
001b66   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x25, 0x73
001b68   2020     addwfc	0x20, 0, 0        
001b6a   6c41     negf	0x41, 0             
001b6c   7261     btg	0x61, 0x1, 0         
001b6e   206d     addwfc	0x6d, 0, 0        
001b70   7325     btg	0x25, 0x1, 0x1       
001b72   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_3:
001b74   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x4d, 0x45, 0x4e, 0x55, 0x20, 0x20
001b76   2020     addwfc	0x20, 0, 0        
001b78   2020     addwfc	0x20, 0, 0        
001b7a   454d     rlncf	0x4d, 0, 0x1       
001b7c   554e     subfwb	0x4e, 0, 0x1      
001b7e   2020     addwfc	0x20, 0, 0        
001b80   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x53, 0x65, 0x74, 0x20, 0x74, 0x69
001b82   2020     addwfc	0x20, 0, 0        
001b84   2020     addwfc	0x20, 0, 0        
001b86   6553     cpfsgt	0x53, 0x1         
001b88   2074     addwfc	0x74, 0, 0        
001b8a   6974     setf	0x74, 0x1           
001b8c   656d     cpfsgt	0x6d, 0x1         	DB	0x6d, 0x65, 0x20, 0x3f, 0x00
001b8e   3f20     incfsz	0x20, 0x1, 0x1    
001b90   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_4:
001b92   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x20, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x20
001b94   2074     addwfc	0x74, 0, 0        
001b96   694d     setf	0x4d, 0x1           
001b98   756e     btg	0x6e, 0x2, 0x1       
001b9a   6574     cpfsgt	0x74, 0x1         
001b9c   2073     addwfc	0x73, 0, 0        
001b9e   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x73, 0x3a, 0x5b, 0x25, 0x73, 0x5d, 0x3a
001ba0   2020     addwfc	0x20, 0, 0        
001ba2   7325     btg	0x25, 0x1, 0x1       
001ba4   5b3a     subwfb	0x3a, 0x1, 0x1    
001ba6   7325     btg	0x25, 0x1, 0x1       
001ba8   3a5d     swapf	0x5d, 0x1, 0       
001baa   7325     btg	0x25, 0x1, 0x1       	DB	0x25, 0x73, 0x00
001bac   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_5:
001bae   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x20, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x20, 0x20, 0x20
001bb0   2074     addwfc	0x74, 0, 0        
001bb2   6f48     movwf	0x48, 0x1          
001bb4   7275     btg	0x75, 0x1, 0         
001bb6   2073     addwfc	0x73, 0, 0        
001bb8   2020     addwfc	0x20, 0, 0        
001bba   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x5b, 0x25, 0x73, 0x5d, 0x3a, 0x25, 0x73, 0x3a
001bbc   2020     addwfc	0x20, 0, 0        
001bbe   255b     addwf	0x5b, 0, 0x1       
001bc0   5d73     subwf	0x73, 0, 0x1       
001bc2   253a     addwf	0x3a, 0, 0x1       
001bc4   3a73     swapf	0x73, 0x1, 0       
001bc6   7325     btg	0x25, 0x1, 0x1       	DB	0x25, 0x73, 0x00
001bc8   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_6:
001bca   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x4d, 0x45, 0x4e, 0x55, 0x20, 0x20
001bcc   2020     addwfc	0x20, 0, 0        
001bce   2020     addwfc	0x20, 0, 0        
001bd0   454d     rlncf	0x4d, 0, 0x1       
001bd2   554e     subfwb	0x4e, 0, 0x1      
001bd4   2020     addwfc	0x20, 0, 0        
001bd6   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x53, 0x65, 0x74, 0x20, 0x41, 0x6c, 0x61, 0x72
001bd8   2020     addwfc	0x20, 0, 0        
001bda   6553     cpfsgt	0x53, 0x1         
001bdc   2074     addwfc	0x74, 0, 0        
001bde   6c41     negf	0x41, 0             
001be0   7261     btg	0x61, 0x1, 0         
001be2   636d     cpfseq	0x6d, 0x1         	DB	0x6d, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x3f, 0x00
001be4   6f6c     movwf	0x6c, 0x1          
001be6   6b63     clrf	0x63, 0x1           
001be8   003f     dw	0x3f  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_7:
001bea   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x4d, 0x69
001bec   2074     addwfc	0x74, 0, 0        
001bee   6c41     negf	0x41, 0             
001bf0   7261     btg	0x61, 0x1, 0         
001bf2   206d     addwfc	0x6d, 0, 0        
001bf4   694d     setf	0x4d, 0x1           
001bf6   206e     addwfc	0x6e, 0, 0        	DB	0x6e, 0x20, 0x20, 0x20, 0x20, 0x25, 0x73, 0x3a, 0x5b, 0x25, 0x73, 0x5d
001bf8   2020     addwfc	0x20, 0, 0        
001bfa   2520     addwf	0x20, 0, 0x1       
001bfc   3a73     swapf	0x73, 0x1, 0       
001bfe   255b     addwf	0x5b, 0, 0x1       
001c00   5d73     subwf	0x73, 0, 0x1       
001c02   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_8:
001c04   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x48, 0x6f
001c06   2074     addwfc	0x74, 0, 0        
001c08   6c41     negf	0x41, 0             
001c0a   7261     btg	0x61, 0x1, 0         
001c0c   206d     addwfc	0x6d, 0, 0        
001c0e   6f48     movwf	0x48, 0x1          
001c10   7275     btg	0x75, 0x1, 0         	DB	0x75, 0x72, 0x73, 0x20, 0x20, 0x5b, 0x25, 0x73, 0x5d, 0x3a, 0x25, 0x73
001c12   2073     addwfc	0x73, 0, 0        
001c14   5b20     subwfb	0x20, 0x1, 0x1    
001c16   7325     btg	0x25, 0x1, 0x1       
001c18   3a5d     swapf	0x5d, 0x1, 0       
001c1a   7325     btg	0x25, 0x1, 0x1       
001c1c   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_9:
001c1e   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x49, 0x74, 0x27, 0x73, 0x20, 0x54, 0x69, 0x6d, 0x65
001c20   4920     infsnz	0x20, 0, 0x1      
001c22   2774     addwf	0x74, 0x1, 0x1     
001c24   2073     addwfc	0x73, 0, 0        
001c26   6954     setf	0x54, 0x1           
001c28   656d     cpfsgt	0x6d, 0x1         
001c2a   2120     addwfc	0x20, 0, 0x1      	DB	0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x73, 0x3a, 0x25
001c2c   2020     addwfc	0x20, 0, 0        
001c2e   2020     addwfc	0x20, 0, 0        
001c30   2020     addwfc	0x20, 0, 0        
001c32   7325     btg	0x25, 0x1, 0x1       
001c34   253a     addwf	0x3a, 0, 0x1       
001c36   3a73     swapf	0x73, 0x1, 0       	DB	0x73, 0x3a, 0x25, 0x73, 0x00
001c38   7325     btg	0x25, 0x1, 0x1       
001c3a   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_10:
001c3c   2530     addwf	0x30, 0, 0x1       	DB	0x30, 0x25, 0x75, 0x00, 0x00
001c3e   0075     dw	0x75  ;unknown opcode 
001c40   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_11:
001c42   7525     btg	0x25, 0x2, 0x1       	DB	0x25, 0x75, 0x00, 0x00
001c44   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 4594 (0x11f2) bytes ( 3.50%)
                                           ;           	 2297 (0x08f9) words
                                           ; udata size:	   78 (0x004e) bytes ( 2.03%)
                                           ; access size:	   22 (0x0016) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Mar 19 2013) (UNIX)
                                           ; This file was generated Wed Mar 20 12:40:25 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDInit
                                           	global _LCDUpdate
                                           	global _LCDErase
                                           	global _LCDText
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           
                                           udata_LCDBlocking_0	udata
                                           _LCDText	res	33
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDErase	code
                                           _LCDErase:
                                           ;	.line	392; TCPIP_Stack/LCDBlocking.c	void LCDErase(void)
002566   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002568   ffe5
00256a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00256c   ffd9
00256e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002570   ffe5
002572   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002574   ffe5
002576   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002578   ffe5
00257a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00257c   ffe5
00257e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002580   ffe5
002582   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002584   ffe5
002586   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002588   ffe5
00258a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00258c   ffe5
                                           ;	.line	395; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);
00258e   0e01     movlw	0x1                	MOVLW	0x01
002590   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002592   0e00     movlw	0                  	MOVLW	0x00
002594   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002596   ec16     call	0x282c, 0           	CALL	_LCDWrite
002598   f014
00259a   0e02     movlw	0x2                	MOVLW	0x02
00259c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	396; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
00259e   0e48     movlw	0x48               	MOVLW	0x48
0025a0   6e00     movwf	0, 0               	MOVWF	r0x00
0025a2   0e0d     movlw	0xd                	MOVLW	0x0d
0025a4   6e01     movwf	0x1, 0             	MOVWF	r0x01
0025a6   6a02     clrf	0x2, 0              	CLRF	r0x02
0025a8   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00305_DS_:
0025aa   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0025ac   f004
0025ae   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0025b0   f005
0025b2   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0025b4   f006
0025b6   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0025b8   f007
0025ba   0eff     movlw	0xff               	MOVLW	0xff
0025bc   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0025be   0eff     movlw	0xff               	MOVLW	0xff
0025c0   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0025c2   0eff     movlw	0xff               	MOVLW	0xff
0025c4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0025c6   0eff     movlw	0xff               	MOVLW	0xff
0025c8   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0025ca   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0025cc   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0025ce   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0025d0   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0025d2   e1eb     bnz	0x25aa               	BNZ	_00305_DS_
                                           ;	.line	399; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', 32);
0025d4   0e00     movlw	0                  	MOVLW	0x00
0025d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025d8   0e20     movlw	0x20               	MOVLW	0x20
0025da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025dc   0e20     movlw	0x20               	MOVLW	0x20
0025de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025e0   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0025e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025e4   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0025e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025e8   ec30     call	0x2260, 0           	CALL	_memset
0025ea   f011
0025ec   0e05     movlw	0x5                	MOVLW	0x05
0025ee   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0025f0   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0025f2   f007
0025f4   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0025f6   f006
0025f8   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0025fa   f005
0025fc   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0025fe   f004
002600   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002602   f003
002604   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002606   f002
002608   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00260a   f001
00260c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00260e   f000
002610   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002612   ffd9
002614   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDUpdate	code
                                           _LCDUpdate:
                                           ;	.line	332; TCPIP_Stack/LCDBlocking.c	void LCDUpdate(void)
001066   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001068   ffe5
00106a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00106c   ffd9
00106e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001070   ffe5
001072   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001074   ffe5
001076   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001078   ffe5
00107a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00107c   ffe5
00107e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001080   ffe5
001082   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001084   ffe5
001086   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001088   ffe5
00108a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00108c   ffe5
00108e   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001090   ffe5
                                           ;	.line	337; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x02);
001092   0e02     movlw	0x2                	MOVLW	0x02
001094   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001096   0e00     movlw	0                  	MOVLW	0x00
001098   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00109a   ec16     call	0x282c, 0           	CALL	_LCDWrite
00109c   f014
00109e   0e02     movlw	0x2                	MOVLW	0x02
0010a0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	338; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
0010a2   0e48     movlw	0x48               	MOVLW	0x48
0010a4   6e00     movwf	0, 0               	MOVWF	r0x00
0010a6   0e0d     movlw	0xd                	MOVLW	0x0d
0010a8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0010aa   6a02     clrf	0x2, 0              	CLRF	r0x02
0010ac   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00225_DS_:
0010ae   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0010b0   f004
0010b2   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0010b4   f005
0010b6   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0010b8   f006
0010ba   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0010bc   f007
0010be   0eff     movlw	0xff               	MOVLW	0xff
0010c0   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0010c2   0eff     movlw	0xff               	MOVLW	0xff
0010c4   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0010c6   0eff     movlw	0xff               	MOVLW	0xff
0010c8   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0010ca   0eff     movlw	0xff               	MOVLW	0xff
0010cc   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0010ce   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0010d0   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0010d2   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0010d4   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0010d6   e1eb     bnz	0x10ae               	BNZ	_00225_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
0010d8   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00257_DS_:
0010da   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0010dc   f001
0010de   6a02     clrf	0x2, 0              	CLRF	r0x02
0010e0   0e00     movlw	0                  	MOVLW	0x00
0010e2   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0010e4   e102     bnz	0x10ea               	BNZ	_00297_DS_
0010e6   0e10     movlw	0x10               	MOVLW	0x10
0010e8   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00297_DS_:
0010ea   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0010ec   d057     bra	0x119c               	BRA	_00260_DS_
                                           ;	.line	345; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
0010ee   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0010f0   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0010f2   6e01     movwf	0x1, 0             	MOVWF	r0x01
0010f4   6a02     clrf	0x2, 0              	CLRF	r0x02
0010f6   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0010f8   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0010fa   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0010fc   ffe9
0010fe   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
001100   ffea
001102   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
001104   f001
001106   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001108   e119     bnz	0x113c               	BNZ	_00232_DS_
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
00110a   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00110c   f001
                                           _00253_DS_:
00110e   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
001110   f002
001112   6a03     clrf	0x3, 0              	CLRF	r0x03
001114   0e00     movlw	0                  	MOVLW	0x00
001116   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
001118   e102     bnz	0x111e               	BNZ	_00298_DS_
00111a   0e10     movlw	0x10               	MOVLW	0x10
00111c   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00298_DS_:
00111e   e20e     bc	0x113c                	BC	_00232_DS_
                                           ;	.line	349; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
001120   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001122   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
001124   6e02     movwf	0x2, 0             	MOVWF	r0x02
001126   6a03     clrf	0x3, 0              	CLRF	r0x03
001128   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
00112a   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00112c   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
00112e   ffe9
001130   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
001132   ffea
001134   0e20     movlw	0x20               	MOVLW	0x20
001136   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
001138   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00113a   d7e9     bra	0x110e               	BRA	_00253_DS_
                                           _00232_DS_:
                                           ;	.line	352; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
00113c   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
00113e   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
001140   6e01     movwf	0x1, 0             	MOVWF	r0x01
001142   6a02     clrf	0x2, 0              	CLRF	r0x02
001144   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001146   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001148   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
00114a   ffe9
00114c   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
00114e   ffea
001150   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
001152   f001
001154   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001156   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001158   0e01     movlw	0x1                	MOVLW	0x01
00115a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00115c   ec16     call	0x282c, 0           	CALL	_LCDWrite
00115e   f014
001160   0e02     movlw	0x2                	MOVLW	0x02
001162   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	353; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
001164   0e55     movlw	0x55               	MOVLW	0x55
001166   6e01     movwf	0x1, 0             	MOVWF	r0x01
001168   6a02     clrf	0x2, 0              	CLRF	r0x02
00116a   6a03     clrf	0x3, 0              	CLRF	r0x03
00116c   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00233_DS_:
00116e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001170   f005
001172   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001174   f006
001176   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001178   f007
00117a   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
00117c   f008
00117e   0eff     movlw	0xff               	MOVLW	0xff
001180   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
001182   0eff     movlw	0xff               	MOVLW	0xff
001184   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001186   0eff     movlw	0xff               	MOVLW	0xff
001188   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00118a   0eff     movlw	0xff               	MOVLW	0xff
00118c   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
00118e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001190   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
001192   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001194   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
001196   e1eb     bnz	0x116e               	BNZ	_00233_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
001198   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00119a   d79f     bra	0x10da               	BRA	_00257_DS_
                                           _00260_DS_:
                                           ;	.line	357; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0xC0);
00119c   0ec0     movlw	0xc0               	MOVLW	0xc0
00119e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011a0   0e00     movlw	0                  	MOVLW	0x00
0011a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011a4   ec16     call	0x282c, 0           	CALL	_LCDWrite
0011a6   f014
0011a8   0e02     movlw	0x2                	MOVLW	0x02
0011aa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	358; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0011ac   0e55     movlw	0x55               	MOVLW	0x55
0011ae   6e00     movwf	0, 0               	MOVWF	r0x00
0011b0   6a01     clrf	0x1, 0              	CLRF	r0x01
0011b2   6a02     clrf	0x2, 0              	CLRF	r0x02
0011b4   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00239_DS_:
0011b6   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0011b8   f004
0011ba   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0011bc   f005
0011be   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0011c0   f006
0011c2   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0011c4   f007
0011c6   0eff     movlw	0xff               	MOVLW	0xff
0011c8   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0011ca   0eff     movlw	0xff               	MOVLW	0xff
0011cc   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0011ce   0eff     movlw	0xff               	MOVLW	0xff
0011d0   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0011d2   0eff     movlw	0xff               	MOVLW	0xff
0011d4   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0011d6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0011d8   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0011da   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0011dc   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0011de   e1eb     bnz	0x11b6               	BNZ	_00239_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
0011e0   0e10     movlw	0x10               	MOVLW	0x10
0011e2   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00265_DS_:
0011e4   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0011e6   f001
0011e8   6a02     clrf	0x2, 0              	CLRF	r0x02
0011ea   0e00     movlw	0                  	MOVLW	0x00
0011ec   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0011ee   e102     bnz	0x11f4               	BNZ	_00299_DS_
0011f0   0e20     movlw	0x20               	MOVLW	0x20
0011f2   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00299_DS_:
0011f4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0011f6   d057     bra	0x12a6               	BRA	_00269_DS_
                                           ;	.line	365; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
0011f8   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0011fa   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0011fc   6e01     movwf	0x1, 0             	MOVWF	r0x01
0011fe   6a02     clrf	0x2, 0              	CLRF	r0x02
001200   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001202   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001204   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
001206   ffe9
001208   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
00120a   ffea
00120c   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
00120e   f001
001210   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001212   e119     bnz	0x1246               	BNZ	_00246_DS_
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
001214   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
001216   f001
                                           _00261_DS_:
001218   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
00121a   f002
00121c   6a03     clrf	0x3, 0              	CLRF	r0x03
00121e   0e00     movlw	0                  	MOVLW	0x00
001220   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
001222   e102     bnz	0x1228               	BNZ	_00300_DS_
001224   0e20     movlw	0x20               	MOVLW	0x20
001226   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00300_DS_:
001228   e20e     bc	0x1246                	BC	_00246_DS_
                                           ;	.line	369; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
00122a   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
00122c   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
00122e   6e02     movwf	0x2, 0             	MOVWF	r0x02
001230   6a03     clrf	0x3, 0              	CLRF	r0x03
001232   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001234   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001236   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
001238   ffe9
00123a   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
00123c   ffea
00123e   0e20     movlw	0x20               	MOVLW	0x20
001240   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
001242   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
001244   d7e9     bra	0x1218               	BRA	_00261_DS_
                                           _00246_DS_:
                                           ;	.line	372; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
001246   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001248   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00124a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00124c   6a02     clrf	0x2, 0              	CLRF	r0x02
00124e   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001250   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001252   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
001254   ffe9
001256   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
001258   ffea
00125a   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
00125c   f001
00125e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001260   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001262   0e01     movlw	0x1                	MOVLW	0x01
001264   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001266   ec16     call	0x282c, 0           	CALL	_LCDWrite
001268   f014
00126a   0e02     movlw	0x2                	MOVLW	0x02
00126c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	373; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
00126e   0e55     movlw	0x55               	MOVLW	0x55
001270   6e01     movwf	0x1, 0             	MOVWF	r0x01
001272   6a02     clrf	0x2, 0              	CLRF	r0x02
001274   6a03     clrf	0x3, 0              	CLRF	r0x03
001276   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00247_DS_:
001278   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00127a   f005
00127c   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00127e   f006
001280   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001282   f007
001284   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
001286   f008
001288   0eff     movlw	0xff               	MOVLW	0xff
00128a   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00128c   0eff     movlw	0xff               	MOVLW	0xff
00128e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001290   0eff     movlw	0xff               	MOVLW	0xff
001292   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001294   0eff     movlw	0xff               	MOVLW	0xff
001296   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
001298   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00129a   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00129c   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00129e   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
0012a0   e1eb     bnz	0x1278               	BNZ	_00247_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
0012a2   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0012a4   d79f     bra	0x11e4               	BRA	_00265_DS_
                                           _00269_DS_:
0012a6   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0012a8   f008
0012aa   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0012ac   f007
0012ae   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0012b0   f006
0012b2   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0012b4   f005
0012b6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0012b8   f004
0012ba   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0012bc   f003
0012be   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0012c0   f002
0012c2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0012c4   f001
0012c6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0012c8   f000
0012ca   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0012cc   ffd9
0012ce   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDInit	code
                                           _LCDInit:
                                           ;	.line	207; TCPIP_Stack/LCDBlocking.c	void LCDInit(void)
0012d0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0012d2   ffe5
0012d4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0012d6   ffd9
0012d8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0012da   ffe5
0012dc   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0012de   ffe5
0012e0   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0012e2   ffe5
0012e4   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0012e6   ffe5
0012e8   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0012ea   ffe5
0012ec   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0012ee   ffe5
0012f0   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0012f2   ffe5
0012f4   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0012f6   ffe5
0012f8   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0012fa   ffe5
                                           ;	.line	211; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', sizeof(LCDText)-1);
0012fc   0e00     movlw	0                  	MOVLW	0x00
0012fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001300   0e20     movlw	0x20               	MOVLW	0x20
001302   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001304   0e20     movlw	0x20               	MOVLW	0x20
001306   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001308   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
00130a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00130c   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
00130e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001310   ec30     call	0x2260, 0           	CALL	_memset
001312   f011
001314   0e05     movlw	0x5                	MOVLW	0x05
001316   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001318   010f     movlb	0xf                	BANKSEL	(_LCDText + 32)
                                           ;	.line	212; TCPIP_Stack/LCDBlocking.c	LCDText[sizeof(LCDText)-1] = 0;
00131a   6b20     clrf	0x20, 0x1           	CLRF	(_LCDText + 32), B
                                           ;	.line	215; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
00131c   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	216; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
00131e   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	220; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
001320   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	233; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
001322   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	234; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
001324   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	235; TCPIP_Stack/LCDBlocking.c	LCD_E_TRIS = 0;
001326   9099     bcf	0x99, 0, 0           	BCF	_TRISHbits, 0
                                           ;	.line	239; TCPIP_Stack/LCDBlocking.c	DelayMs(40);
001328   0ea0     movlw	0xa0               	MOVLW	0xa0
00132a   6e00     movwf	0, 0               	MOVWF	r0x00
00132c   0e09     movlw	0x9                	MOVLW	0x09
00132e   6e01     movwf	0x1, 0             	MOVWF	r0x01
001330   0e01     movlw	0x1                	MOVLW	0x01
001332   6e02     movwf	0x2, 0             	MOVWF	r0x02
001334   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00143_DS_:
001336   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
001338   f004
00133a   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00133c   f005
00133e   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001340   f006
001342   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001344   f007
001346   0eff     movlw	0xff               	MOVLW	0xff
001348   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00134a   0eff     movlw	0xff               	MOVLW	0xff
00134c   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00134e   0eff     movlw	0xff               	MOVLW	0xff
001350   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001352   0eff     movlw	0xff               	MOVLW	0xff
001354   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001356   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001358   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
00135a   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00135c   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00135e   e1eb     bnz	0x1336               	BNZ	_00143_DS_
                                           ;	.line	247; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = 0;
001360   9490     bcf	0x90, 0x2, 0         	BCF	_LATHbits, 2
                                           ;	.line	249; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = 0x03;
001362   0e03     movlw	0x3                	MOVLW	0x03
001364   6e8d     movwf	0x8d, 0            	MOVWF	_LATE
001366   0000     nop                      	nop 
001368   0000     nop                      	nop 
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
00136a   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00191_DS_:
00136c   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00136e   f001
001370   6a02     clrf	0x2, 0              	CLRF	r0x02
001372   0e00     movlw	0                  	MOVLW	0x00
001374   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
001376   e102     bnz	0x137c               	BNZ	_00220_DS_
001378   0e03     movlw	0x3                	MOVLW	0x03
00137a   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00220_DS_:
00137c   e239     bc	0x13f0                	BC	_00194_DS_
                                           ;	.line	266; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
00137e   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
                                           ;	.line	267; TCPIP_Stack/LCDBlocking.c	Delay10us(1);	       	// Wait E Pulse width time (min 230ns)
001380   0e11     movlw	0x11               	MOVLW	0x11
001382   6e01     movwf	0x1, 0             	MOVWF	r0x01
001384   6a02     clrf	0x2, 0              	CLRF	r0x02
001386   6a03     clrf	0x3, 0              	CLRF	r0x03
001388   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00155_DS_:
00138a   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00138c   f005
00138e   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001390   f006
001392   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001394   f007
001396   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
001398   f008
00139a   0eff     movlw	0xff               	MOVLW	0xff
00139c   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00139e   0eff     movlw	0xff               	MOVLW	0xff
0013a0   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0013a2   0eff     movlw	0xff               	MOVLW	0xff
0013a4   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0013a6   0eff     movlw	0xff               	MOVLW	0xff
0013a8   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
0013aa   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0013ac   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0013ae   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0013b0   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
0013b2   e1eb     bnz	0x138a               	BNZ	_00155_DS_
                                           ;	.line	268; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
0013b4   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	269; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
0013b6   0e48     movlw	0x48               	MOVLW	0x48
0013b8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0013ba   0e0d     movlw	0xd                	MOVLW	0x0d
0013bc   6e02     movwf	0x2, 0             	MOVWF	r0x02
0013be   6a03     clrf	0x3, 0              	CLRF	r0x03
0013c0   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00161_DS_:
0013c2   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0013c4   f005
0013c6   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0013c8   f006
0013ca   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0013cc   f007
0013ce   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
0013d0   f008
0013d2   0eff     movlw	0xff               	MOVLW	0xff
0013d4   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
0013d6   0eff     movlw	0xff               	MOVLW	0xff
0013d8   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0013da   0eff     movlw	0xff               	MOVLW	0xff
0013dc   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0013de   0eff     movlw	0xff               	MOVLW	0xff
0013e0   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
0013e2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0013e4   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0013e6   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0013e8   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
0013ea   e1eb     bnz	0x13c2               	BNZ	_00161_DS_
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
0013ec   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0013ee   d7be     bra	0x136c               	BRA	_00191_DS_
                                           _00194_DS_:
                                           ;	.line	295; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x38);
0013f0   0e38     movlw	0x38               	MOVLW	0x38
0013f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013f4   0e00     movlw	0                  	MOVLW	0x00
0013f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013f8   ec16     call	0x282c, 0           	CALL	_LCDWrite
0013fa   f014
0013fc   0e02     movlw	0x2                	MOVLW	0x02
0013fe   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	297; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
001400   0e55     movlw	0x55               	MOVLW	0x55
001402   6e00     movwf	0, 0               	MOVWF	r0x00
001404   6a01     clrf	0x1, 0              	CLRF	r0x01
001406   6a02     clrf	0x2, 0              	CLRF	r0x02
001408   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00167_DS_:
00140a   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00140c   f004
00140e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001410   f005
001412   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001414   f006
001416   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001418   f007
00141a   0eff     movlw	0xff               	MOVLW	0xff
00141c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00141e   0eff     movlw	0xff               	MOVLW	0xff
001420   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001422   0eff     movlw	0xff               	MOVLW	0xff
001424   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001426   0eff     movlw	0xff               	MOVLW	0xff
001428   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00142a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00142c   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
00142e   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
001430   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001432   e1eb     bnz	0x140a               	BNZ	_00167_DS_
                                           ;	.line	300; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x06);	// Increment after each write, do not shift
001434   0e06     movlw	0x6                	MOVLW	0x06
001436   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001438   0e00     movlw	0                  	MOVLW	0x00
00143a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00143c   ec16     call	0x282c, 0           	CALL	_LCDWrite
00143e   f014
001440   0e02     movlw	0x2                	MOVLW	0x02
001442   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	301; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
001444   0e55     movlw	0x55               	MOVLW	0x55
001446   6e00     movwf	0, 0               	MOVWF	r0x00
001448   6a01     clrf	0x1, 0              	CLRF	r0x01
00144a   6a02     clrf	0x2, 0              	CLRF	r0x02
00144c   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00173_DS_:
00144e   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
001450   f004
001452   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001454   f005
001456   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001458   f006
00145a   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00145c   f007
00145e   0eff     movlw	0xff               	MOVLW	0xff
001460   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001462   0eff     movlw	0xff               	MOVLW	0xff
001464   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001466   0eff     movlw	0xff               	MOVLW	0xff
001468   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00146a   0eff     movlw	0xff               	MOVLW	0xff
00146c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00146e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001470   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
001472   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
001474   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001476   e1eb     bnz	0x144e               	BNZ	_00173_DS_
                                           ;	.line	304; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x0C);	// Turn display on, no cusor, no cursor blink
001478   0e0c     movlw	0xc                	MOVLW	0x0c
00147a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00147c   0e00     movlw	0                  	MOVLW	0x00
00147e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001480   ec16     call	0x282c, 0           	CALL	_LCDWrite
001482   f014
001484   0e02     movlw	0x2                	MOVLW	0x02
001486   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	305; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
001488   0e55     movlw	0x55               	MOVLW	0x55
00148a   6e00     movwf	0, 0               	MOVWF	r0x00
00148c   6a01     clrf	0x1, 0              	CLRF	r0x01
00148e   6a02     clrf	0x2, 0              	CLRF	r0x02
001490   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00179_DS_:
001492   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
001494   f004
001496   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001498   f005
00149a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00149c   f006
00149e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0014a0   f007
0014a2   0eff     movlw	0xff               	MOVLW	0xff
0014a4   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0014a6   0eff     movlw	0xff               	MOVLW	0xff
0014a8   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0014aa   0eff     movlw	0xff               	MOVLW	0xff
0014ac   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0014ae   0eff     movlw	0xff               	MOVLW	0xff
0014b0   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0014b2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0014b4   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0014b6   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0014b8   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0014ba   e1eb     bnz	0x1492               	BNZ	_00179_DS_
                                           ;	.line	308; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);	
0014bc   0e01     movlw	0x1                	MOVLW	0x01
0014be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0014c0   0e00     movlw	0                  	MOVLW	0x00
0014c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0014c4   ec16     call	0x282c, 0           	CALL	_LCDWrite
0014c6   f014
0014c8   0e02     movlw	0x2                	MOVLW	0x02
0014ca   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	309; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
0014cc   0e48     movlw	0x48               	MOVLW	0x48
0014ce   6e00     movwf	0, 0               	MOVWF	r0x00
0014d0   0e0d     movlw	0xd                	MOVLW	0x0d
0014d2   6e01     movwf	0x1, 0             	MOVWF	r0x01
0014d4   6a02     clrf	0x2, 0              	CLRF	r0x02
0014d6   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00185_DS_:
0014d8   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0014da   f004
0014dc   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0014de   f005
0014e0   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0014e2   f006
0014e4   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0014e6   f007
0014e8   0eff     movlw	0xff               	MOVLW	0xff
0014ea   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0014ec   0eff     movlw	0xff               	MOVLW	0xff
0014ee   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0014f0   0eff     movlw	0xff               	MOVLW	0xff
0014f2   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0014f4   0eff     movlw	0xff               	MOVLW	0xff
0014f6   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0014f8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0014fa   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0014fc   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0014fe   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001500   e1eb     bnz	0x14d8               	BNZ	_00185_DS_
001502   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001504   f008
001506   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001508   f007
00150a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00150c   f006
00150e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001510   f005
001512   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001514   f004
001516   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001518   f003
00151a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00151c   f002
00151e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001520   f001
001522   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001524   f000
001526   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001528   ffd9
00152a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDWrite	code
                                           _LCDWrite:
                                           ;	.line	94; TCPIP_Stack/LCDBlocking.c	static void LCDWrite(BYTE RS, BYTE Data)
00282c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00282e   ffe5
002830   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002832   ffd9
002834   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002836   ffe5
002838   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00283a   ffe5
00283c   0e02     movlw	0x2                	MOVLW	0x02
00283e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002840   f000
002842   0e03     movlw	0x3                	MOVLW	0x03
002844   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002846   f001
                                           ;	.line	97; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
002848   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	110; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
00284a   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	111; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
00284c   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	112; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
00284e   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	113; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = RS;
002850   5000     movf	0, 0, 0             	MOVF	r0x00, W
002852   0b01     andlw	0x1                	ANDLW	0x01
002854   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
002856   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
002858   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
00285a   5090     movf	0x90, 0, 0          	MOVF	_LATHbits, W
00285c   0bfb     andlw	0xfb               	ANDLW	0xfb
00285e   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
002860   6e90     movwf	0x90, 0            	MOVWF	_LATHbits
                                           ;	.line	140; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = Data;
002862   c001     movff	0x1, 0xf8d         	MOVFF	r0x01, _LATE
002864   ff8d
002866   0000     nop                      	nop 
002868   0000     nop                      	nop 
                                           ;	.line	155; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
00286a   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
00286c   0000     nop                      	nop 
00286e   0000     nop                      	nop 
002870   0000     nop                      	nop 
002872   0000     nop                      	nop 
002874   0000     nop                      	nop 
002876   0000     nop                      	nop 
002878   0000     nop                      	nop 
00287a   0000     nop                      	nop 
00287c   0000     nop                      	nop 
                                           ;	.line	165; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
00287e   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
002880   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002882   f001
002884   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002886   f000
002888   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00288a   ffd9
00288c   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   33 (0x0021) bytes ( 0.86%)
                                           ; access size:	    9 (0x0009) bytes
                                           
                                           
                                           	end
