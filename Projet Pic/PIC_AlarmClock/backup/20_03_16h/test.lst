gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 3-20-2013  14:40:49
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Mar 19 2013) (UNIX)
                                           ; This file was generated Wed Mar 20 14:40:48 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _ConfigTimer0
                                           	global _ConfigButtons
                                           	global _ConfigLed
                                           	global _UpdateTime
                                           	global _IsItTime
                                           	global _UpdateLCD
                                           	global _ledAlarm
                                           	global _ConvertTime
                                           	global _DisplayWORD
                                           	global _DisplayString
                                           	global _strlcpy
                                           	global _hours
                                           	global _minutes
                                           	global _seconds
                                           	global _alarmHours
                                           	global _alarmMinutes
                                           	global _stateMenu
                                           	global _alarmStatus
                                           	global _LCDPrint
                                           	global _h
                                           	global _m
                                           	global _s
                                           	global _alarmState
                                           	global _main
                                           	global _HighPriorityInterrupt
                                           	global _LowPriorityInterrupt
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _sprintf
                                           	extern _ultoa
                                           	extern _strlen
                                           	extern _LCDInit
                                           	extern _LCDUpdate
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           
                                           udata_test_0	udata
                                           _stateMenu	res	2
                                           
                                           udata_test_1	udata
                                           _hours	res	2
                                           
                                           udata_test_2	udata
                                           _minutes	res	2
                                           
                                           udata_test_3	udata
                                           _seconds	res	2
                                           
                                           udata_test_4	udata
                                           _alarmHours	res	2
                                           
                                           udata_test_5	udata
                                           _alarmMinutes	res	2
                                           
                                           udata_test_6	udata
                                           _alarmStatus	res	2
                                           
                                           udata_test_7	udata
                                           _h	res	3
                                           
                                           udata_test_8	udata
                                           _m	res	3
                                           
                                           udata_test_9	udata
                                           _s	res	3
                                           
                                           udata_test_10	udata
                                           _alarmState	res	3
                                           
                                           udata_test_11	udata
                                           _LCDPrint	res	32
                                           
                                           udata_test_12	udata
                                           _DisplayWORD_WDigit_1_1	res	6
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_test_ivec_0x1_HighPriorityInterrupt	code	0X000008
                                           ivec_0x1_HighPriorityInterrupt:
000008   ef4e     goto	0x149c              	GOTO	_HighPriorityInterrupt
00000a   f00a
                                           
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_test_ivec_0x2_LowPriorityInterrupt	code	0X000018
                                           ivec_0x2_LowPriorityInterrupt:
000018   efd0     goto	0x27a0              	GOTO	_LowPriorityInterrupt
00001a   f013
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_test__main	code
                                           _main:
002660   010e     movlb	0xe                	BANKSEL	_stateMenu
                                           ;	.line	65; test.c	stateMenu = STANDARD_STATE;
002662   6b23     clrf	0x23, 0x1           	CLRF	_stateMenu, B
002664   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
002666   6b24     clrf	0x24, 0x1           	CLRF	(_stateMenu + 1), B
                                           ;	.line	66; test.c	INTCONbits.GIE = 1; // Activation générale des interruptions
002668   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	67; test.c	RCONbits.IPEN = 1; //interrupts priority enable
00266a   8ed0     bsf	0xd0, 0x7, 0         	BSF	_RCONbits, 7
                                           ;	.line	68; test.c	LCDInit(); // initialisation du LCD
00266c   ec20     call	0x1240, 0           	CALL	_LCDInit
00266e   f009
002670   010e     movlb	0xe                	BANKSEL	_hours
                                           ;	.line	69; test.c	hours = 0;
002672   6b25     clrf	0x25, 0x1           	CLRF	_hours, B
002674   010e     movlb	0xe                	BANKSEL	(_hours + 1)
002676   6b26     clrf	0x26, 0x1           	CLRF	(_hours + 1), B
002678   010e     movlb	0xe                	BANKSEL	_minutes
                                           ;	.line	70; test.c	minutes = 0;
00267a   6b27     clrf	0x27, 0x1           	CLRF	_minutes, B
00267c   010e     movlb	0xe                	BANKSEL	(_minutes + 1)
00267e   6b28     clrf	0x28, 0x1           	CLRF	(_minutes + 1), B
002680   010e     movlb	0xe                	BANKSEL	_seconds
                                           ;	.line	71; test.c	seconds = 0;
002682   6b29     clrf	0x29, 0x1           	CLRF	_seconds, B
002684   010e     movlb	0xe                	BANKSEL	(_seconds + 1)
002686   6b2a     clrf	0x2a, 0x1           	CLRF	(_seconds + 1), B
002688   010e     movlb	0xe                	BANKSEL	_alarmHours
                                           ;	.line	72; test.c	alarmHours = 0;
00268a   6b2b     clrf	0x2b, 0x1           	CLRF	_alarmHours, B
00268c   010e     movlb	0xe                	BANKSEL	(_alarmHours + 1)
00268e   6b2c     clrf	0x2c, 0x1           	CLRF	(_alarmHours + 1), B
002690   010e     movlb	0xe                	BANKSEL	_alarmMinutes
                                           ;	.line	73; test.c	alarmMinutes = 0;
002692   6b2d     clrf	0x2d, 0x1           	CLRF	_alarmMinutes, B
002694   010e     movlb	0xe                	BANKSEL	(_alarmMinutes + 1)
002696   6b2e     clrf	0x2e, 0x1           	CLRF	(_alarmMinutes + 1), B
002698   010e     movlb	0xe                	BANKSEL	_alarmStatus
                                           ;	.line	74; test.c	alarmStatus = 0;
00269a   6b2f     clrf	0x2f, 0x1           	CLRF	_alarmStatus, B
00269c   010e     movlb	0xe                	BANKSEL	(_alarmStatus + 1)
00269e   6b30     clrf	0x30, 0x1           	CLRF	(_alarmStatus + 1), B
                                           ;	.line	75; test.c	ConfigTimer0();
0026a0   ec67     call	0x1cce, 0           	CALL	_ConfigTimer0
0026a2   f00e
                                           ;	.line	76; test.c	ConfigButtons();
0026a4   ecb5     call	0x296a, 0           	CALL	_ConfigButtons
0026a6   f014
                                           ;	.line	77; test.c	ConfigLed();
0026a8   eca8     call	0x2950, 0           	CALL	_ConfigLed
0026aa   f014
                                           _00108_DS_:
                                           ;	.line	81; test.c	UpdateTime();
0026ac   ec68     call	0x26d0, 0           	CALL	_UpdateTime
0026ae   f013
                                           ;	.line	82; test.c	IsItTime();
0026b0   eca9     call	0x2552, 0           	CALL	_IsItTime
0026b2   f012
                                           ;	.line	83; test.c	UpdateLCD();
0026b4   ec29     call	0x852, 0            	CALL	_UpdateLCD
0026b6   f004
0026b8   010e     movlb	0xe                	BANKSEL	_stateMenu
                                           ;	.line	84; test.c	if(stateMenu == RINGING) ledAlarm();
0026ba   5123     movf	0x23, 0, 0x1        	MOVF	_stateMenu, W, B
0026bc   0a07     xorlw	0x7                	XORLW	0x07
0026be   e103     bnz	0x26c6               	BNZ	_00114_DS_
0026c0   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
0026c2   5124     movf	0x24, 0, 0x1        	MOVF	(_stateMenu + 1), W, B
0026c4   e001     bz	0x26c8                	BZ	_00115_DS_
                                           _00114_DS_:
0026c6   d7f2     bra	0x26ac               	BRA	_00108_DS_
                                           _00115_DS_:
0026c8   ecfb     call	0x27f6, 0           	CALL	_ledAlarm
0026ca   f013
0026cc   d7ef     bra	0x26ac               	BRA	_00108_DS_
0026ce   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__strlcpy	code
                                           _strlcpy:
                                           ;	.line	542; test.c	strlcpy(char *dst, const char *src, size_t siz)
0016d4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0016d6   ffe5
0016d8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0016da   ffd9
0016dc   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0016de   ffe5
0016e0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0016e2   ffe5
0016e4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0016e6   ffe5
0016e8   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0016ea   ffe5
0016ec   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0016ee   ffe5
0016f0   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0016f2   ffe5
0016f4   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0016f6   ffe5
0016f8   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0016fa   ffe5
0016fc   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0016fe   ffe5
001700   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001702   ffe5
001704   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
001706   ffe5
001708   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
00170a   ffe5
00170c   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
00170e   ffe5
001710   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
001712   ffe5
001714   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
001716   ffe5
001718   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
00171a   ffe5
00171c   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
00171e   ffe5
001720   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
001722   ffe5
001724   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
001726   ffe5
001728   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
00172a   ffe5
00172c   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
00172e   ffe5
001730   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
001732   ffe5
001734   0e02     movlw	0x2                	MOVLW	0x02
001736   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001738   f000
00173a   0e03     movlw	0x3                	MOVLW	0x03
00173c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00173e   f001
001740   0e04     movlw	0x4                	MOVLW	0x04
001742   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001744   f002
001746   0e05     movlw	0x5                	MOVLW	0x05
001748   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00174a   f003
00174c   0e06     movlw	0x6                	MOVLW	0x06
00174e   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
001750   f004
001752   0e07     movlw	0x7                	MOVLW	0x07
001754   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
001756   f005
001758   0e08     movlw	0x8                	MOVLW	0x08
00175a   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
00175c   f006
00175e   0e09     movlw	0x9                	MOVLW	0x09
001760   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
001762   f007
                                           ;	.line	544; test.c	char       *d = dst;
001764   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
001766   f008
001768   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
00176a   f009
00176c   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
00176e   f00a
                                           ;	.line	545; test.c	const char *s = src;
001770   c003     movff	0x3, 0xb           	MOVFF	r0x03, r0x0b
001772   f00b
001774   c004     movff	0x4, 0xc           	MOVFF	r0x04, r0x0c
001776   f00c
001778   c005     movff	0x5, 0xd           	MOVFF	r0x05, r0x0d
00177a   f00d
                                           ;	.line	546; test.c	size_t      n = siz;
00177c   c006     movff	0x6, 0xe           	MOVFF	r0x06, r0x0e
00177e   f00e
001780   c007     movff	0x7, 0xf           	MOVFF	r0x07, r0x0f
001782   f00f
                                           ;	.line	549; test.c	if (n != 0)
001784   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001786   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001788   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
00178a   d03e     bra	0x1808               	BRA	_00286_DS_
                                           ;	.line	551; test.c	while (--n != 0)
00178c   c003     movff	0x3, 0x10          	MOVFF	r0x03, r0x10
00178e   f010
001790   c004     movff	0x4, 0x11          	MOVFF	r0x04, r0x11
001792   f011
001794   c005     movff	0x5, 0x12          	MOVFF	r0x05, r0x12
001796   f012
001798   c006     movff	0x6, 0x13          	MOVFF	r0x06, r0x13
00179a   f013
00179c   c007     movff	0x7, 0x14          	MOVFF	r0x07, r0x14
00179e   f014
                                           _00282_DS_:
0017a0   0eff     movlw	0xff               	MOVLW	0xff
0017a2   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x13, F
0017a4   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0017a6   0614     decf	0x14, 0x1, 0        	DECF	r0x14, F
0017a8   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
0017aa   1014     iorwf	0x14, 0, 0         	IORWF	r0x14, W
0017ac   e01d     bz	0x17e8                	BZ	_00301_DS_
                                           ;	.line	553; test.c	if ((*d++ = *s++) == '\0')
0017ae   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
0017b0   ffe9
0017b2   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
0017b4   fff3
0017b6   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
0017b8   ec89     call	0x2912, 0           	CALL	__gptrget1
0017ba   f014
0017bc   6e15     movwf	0x15, 0            	MOVWF	r0x15
0017be   2a10     incf	0x10, 0x1, 0        	INCF	r0x10, F
0017c0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0017c2   2a11     incf	0x11, 0x1, 0        	INCF	r0x11, F
0017c4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0017c6   2a12     incf	0x12, 0x1, 0        	INCF	r0x12, F
0017c8   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
0017ca   ffe5
0017cc   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0017ce   ffe9
0017d0   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0017d2   fff3
0017d4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0017d6   ecce     call	0x299c, 0           	CALL	__gptrput1
0017d8   f014
0017da   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0017dc   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0017de   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0017e0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0017e2   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
0017e4   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
0017e6   e1dc     bnz	0x17a0               	BNZ	_00282_DS_
                                           _00301_DS_:
                                           ;	.line	554; test.c	break;
0017e8   c010     movff	0x10, 0xb          	MOVFF	r0x10, r0x0b
0017ea   f00b
0017ec   c011     movff	0x11, 0xc          	MOVFF	r0x11, r0x0c
0017ee   f00c
0017f0   c012     movff	0x12, 0xd          	MOVFF	r0x12, r0x0d
0017f2   f00d
0017f4   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
0017f6   f008
0017f8   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
0017fa   f009
0017fc   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
0017fe   f00a
001800   c013     movff	0x13, 0xe          	MOVFF	r0x13, r0x0e
001802   f00e
001804   c014     movff	0x14, 0xf          	MOVFF	r0x14, r0x0f
001806   f00f
                                           _00286_DS_:
                                           ;	.line	559; test.c	if (n == 0)
001808   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
00180a   100f     iorwf	0xf, 0, 0          	IORWF	r0x0f, W
00180c   e127     bnz	0x185c               	BNZ	_00293_DS_
                                           ;	.line	561; test.c	if (siz != 0)
00180e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001810   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001812   e009     bz	0x1826                	BZ	_00300_DS_
                                           ;	.line	562; test.c	*d = '\0';          /* NUL-terminate dst */
001814   0e00     movlw	0                  	MOVLW	0x00
001816   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001818   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
00181a   ffe9
00181c   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
00181e   fff3
001820   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001822   ecce     call	0x299c, 0           	CALL	__gptrput1
001824   f014
                                           _00300_DS_:
                                           ;	.line	563; test.c	while (*s++)
001826   c00b     movff	0xb, 0             	MOVFF	r0x0b, r0x00
001828   f000
00182a   c00c     movff	0xc, 0x1           	MOVFF	r0x0c, r0x01
00182c   f001
00182e   c00d     movff	0xd, 0x2           	MOVFF	r0x0d, r0x02
001830   f002
                                           _00289_DS_:
001832   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001834   ffe9
001836   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
001838   fff3
00183a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00183c   ec89     call	0x2912, 0           	CALL	__gptrget1
00183e   f014
001840   6e06     movwf	0x6, 0             	MOVWF	r0x06
001842   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001844   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001846   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
001848   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00184a   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
00184c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00184e   e1f1     bnz	0x1832               	BNZ	_00289_DS_
001850   c000     movff	0, 0xb             	MOVFF	r0x00, r0x0b
001852   f00b
001854   c001     movff	0x1, 0xc           	MOVFF	r0x01, r0x0c
001856   f00c
001858   c002     movff	0x2, 0xd           	MOVFF	r0x02, r0x0d
00185a   f00d
                                           _00293_DS_:
                                           ;	.line	567; test.c	return (s - src - 1);       /* count does not include NUL */
00185c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00185e   5c0b     subwf	0xb, 0, 0          	SUBWF	r0x0b, W
001860   6e03     movwf	0x3, 0             	MOVWF	r0x03
001862   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001864   580c     subwfb	0xc, 0, 0         	SUBWFB	r0x0c, W
001866   6e04     movwf	0x4, 0             	MOVWF	r0x04
001868   0eff     movlw	0xff               	MOVLW	0xff
00186a   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
00186c   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
00186e   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
001870   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
001872   fff3
001874   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001876   cfe4     movff	0xfe4, 0x15        	MOVFF	PREINC1, r0x15
001878   f015
00187a   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
00187c   f014
00187e   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
001880   f013
001882   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
001884   f012
001886   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
001888   f011
00188a   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
00188c   f010
00188e   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
001890   f00f
001892   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
001894   f00e
001896   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
001898   f00d
00189a   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
00189c   f00c
00189e   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0018a0   f00b
0018a2   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0018a4   f00a
0018a6   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0018a8   f009
0018aa   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0018ac   f008
0018ae   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0018b0   f007
0018b2   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0018b4   f006
0018b6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0018b8   f005
0018ba   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0018bc   f004
0018be   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0018c0   f003
0018c2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0018c4   f002
0018c6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0018c8   f001
0018ca   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0018cc   f000
0018ce   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0018d0   ffd9
0018d2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__DisplayString	code
                                           _DisplayString:
                                           ;	.line	496; test.c	void DisplayString(BYTE pos, char* text)
0020ee   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0020f0   ffe5
0020f2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0020f4   ffd9
0020f6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0020f8   ffe5
0020fa   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0020fc   ffe5
0020fe   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002100   ffe5
002102   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002104   ffe5
002106   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002108   ffe5
00210a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00210c   ffe5
00210e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002110   ffe5
002112   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002114   ffe5
002116   0e02     movlw	0x2                	MOVLW	0x02
002118   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00211a   f000
00211c   0e03     movlw	0x3                	MOVLW	0x03
00211e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002120   f001
002122   0e04     movlw	0x4                	MOVLW	0x04
002124   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002126   f002
002128   0e05     movlw	0x5                	MOVLW	0x05
00212a   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00212c   f003
                                           ;	.line	498; test.c	BYTE l= strlen(text)+1;
00212e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002130   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002132   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002134   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002136   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002138   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00213a   ecf0     call	0x25e0, 0           	CALL	_strlen
00213c   f012
00213e   6e04     movwf	0x4, 0             	MOVWF	r0x04
002140   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
002142   f005
002144   0e03     movlw	0x3                	MOVLW	0x03
002146   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002148   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
                                           ;	.line	499; test.c	BYTE max= 32-pos;
00214a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00214c   0820     sublw	0x20               	SUBLW	0x20
00214e   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	500; test.c	strlcpy((char*)&LCDText[pos], text,(l<max)?l:max );
002150   6a06     clrf	0x6, 0              	CLRF	r0x06
002152   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
002154   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002156   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
002158   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
00215a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00215c   6e06     movwf	0x6, 0             	MOVWF	r0x06
00215e   5000     movf	0, 0, 0             	MOVF	r0x00, W
002160   6e00     movwf	0, 0               	MOVWF	r0x00
002162   0e80     movlw	0x80               	MOVLW	0x80
002164   6e07     movwf	0x7, 0             	MOVWF	r0x07
002166   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002168   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
00216a   e302     bnc	0x2170               	BNC	_00273_DS_
00216c   c005     movff	0x5, 0x4           	MOVFF	r0x05, r0x04
00216e   f004
                                           _00273_DS_:
002170   6a05     clrf	0x5, 0              	CLRF	r0x05
002172   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002174   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002176   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002178   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00217a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00217c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00217e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002180   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002182   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002184   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002186   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002188   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00218a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00218c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00218e   5000     movf	0, 0, 0             	MOVF	r0x00, W
002190   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002192   ec6a     call	0x16d4, 0           	CALL	_strlcpy
002194   f00b
002196   0e08     movlw	0x8                	MOVLW	0x08
002198   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	501; test.c	LCDUpdate();
00219a   eceb     call	0xfd6, 0            	CALL	_LCDUpdate
00219c   f007
00219e   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0021a0   f007
0021a2   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0021a4   f006
0021a6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0021a8   f005
0021aa   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0021ac   f004
0021ae   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0021b0   f003
0021b2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0021b4   f002
0021b6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0021b8   f001
0021ba   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0021bc   f000
0021be   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0021c0   ffd9
0021c2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__DisplayWORD	code
                                           _DisplayWORD:
                                           ;	.line	474; test.c	void DisplayWORD(BYTE pos, WORD w) //WORD is a 16 bits unsigned
001bb0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001bb2   ffe5
001bb4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001bb6   ffd9
001bb8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001bba   ffe5
001bbc   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001bbe   ffe5
001bc0   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001bc2   ffe5
001bc4   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001bc6   ffe5
001bc8   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001bca   ffe5
001bcc   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001bce   ffe5
001bd0   0e02     movlw	0x2                	MOVLW	0x02
001bd2   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001bd4   f000
001bd6   0e03     movlw	0x3                	MOVLW	0x03
001bd8   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001bda   f001
001bdc   0e04     movlw	0x4                	MOVLW	0x04
001bde   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001be0   f002
                                           ;	.line	482; test.c	ultoa(w, WDigit, radix);      
001be2   6a03     clrf	0x3, 0              	CLRF	r0x03
001be4   6a04     clrf	0x4, 0              	CLRF	r0x04
001be6   0e0a     movlw	0xa                	MOVLW	0x0a
001be8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bea   0e0f     movlw	0xf                	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
001bec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bee   0e4e     movlw	0x4e               	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
001bf0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bf2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001bf4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bf6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001bf8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bfa   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001bfc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001bfe   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001c00   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c02   ec6a     call	0x18d4, 0           	CALL	_ultoa
001c04   f00c
001c06   0e07     movlw	0x7                	MOVLW	0x07
001c08   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	483; test.c	for(j = 0; j < strlen((char*)WDigit); j++)
001c0a   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00254_DS_:
001c0c   0e0f     movlw	0xf                	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
001c0e   6e03     movwf	0x3, 0             	MOVWF	r0x03
001c10   0e4e     movlw	0x4e               	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
001c12   6e02     movwf	0x2, 0             	MOVWF	r0x02
001c14   0e80     movlw	0x80               	MOVLW	0x80
001c16   6e04     movwf	0x4, 0             	MOVWF	r0x04
001c18   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001c1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c1c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001c1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c20   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001c22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c24   ecf0     call	0x25e0, 0           	CALL	_strlen
001c26   f012
001c28   6e02     movwf	0x2, 0             	MOVWF	r0x02
001c2a   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
001c2c   f003
001c2e   0e03     movlw	0x3                	MOVLW	0x03
001c30   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001c32   c001     movff	0x1, 0x4           	MOVFF	r0x01, r0x04
001c34   f004
001c36   6a05     clrf	0x5, 0              	CLRF	r0x05
001c38   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001c3a   0f80     addlw	0x80               	ADDLW	0x80
001c3c   6ef3     movwf	0xf3, 0            	MOVWF	PRODL
001c3e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001c40   0f80     addlw	0x80               	ADDLW	0x80
001c42   5cf3     subwf	0xf3, 0, 0         	SUBWF	PRODL, W
001c44   e102     bnz	0x1c4a               	BNZ	_00264_DS_
001c46   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001c48   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
                                           _00264_DS_:
001c4a   e21c     bc	0x1c84                	BC	_00257_DS_
                                           ;	.line	485; test.c	LCDText[LCDPos++] = WDigit[j];
001c4c   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
001c4e   f002
001c50   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001c52   6a03     clrf	0x3, 0              	CLRF	r0x03
001c54   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001c56   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
001c58   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001c5a   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001c5c   0e4e     movlw	0x4e               	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
001c5e   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
001c60   6e04     movwf	0x4, 0             	MOVWF	r0x04
001c62   6a05     clrf	0x5, 0              	CLRF	r0x05
001c64   0e0f     movlw	0xf                	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
001c66   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
001c68   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
001c6a   ffe9
001c6c   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
001c6e   ffea
001c70   cfef     movff	0xfef, 0x4         	MOVFF	INDF0, r0x04
001c72   f004
001c74   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
001c76   ffe9
001c78   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
001c7a   ffea
001c7c   c004     movff	0x4, 0xfef         	MOVFF	r0x04, INDF0
001c7e   ffef
                                           ;	.line	483; test.c	for(j = 0; j < strlen((char*)WDigit); j++)
001c80   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
001c82   d7c4     bra	0x1c0c               	BRA	_00254_DS_
                                           _00257_DS_:
                                           ;	.line	487; test.c	if(LCDPos < 32u)
001c84   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
001c86   f001
001c88   6a02     clrf	0x2, 0              	CLRF	r0x02
001c8a   0e00     movlw	0                  	MOVLW	0x00
001c8c   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
001c8e   e102     bnz	0x1c94               	BNZ	_00265_DS_
001c90   0e20     movlw	0x20               	MOVLW	0x20
001c92   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00265_DS_:
001c94   e20b     bc	0x1cac                	BC	_00253_DS_
                                           ;	.line	488; test.c	LCDText[LCDPos] = 0;
001c96   6a01     clrf	0x1, 0              	CLRF	r0x01
001c98   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001c9a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001c9c   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001c9e   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001ca0   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001ca2   ffe9
001ca4   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
001ca6   ffea
001ca8   0e00     movlw	0                  	MOVLW	0x00
001caa   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           _00253_DS_:
                                           ;	.line	489; test.c	LCDUpdate();
001cac   eceb     call	0xfd6, 0            	CALL	_LCDUpdate
001cae   f007
001cb0   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001cb2   f005
001cb4   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001cb6   f004
001cb8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001cba   f003
001cbc   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001cbe   f002
001cc0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001cc2   f001
001cc4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001cc6   f000
001cc8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001cca   ffd9
001ccc   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__LowPriorityInterrupt	code
                                           _LowPriorityInterrupt:
                                           ;	.line	371; test.c	void LowPriorityInterrupt(void) __interrupt (2)
0027a0   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
0027a2   ffe5
0027a4   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
0027a6   ffe5
0027a8   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
0027aa   ffe5
0027ac   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
0027ae   ffe5
0027b0   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
0027b2   ffe5
0027b4   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
0027b6   ffe5
0027b8   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
0027ba   ffe5
0027bc   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
0027be   ffe5
0027c0   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
0027c2   ffe5
0027c4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0027c6   ffe5
0027c8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0027ca   ffd9
                                           ;	.line	460; test.c	}
0027cc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0027ce   ffd9
0027d0   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
0027d2   fffb
0027d4   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
0027d6   fffa
0027d8   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
0027da   ffea
0027dc   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
0027de   ffe9
0027e0   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
0027e2   fff4
0027e4   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
0027e6   fff3
0027e8   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
0027ea   ffe0
0027ec   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
0027ee   ffd8
0027f0   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
0027f2   ffe8
0027f4   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_test__HighPriorityInterrupt	code
                                           _HighPriorityInterrupt:
                                           ;	.line	280; test.c	void HighPriorityInterrupt(void) __interrupt (1)
00149c   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
00149e   ffe5
0014a0   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
0014a2   ffe5
0014a4   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
0014a6   ffe5
0014a8   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
0014aa   ffe5
0014ac   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
0014ae   ffe5
0014b0   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
0014b2   ffe5
0014b4   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
0014b6   ffe5
0014b8   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
0014ba   ffe5
0014bc   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
0014be   ffe5
0014c0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0014c2   ffe5
0014c4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0014c6   ffd9
0014c8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0014ca   ffe5
                                           ;	.line	282; test.c	if (INTCONbits.TMR0IF)
0014cc   a4f2     btfss	0xf2, 0x2, 0       	BTFSS	_INTCONbits, 2
0014ce   d00a     bra	0x14e4               	BRA	_00207_DS_
                                           ;	.line	286; test.c	TMR0H = 0xA0; 
0014d0   0ea0     movlw	0xa0               	MOVLW	0xa0
0014d2   6ed7     movwf	0xd7, 0            	MOVWF	_TMR0H
                                           ;	.line	287; test.c	TMR0L = 0xA2;
0014d4   0ea2     movlw	0xa2               	MOVLW	0xa2
0014d6   6ed6     movwf	0xd6, 0            	MOVWF	_TMR0L
                                           ;	.line	288; test.c	INTCONbits.TMR0IF = 0; // OBLIGATOIRE: Remettre le bit d'interruption à zéro
0014d8   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
0014da   010e     movlb	0xe                	BANKSEL	_seconds
                                           ;	.line	289; test.c	seconds++;
0014dc   2b29     incf	0x29, 0x1, 0x1      	INCF	_seconds, F, B
0014de   e302     bnc	0x14e4               	BNC	_10280_DS_
0014e0   010e     movlb	0xe                	BANKSEL	(_seconds + 1)
0014e2   2b2a     incf	0x2a, 0x1, 0x1      	INCF	(_seconds + 1), F, B
                                           _10280_DS_:
                                           _00207_DS_:
                                           ;	.line	291; test.c	if (INTCON3bits.INT3F){ //Interupt Flag BUT1
0014e4   a4f0     btfss	0xf0, 0x2, 0       	BTFSS	_INTCON3bits, 2
0014e6   d075     bra	0x15d2               	BRA	_00218_DS_
                                           ;	.line	292; test.c	switch(stateMenu){
0014e8   0e00     movlw	0                  	MOVLW	0x00
0014ea   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
0014ec   5d24     subwf	0x24, 0, 0x1       	SUBWF	(_stateMenu + 1), W, B
0014ee   e103     bnz	0x14f6               	BNZ	_00237_DS_
0014f0   0e08     movlw	0x8                	MOVLW	0x08
0014f2   010e     movlb	0xe                	BANKSEL	_stateMenu
0014f4   5d23     subwf	0x23, 0, 0x1       	SUBWF	_stateMenu, W, B
                                           _00237_DS_:
0014f6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0014f8   d06b     bra	0x15d0               	BRA	_00216_DS_
0014fa   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0014fc   ffe5
0014fe   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001500   ffe5
001502   6a02     clrf	0x2, 0              	CLRF	r0x02
001504   010e     movlb	0xe                	BANKSEL	_stateMenu
001506   3523     rlcf	0x23, 0, 0x1        	RLCF	_stateMenu, W, B
001508   3602     rlcf	0x2, 0x1, 0         	RLCF	r0x02, F
00150a   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
00150c   3602     rlcf	0x2, 0x1, 0         	RLCF	r0x02, F
00150e   0bfc     andlw	0xfc               	ANDLW	0xfc
001510   6e01     movwf	0x1, 0             	MOVWF	r0x01
001512   0e00     movlw	0                  	MOVLW	UPPER(_00238_DS_)
001514   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
001516   0e15     movlw	0x15               	MOVLW	HIGH(_00238_DS_)
001518   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
00151a   0e32     movlw	0x32               	MOVLW	LOW(_00238_DS_)
00151c   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00151e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001520   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
001522   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001524   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
001526   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001528   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00152a   f002
00152c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00152e   f001
001530   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00238_DS_:
001532   efa9     goto	0x1552              	GOTO	_00208_DS_
001534   f00a
001536   efb9     goto	0x1572              	GOTO	_00209_DS_
001538   f00a
00153a   efbf     goto	0x157e              	GOTO	_00210_DS_
00153c   f00a
00153e   efc5     goto	0x158a              	GOTO	_00211_DS_
001540   f00a
001542   efcb     goto	0x1596              	GOTO	_00212_DS_
001544   f00a
001546   efd1     goto	0x15a2              	GOTO	_00213_DS_
001548   f00a
00154a   efd7     goto	0x15ae              	GOTO	_00214_DS_
00154c   f00a
00154e   efdd     goto	0x15ba              	GOTO	_00215_DS_
001550   f00a
                                           _00208_DS_:
                                           ;	.line	294; test.c	alarmStatus ^=1; // Enable/disable alarm
001552   0e01     movlw	0x1                	MOVLW	0x01
001554   010e     movlb	0xe                	BANKSEL	_alarmStatus
001556   1b2f     xorwf	0x2f, 0x1, 0x1     	XORWF	_alarmStatus, F, B
                                           ;	.line	295; test.c	LED0_IO ^= 1;
001558   6a00     clrf	0, 0                	CLRF	r0x00
00155a   b091     btfsc	0x91, 0, 0         	BTFSC	_LATJbits, 0
00155c   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00155e   0e01     movlw	0x1                	MOVLW	0x01
001560   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
001562   5000     movf	0, 0, 0             	MOVF	r0x00, W
001564   0b01     andlw	0x1                	ANDLW	0x01
001566   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
001568   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
00156a   0bfe     andlw	0xfe               	ANDLW	0xfe
00156c   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
00156e   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
                                           ;	.line	296; test.c	break; // ADD SMTHNG TO STOP ALARM :)
001570   d02f     bra	0x15d0               	BRA	_00216_DS_
                                           _00209_DS_:
                                           ;	.line	298; test.c	stateMenu = SET_TIME_MINUTES;
001572   0e02     movlw	0x2                	MOVLW	0x02
001574   010e     movlb	0xe                	BANKSEL	_stateMenu
001576   6f23     movwf	0x23, 0x1          	MOVWF	_stateMenu, B
001578   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
00157a   6b24     clrf	0x24, 0x1           	CLRF	(_stateMenu + 1), B
                                           ;	.line	299; test.c	break;
00157c   d029     bra	0x15d0               	BRA	_00216_DS_
                                           _00210_DS_:
00157e   010e     movlb	0xe                	BANKSEL	_minutes
                                           ;	.line	301; test.c	minutes++;
001580   2b27     incf	0x27, 0x1, 0x1      	INCF	_minutes, F, B
001582   e302     bnc	0x1588               	BNC	_20281_DS_
001584   010e     movlb	0xe                	BANKSEL	(_minutes + 1)
001586   2b28     incf	0x28, 0x1, 0x1      	INCF	(_minutes + 1), F, B
                                           _20281_DS_:
                                           ;	.line	302; test.c	break;
001588   d023     bra	0x15d0               	BRA	_00216_DS_
                                           _00211_DS_:
00158a   010e     movlb	0xe                	BANKSEL	_hours
                                           ;	.line	304; test.c	hours++;
00158c   2b25     incf	0x25, 0x1, 0x1      	INCF	_hours, F, B
00158e   e302     bnc	0x1594               	BNC	_30282_DS_
001590   010e     movlb	0xe                	BANKSEL	(_hours + 1)
001592   2b26     incf	0x26, 0x1, 0x1      	INCF	(_hours + 1), F, B
                                           _30282_DS_:
                                           ;	.line	305; test.c	break;
001594   d01d     bra	0x15d0               	BRA	_00216_DS_
                                           _00212_DS_:
                                           ;	.line	307; test.c	stateMenu = SET_ALARMCLOCK_MINUTES;
001596   0e05     movlw	0x5                	MOVLW	0x05
001598   010e     movlb	0xe                	BANKSEL	_stateMenu
00159a   6f23     movwf	0x23, 0x1          	MOVWF	_stateMenu, B
00159c   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
00159e   6b24     clrf	0x24, 0x1           	CLRF	(_stateMenu + 1), B
                                           ;	.line	308; test.c	break;
0015a0   d017     bra	0x15d0               	BRA	_00216_DS_
                                           _00213_DS_:
0015a2   010e     movlb	0xe                	BANKSEL	_alarmMinutes
                                           ;	.line	310; test.c	alarmMinutes++;
0015a4   2b2d     incf	0x2d, 0x1, 0x1      	INCF	_alarmMinutes, F, B
0015a6   e302     bnc	0x15ac               	BNC	_40283_DS_
0015a8   010e     movlb	0xe                	BANKSEL	(_alarmMinutes + 1)
0015aa   2b2e     incf	0x2e, 0x1, 0x1      	INCF	(_alarmMinutes + 1), F, B
                                           _40283_DS_:
                                           ;	.line	311; test.c	break;
0015ac   d011     bra	0x15d0               	BRA	_00216_DS_
                                           _00214_DS_:
0015ae   010e     movlb	0xe                	BANKSEL	_alarmHours
                                           ;	.line	313; test.c	alarmHours++;
0015b0   2b2b     incf	0x2b, 0x1, 0x1      	INCF	_alarmHours, F, B
0015b2   e302     bnc	0x15b8               	BNC	_50284_DS_
0015b4   010e     movlb	0xe                	BANKSEL	(_alarmHours + 1)
0015b6   2b2c     incf	0x2c, 0x1, 0x1      	INCF	(_alarmHours + 1), F, B
                                           _50284_DS_:
                                           ;	.line	314; test.c	break;
0015b8   d00b     bra	0x15d0               	BRA	_00216_DS_
                                           _00215_DS_:
0015ba   010e     movlb	0xe                	BANKSEL	_stateMenu
                                           ;	.line	316; test.c	stateMenu = STANDARD_STATE;
0015bc   6b23     clrf	0x23, 0x1           	CLRF	_stateMenu, B
0015be   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
0015c0   6b24     clrf	0x24, 0x1           	CLRF	(_stateMenu + 1), B
0015c2   010e     movlb	0xe                	BANKSEL	_alarmStatus
                                           ;	.line	317; test.c	alarmStatus = 0;
0015c4   6b2f     clrf	0x2f, 0x1           	CLRF	_alarmStatus, B
0015c6   010e     movlb	0xe                	BANKSEL	(_alarmStatus + 1)
0015c8   6b30     clrf	0x30, 0x1           	CLRF	(_alarmStatus + 1), B
                                           ;	.line	318; test.c	LED0_IO = 0;
0015ca   9091     bcf	0x91, 0, 0           	BCF	_LATJbits, 0
                                           ;	.line	319; test.c	LED1_IO = 0;
0015cc   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	320; test.c	LED2_IO = 0;
0015ce   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           _00216_DS_:
                                           ;	.line	326; test.c	INTCON3bits.INT3F = 0; // clear flag
0015d0   94f0     bcf	0xf0, 0x2, 0         	BCF	_INTCON3bits, 2
                                           _00218_DS_:
                                           ;	.line	329; test.c	if (INTCON3bits.INT1F){ //Interupt Flag BUT2
0015d2   a0f0     btfss	0xf0, 0, 0         	BTFSS	_INTCON3bits, 0
0015d4   d068     bra	0x16a6               	BRA	_00230_DS_
                                           ;	.line	330; test.c	switch(stateMenu){
0015d6   0e00     movlw	0                  	MOVLW	0x00
0015d8   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
0015da   5d24     subwf	0x24, 0, 0x1       	SUBWF	(_stateMenu + 1), W, B
0015dc   e103     bnz	0x15e4               	BNZ	_00241_DS_
0015de   0e08     movlw	0x8                	MOVLW	0x08
0015e0   010e     movlb	0xe                	BANKSEL	_stateMenu
0015e2   5d23     subwf	0x23, 0, 0x1       	SUBWF	_stateMenu, W, B
                                           _00241_DS_:
0015e4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0015e6   d05e     bra	0x16a4               	BRA	_00227_DS_
0015e8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0015ea   ffe5
0015ec   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0015ee   ffe5
0015f0   6a02     clrf	0x2, 0              	CLRF	r0x02
0015f2   010e     movlb	0xe                	BANKSEL	_stateMenu
0015f4   3523     rlcf	0x23, 0, 0x1        	RLCF	_stateMenu, W, B
0015f6   3602     rlcf	0x2, 0x1, 0         	RLCF	r0x02, F
0015f8   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
0015fa   3602     rlcf	0x2, 0x1, 0         	RLCF	r0x02, F
0015fc   0bfc     andlw	0xfc               	ANDLW	0xfc
0015fe   6e01     movwf	0x1, 0             	MOVWF	r0x01
001600   0e00     movlw	0                  	MOVLW	UPPER(_00242_DS_)
001602   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
001604   0e16     movlw	0x16               	MOVLW	HIGH(_00242_DS_)
001606   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
001608   0e20     movlw	0x20               	MOVLW	LOW(_00242_DS_)
00160a   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00160c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00160e   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
001610   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001612   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
001614   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001616   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001618   f002
00161a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00161c   f001
00161e   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00242_DS_:
001620   ef20     goto	0x1640              	GOTO	_00219_DS_
001622   f00b
001624   ef26     goto	0x164c              	GOTO	_00220_DS_
001626   f00b
001628   ef2c     goto	0x1658              	GOTO	_00221_DS_
00162a   f00b
00162c   ef32     goto	0x1664              	GOTO	_00222_DS_
00162e   f00b
001630   ef37     goto	0x166e              	GOTO	_00223_DS_
001632   f00b
001634   ef3c     goto	0x1678              	GOTO	_00224_DS_
001636   f00b
001638   ef42     goto	0x1684              	GOTO	_00225_DS_
00163a   f00b
00163c   ef47     goto	0x168e              	GOTO	_00226_DS_
00163e   f00b
                                           _00219_DS_:
                                           ;	.line	332; test.c	stateMenu = SET_TIME_MENU;
001640   0e01     movlw	0x1                	MOVLW	0x01
001642   010e     movlb	0xe                	BANKSEL	_stateMenu
001644   6f23     movwf	0x23, 0x1          	MOVWF	_stateMenu, B
001646   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
001648   6b24     clrf	0x24, 0x1           	CLRF	(_stateMenu + 1), B
                                           ;	.line	333; test.c	break; // ADD SMTHNG TO STOP ALARM :)
00164a   d02c     bra	0x16a4               	BRA	_00227_DS_
                                           _00220_DS_:
                                           ;	.line	335; test.c	stateMenu = SET_ALARMCLOCK_MENU;
00164c   0e04     movlw	0x4                	MOVLW	0x04
00164e   010e     movlb	0xe                	BANKSEL	_stateMenu
001650   6f23     movwf	0x23, 0x1          	MOVWF	_stateMenu, B
001652   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
001654   6b24     clrf	0x24, 0x1           	CLRF	(_stateMenu + 1), B
                                           ;	.line	336; test.c	break;
001656   d026     bra	0x16a4               	BRA	_00227_DS_
                                           _00221_DS_:
                                           ;	.line	338; test.c	stateMenu = SET_TIME_HOURS;
001658   0e03     movlw	0x3                	MOVLW	0x03
00165a   010e     movlb	0xe                	BANKSEL	_stateMenu
00165c   6f23     movwf	0x23, 0x1          	MOVWF	_stateMenu, B
00165e   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
001660   6b24     clrf	0x24, 0x1           	CLRF	(_stateMenu + 1), B
                                           ;	.line	339; test.c	break;
001662   d020     bra	0x16a4               	BRA	_00227_DS_
                                           _00222_DS_:
001664   010e     movlb	0xe                	BANKSEL	_stateMenu
                                           ;	.line	341; test.c	stateMenu = STANDARD_STATE;
001666   6b23     clrf	0x23, 0x1           	CLRF	_stateMenu, B
001668   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
00166a   6b24     clrf	0x24, 0x1           	CLRF	(_stateMenu + 1), B
                                           ;	.line	342; test.c	break;
00166c   d01b     bra	0x16a4               	BRA	_00227_DS_
                                           _00223_DS_:
00166e   010e     movlb	0xe                	BANKSEL	_stateMenu
                                           ;	.line	344; test.c	stateMenu = STANDARD_STATE;
001670   6b23     clrf	0x23, 0x1           	CLRF	_stateMenu, B
001672   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
001674   6b24     clrf	0x24, 0x1           	CLRF	(_stateMenu + 1), B
                                           ;	.line	345; test.c	break;
001676   d016     bra	0x16a4               	BRA	_00227_DS_
                                           _00224_DS_:
                                           ;	.line	347; test.c	stateMenu = SET_ALARMCLOCK_HOURS;
001678   0e06     movlw	0x6                	MOVLW	0x06
00167a   010e     movlb	0xe                	BANKSEL	_stateMenu
00167c   6f23     movwf	0x23, 0x1          	MOVWF	_stateMenu, B
00167e   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
001680   6b24     clrf	0x24, 0x1           	CLRF	(_stateMenu + 1), B
                                           ;	.line	348; test.c	break;
001682   d010     bra	0x16a4               	BRA	_00227_DS_
                                           _00225_DS_:
001684   010e     movlb	0xe                	BANKSEL	_stateMenu
                                           ;	.line	350; test.c	stateMenu = STANDARD_STATE;
001686   6b23     clrf	0x23, 0x1           	CLRF	_stateMenu, B
001688   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
00168a   6b24     clrf	0x24, 0x1           	CLRF	(_stateMenu + 1), B
                                           ;	.line	351; test.c	break;
00168c   d00b     bra	0x16a4               	BRA	_00227_DS_
                                           _00226_DS_:
00168e   010e     movlb	0xe                	BANKSEL	_stateMenu
                                           ;	.line	353; test.c	stateMenu = STANDARD_STATE;
001690   6b23     clrf	0x23, 0x1           	CLRF	_stateMenu, B
001692   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
001694   6b24     clrf	0x24, 0x1           	CLRF	(_stateMenu + 1), B
001696   010e     movlb	0xe                	BANKSEL	_alarmStatus
                                           ;	.line	354; test.c	alarmStatus = 0;
001698   6b2f     clrf	0x2f, 0x1           	CLRF	_alarmStatus, B
00169a   010e     movlb	0xe                	BANKSEL	(_alarmStatus + 1)
00169c   6b30     clrf	0x30, 0x1           	CLRF	(_alarmStatus + 1), B
                                           ;	.line	355; test.c	LED0_IO = 0;
00169e   9091     bcf	0x91, 0, 0           	BCF	_LATJbits, 0
                                           ;	.line	356; test.c	LED1_IO = 0;
0016a0   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	357; test.c	LED2_IO = 0;
0016a2   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           _00227_DS_:
                                           ;	.line	362; test.c	INTCON3bits.INT1F = 0; // clear flag
0016a4   90f0     bcf	0xf0, 0, 0           	BCF	_INTCON3bits, 0
                                           _00230_DS_:
0016a6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0016a8   f000
0016aa   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0016ac   ffd9
0016ae   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
0016b0   fffb
0016b2   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
0016b4   fffa
0016b6   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
0016b8   ffea
0016ba   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
0016bc   ffe9
0016be   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
0016c0   fff4
0016c2   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
0016c4   fff3
0016c6   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
0016c8   ffe0
0016ca   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
0016cc   ffd8
0016ce   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
0016d0   ffe8
0016d2   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_test__ConvertTime	code
                                           _ConvertTime:
                                           ;	.line	248; test.c	void ConvertTime(short time, char* str){
002356   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002358   ffe5
00235a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00235c   ffd9
00235e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002360   ffe5
002362   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002364   ffe5
002366   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002368   ffe5
00236a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00236c   ffe5
00236e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002370   ffe5
002372   0e02     movlw	0x2                	MOVLW	0x02
002374   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002376   f000
002378   0e03     movlw	0x3                	MOVLW	0x03
00237a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00237c   f001
00237e   0e04     movlw	0x4                	MOVLW	0x04
002380   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002382   f002
002384   0e05     movlw	0x5                	MOVLW	0x05
002386   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
002388   f003
00238a   0e06     movlw	0x6                	MOVLW	0x06
00238c   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00238e   f004
                                           ;	.line	249; test.c	if(time<10){
002390   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002392   0f80     addlw	0x80               	ADDLW	0x80
002394   0f80     addlw	0x80               	ADDLW	0x80
002396   e102     bnz	0x239c               	BNZ	_00201_DS_
002398   0e0a     movlw	0xa                	MOVLW	0x0a
00239a   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00201_DS_:
00239c   e215     bc	0x23c8                	BC	_00196_DS_
                                           ;	.line	250; test.c	sprintf(str,"0%u\0",time);
00239e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0023a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023a2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0023a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023a6   0e00     movlw	0                  	MOVLW	UPPER(__str_10)
0023a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023aa   0e1d     movlw	0x1d               	MOVLW	HIGH(__str_10)
0023ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023ae   0ee2     movlw	0xe2               	MOVLW	LOW(__str_10)
0023b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023b2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0023b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023b6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0023b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023ba   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0023bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023be   ec02     call	0x2004, 0           	CALL	_sprintf
0023c0   f010
0023c2   0e08     movlw	0x8                	MOVLW	0x08
0023c4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0023c6   d014     bra	0x23f0               	BRA	_00198_DS_
                                           _00196_DS_:
                                           ;	.line	252; test.c	sprintf(str,"%u\0",time);
0023c8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0023ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023cc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0023ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023d0   0e00     movlw	0                  	MOVLW	UPPER(__str_11)
0023d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023d4   0e1d     movlw	0x1d               	MOVLW	HIGH(__str_11)
0023d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023d8   0ee8     movlw	0xe8               	MOVLW	LOW(__str_11)
0023da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023dc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0023de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023e0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0023e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023e4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0023e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023e8   ec02     call	0x2004, 0           	CALL	_sprintf
0023ea   f010
0023ec   0e08     movlw	0x8                	MOVLW	0x08
0023ee   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00198_DS_:
0023f0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0023f2   f004
0023f4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0023f6   f003
0023f8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0023fa   f002
0023fc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0023fe   f001
002400   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002402   f000
002404   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002406   ffd9
002408   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__ledAlarm	code
                                           _ledAlarm:
                                           ;	.line	240; test.c	void ledAlarm(){
0027f6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0027f8   ffe5
0027fa   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0027fc   ffd9
0027fe   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002800   ffe5
                                           ;	.line	241; test.c	LED1_IO ^= 1;
002802   6a00     clrf	0, 0                	CLRF	r0x00
002804   b291     btfsc	0x91, 0x1, 0       	BTFSC	_LATJbits, 1
002806   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002808   0e01     movlw	0x1                	MOVLW	0x01
00280a   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
00280c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00280e   0b01     andlw	0x1                	ANDLW	0x01
002810   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
002812   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
002814   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
002816   0bfd     andlw	0xfd               	ANDLW	0xfd
002818   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
00281a   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
                                           ;	.line	242; test.c	LED2_IO ^= 1;
00281c   6a00     clrf	0, 0                	CLRF	r0x00
00281e   b491     btfsc	0x91, 0x2, 0       	BTFSC	_LATJbits, 2
002820   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
002822   0e01     movlw	0x1                	MOVLW	0x01
002824   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
002826   5000     movf	0, 0, 0             	MOVF	r0x00, W
002828   0b01     andlw	0x1                	ANDLW	0x01
00282a   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
00282c   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
00282e   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
002830   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
002832   0bfb     andlw	0xfb               	ANDLW	0xfb
002834   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
002836   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
002838   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00283a   f000
00283c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00283e   ffd9
002840   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__UpdateLCD	code
                                           _UpdateLCD:
                                           ;	.line	179; test.c	void UpdateLCD(){
000852   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000854   ffe5
000856   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000858   ffd9
00085a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00085c   ffe5
00085e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000860   ffe5
000862   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000864   ffe5
000866   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000868   ffe5
00086a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00086c   ffe5
00086e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000870   ffe5
000872   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000874   ffe5
000876   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000878   ffe5
00087a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00087c   ffe5
00087e   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
000880   ffe5
000882   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
000884   ffe5
000886   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
000888   ffe5
00088a   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
00088c   ffe5
00088e   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
000890   ffe5
000892   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
000894   ffe5
                                           ;	.line	180; test.c	switch(stateMenu){
000896   0e00     movlw	0                  	MOVLW	0x00
000898   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
00089a   5d24     subwf	0x24, 0, 0x1       	SUBWF	(_stateMenu + 1), W, B
00089c   e103     bnz	0x8a4                	BNZ	_00184_DS_
00089e   0e08     movlw	0x8                	MOVLW	0x08
0008a0   010e     movlb	0xe                	BANKSEL	_stateMenu
0008a2   5d23     subwf	0x23, 0, 0x1       	SUBWF	_stateMenu, W, B
                                           _00184_DS_:
0008a4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0008a6   efb8     goto	0xf70               	GOTO	_00179_DS_
0008a8   f007
0008aa   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
0008ac   ffe5
0008ae   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
0008b0   ffe5
0008b2   6a10     clrf	0x10, 0             	CLRF	r0x10
0008b4   010e     movlb	0xe                	BANKSEL	_stateMenu
0008b6   3523     rlcf	0x23, 0, 0x1        	RLCF	_stateMenu, W, B
0008b8   3610     rlcf	0x10, 0x1, 0        	RLCF	r0x10, F
0008ba   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
0008bc   3610     rlcf	0x10, 0x1, 0        	RLCF	r0x10, F
0008be   0bfc     andlw	0xfc               	ANDLW	0xfc
0008c0   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
0008c2   0e00     movlw	0                  	MOVLW	UPPER(_00185_DS_)
0008c4   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
0008c6   0e08     movlw	0x8                	MOVLW	HIGH(_00185_DS_)
0008c8   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
0008ca   0ee2     movlw	0xe2               	MOVLW	LOW(_00185_DS_)
0008cc   260f     addwf	0xf, 0x1, 0        	ADDWF	r0x0f, F
0008ce   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
0008d0   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
0008d2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0008d4   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
0008d6   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
0008d8   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
0008da   f010
0008dc   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
0008de   f00f
0008e0   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00185_DS_:
0008e2   ef81     goto	0x902               	GOTO	_00168_DS_
0008e4   f004
0008e6   ef43     goto	0xa86               	GOTO	_00172_DS_
0008e8   f005
0008ea   ef5b     goto	0xab6               	GOTO	_00173_DS_
0008ec   f005
0008ee   efde     goto	0xbbc               	GOTO	_00174_DS_
0008f0   f005
0008f2   ef61     goto	0xcc2               	GOTO	_00175_DS_
0008f4   f006
0008f6   ef78     goto	0xcf0               	GOTO	_00176_DS_
0008f8   f006
0008fa   efd7     goto	0xdae               	GOTO	_00177_DS_
0008fc   f006
0008fe   ef36     goto	0xe6c               	GOTO	_00178_DS_
000900   f007
                                           _00168_DS_:
                                           ;	.line	182; test.c	ConvertTime(hours, h);
000902   ce25     movff	0xe25, 0           	MOVFF	_hours, r0x00
000904   f000
000906   ce26     movff	0xe26, 0x1         	MOVFF	(_hours + 1), r0x01
000908   f001
00090a   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
00090c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00090e   0e54     movlw	0x54               	MOVLW	LOW(_h)
000910   6e02     movwf	0x2, 0             	MOVWF	r0x02
000912   0e80     movlw	0x80               	MOVLW	0x80
000914   6e04     movwf	0x4, 0             	MOVWF	r0x04
000916   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000918   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00091a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00091c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00091e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000920   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000922   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000924   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000926   5000     movf	0, 0, 0             	MOVF	r0x00, W
000928   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00092a   ecab     call	0x2356, 0           	CALL	_ConvertTime
00092c   f011
00092e   0e05     movlw	0x5                	MOVLW	0x05
000930   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	183; test.c	ConvertTime(minutes, m);
000932   ce27     movff	0xe27, 0           	MOVFF	_minutes, r0x00
000934   f000
000936   ce28     movff	0xe28, 0x1         	MOVFF	(_minutes + 1), r0x01
000938   f001
00093a   0e0f     movlw	0xf                	MOVLW	HIGH(_m)
00093c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00093e   0e57     movlw	0x57               	MOVLW	LOW(_m)
000940   6e02     movwf	0x2, 0             	MOVWF	r0x02
000942   0e80     movlw	0x80               	MOVLW	0x80
000944   6e04     movwf	0x4, 0             	MOVWF	r0x04
000946   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000948   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00094a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00094c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00094e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000950   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000952   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000954   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000956   5000     movf	0, 0, 0             	MOVF	r0x00, W
000958   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00095a   ecab     call	0x2356, 0           	CALL	_ConvertTime
00095c   f011
00095e   0e05     movlw	0x5                	MOVLW	0x05
000960   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	184; test.c	ConvertTime(seconds, s);
000962   ce29     movff	0xe29, 0           	MOVFF	_seconds, r0x00
000964   f000
000966   ce2a     movff	0xe2a, 0x1         	MOVFF	(_seconds + 1), r0x01
000968   f001
00096a   0e0f     movlw	0xf                	MOVLW	HIGH(_s)
00096c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00096e   0e5a     movlw	0x5a               	MOVLW	LOW(_s)
000970   6e02     movwf	0x2, 0             	MOVWF	r0x02
000972   0e80     movlw	0x80               	MOVLW	0x80
000974   6e04     movwf	0x4, 0             	MOVWF	r0x04
000976   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000978   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00097a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00097c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00097e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000980   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000982   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000984   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000986   5000     movf	0, 0, 0             	MOVF	r0x00, W
000988   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00098a   ecab     call	0x2356, 0           	CALL	_ConvertTime
00098c   f011
00098e   0e05     movlw	0x5                	MOVLW	0x05
000990   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000992   010e     movlb	0xe                	BANKSEL	_alarmStatus
                                           ;	.line	186; test.c	if(alarmStatus){
000994   512f     movf	0x2f, 0, 0x1        	MOVF	_alarmStatus, W, B
000996   010e     movlb	0xe                	BANKSEL	(_alarmStatus + 1)
000998   1130     iorwf	0x30, 0, 0x1       	IORWF	(_alarmStatus + 1), W, B
00099a   e017     bz	0x9ca                 	BZ	_00170_DS_
                                           ;	.line	187; test.c	sprintf(alarmState,"ON ");
00099c   0e0f     movlw	0xf                	MOVLW	HIGH(_alarmState)
00099e   6e01     movwf	0x1, 0             	MOVWF	r0x01
0009a0   0e5d     movlw	0x5d               	MOVLW	LOW(_alarmState)
0009a2   6e00     movwf	0, 0               	MOVWF	r0x00
0009a4   0e80     movlw	0x80               	MOVLW	0x80
0009a6   6e02     movwf	0x2, 0             	MOVWF	r0x02
0009a8   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
0009aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009ac   0e1c     movlw	0x1c               	MOVLW	HIGH(__str_0)
0009ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009b0   0ef8     movlw	0xf8               	MOVLW	LOW(__str_0)
0009b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009b4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0009b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009b8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0009ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009bc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0009be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009c0   ec02     call	0x2004, 0           	CALL	_sprintf
0009c2   f010
0009c4   0e06     movlw	0x6                	MOVLW	0x06
0009c6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0009c8   d016     bra	0x9f6                	BRA	_00171_DS_
                                           _00170_DS_:
                                           ;	.line	189; test.c	sprintf(alarmState,"OFF");
0009ca   0e0f     movlw	0xf                	MOVLW	HIGH(_alarmState)
0009cc   6e01     movwf	0x1, 0             	MOVWF	r0x01
0009ce   0e5d     movlw	0x5d               	MOVLW	LOW(_alarmState)
0009d0   6e00     movwf	0, 0               	MOVWF	r0x00
0009d2   0e80     movlw	0x80               	MOVLW	0x80
0009d4   6e02     movwf	0x2, 0             	MOVWF	r0x02
0009d6   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
0009d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009da   0e1c     movlw	0x1c               	MOVLW	HIGH(__str_1)
0009dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009de   0efc     movlw	0xfc               	MOVLW	LOW(__str_1)
0009e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009e2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0009e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009e6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0009e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009ea   5000     movf	0, 0, 0             	MOVF	r0x00, W
0009ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009ee   ec02     call	0x2004, 0           	CALL	_sprintf
0009f0   f010
0009f2   0e06     movlw	0x6                	MOVLW	0x06
0009f4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00171_DS_:
                                           ;	.line	191; test.c	sprintf(LCDPrint,"    %s:%s:%s    Alarm %s",h,m,s,alarmState);
0009f6   0e0f     movlw	0xf                	MOVLW	HIGH(_alarmState)
0009f8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0009fa   0e5d     movlw	0x5d               	MOVLW	LOW(_alarmState)
0009fc   6e00     movwf	0, 0               	MOVWF	r0x00
0009fe   0e80     movlw	0x80               	MOVLW	0x80
000a00   6e02     movwf	0x2, 0             	MOVWF	r0x02
000a02   0e0f     movlw	0xf                	MOVLW	HIGH(_s)
000a04   6e04     movwf	0x4, 0             	MOVWF	r0x04
000a06   0e5a     movlw	0x5a               	MOVLW	LOW(_s)
000a08   6e03     movwf	0x3, 0             	MOVWF	r0x03
000a0a   0e80     movlw	0x80               	MOVLW	0x80
000a0c   6e05     movwf	0x5, 0             	MOVWF	r0x05
000a0e   0e0f     movlw	0xf                	MOVLW	HIGH(_m)
000a10   6e07     movwf	0x7, 0             	MOVWF	r0x07
000a12   0e57     movlw	0x57               	MOVLW	LOW(_m)
000a14   6e06     movwf	0x6, 0             	MOVWF	r0x06
000a16   0e80     movlw	0x80               	MOVLW	0x80
000a18   6e08     movwf	0x8, 0             	MOVWF	r0x08
000a1a   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
000a1c   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
000a1e   0e54     movlw	0x54               	MOVLW	LOW(_h)
000a20   6e09     movwf	0x9, 0             	MOVWF	r0x09
000a22   0e80     movlw	0x80               	MOVLW	0x80
000a24   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
000a26   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDPrint)
000a28   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
000a2a   0e21     movlw	0x21               	MOVLW	LOW(_LCDPrint)
000a2c   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
000a2e   0e80     movlw	0x80               	MOVLW	0x80
000a30   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
000a32   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000a34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a36   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000a38   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a3a   5000     movf	0, 0, 0             	MOVF	r0x00, W
000a3c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a3e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000a40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a42   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000a44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a46   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000a48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a4a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000a4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a4e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000a50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a52   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000a54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a56   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
000a58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a5a   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000a5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a5e   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000a60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a62   0e00     movlw	0                  	MOVLW	UPPER(__str_2)
000a64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a66   0e1d     movlw	0x1d               	MOVLW	HIGH(__str_2)
000a68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a6a   0e00     movlw	0                  	MOVLW	LOW(__str_2)
000a6c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a6e   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
000a70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a72   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
000a74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a76   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
000a78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a7a   ec02     call	0x2004, 0           	CALL	_sprintf
000a7c   f010
000a7e   0e12     movlw	0x12               	MOVLW	0x12
000a80   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	192; test.c	break;
000a82   efb8     goto	0xf70               	GOTO	_00179_DS_
000a84   f007
                                           _00172_DS_:
                                           ;	.line	194; test.c	sprintf(LCDPrint, "      MENU        Set time ?");
000a86   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDPrint)
000a88   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a8a   0e21     movlw	0x21               	MOVLW	LOW(_LCDPrint)
000a8c   6e00     movwf	0, 0               	MOVWF	r0x00
000a8e   0e80     movlw	0x80               	MOVLW	0x80
000a90   6e02     movwf	0x2, 0             	MOVWF	r0x02
000a92   0e00     movlw	0                  	MOVLW	UPPER(__str_3)
000a94   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a96   0e1d     movlw	0x1d               	MOVLW	HIGH(__str_3)
000a98   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a9a   0e1a     movlw	0x1a               	MOVLW	LOW(__str_3)
000a9c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a9e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000aa0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aa2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000aa4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aa6   5000     movf	0, 0, 0             	MOVF	r0x00, W
000aa8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aaa   ec02     call	0x2004, 0           	CALL	_sprintf
000aac   f010
000aae   0e06     movlw	0x6                	MOVLW	0x06
000ab0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	195; test.c	break;
000ab2   efb8     goto	0xf70               	GOTO	_00179_DS_
000ab4   f007
                                           _00173_DS_:
                                           ;	.line	197; test.c	ConvertTime(hours, h);
000ab6   ce25     movff	0xe25, 0           	MOVFF	_hours, r0x00
000ab8   f000
000aba   ce26     movff	0xe26, 0x1         	MOVFF	(_hours + 1), r0x01
000abc   f001
000abe   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
000ac0   6e03     movwf	0x3, 0             	MOVWF	r0x03
000ac2   0e54     movlw	0x54               	MOVLW	LOW(_h)
000ac4   6e02     movwf	0x2, 0             	MOVWF	r0x02
000ac6   0e80     movlw	0x80               	MOVLW	0x80
000ac8   6e04     movwf	0x4, 0             	MOVWF	r0x04
000aca   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000acc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ace   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000ad0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ad2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000ad4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ad6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000ad8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ada   5000     movf	0, 0, 0             	MOVF	r0x00, W
000adc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ade   ecab     call	0x2356, 0           	CALL	_ConvertTime
000ae0   f011
000ae2   0e05     movlw	0x5                	MOVLW	0x05
000ae4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	198; test.c	ConvertTime(minutes, m);
000ae6   ce27     movff	0xe27, 0           	MOVFF	_minutes, r0x00
000ae8   f000
000aea   ce28     movff	0xe28, 0x1         	MOVFF	(_minutes + 1), r0x01
000aec   f001
000aee   0e0f     movlw	0xf                	MOVLW	HIGH(_m)
000af0   6e03     movwf	0x3, 0             	MOVWF	r0x03
000af2   0e57     movlw	0x57               	MOVLW	LOW(_m)
000af4   6e02     movwf	0x2, 0             	MOVWF	r0x02
000af6   0e80     movlw	0x80               	MOVLW	0x80
000af8   6e04     movwf	0x4, 0             	MOVWF	r0x04
000afa   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000afc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000afe   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000b00   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b02   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000b04   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b06   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000b08   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b0a   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b0c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b0e   ecab     call	0x2356, 0           	CALL	_ConvertTime
000b10   f011
000b12   0e05     movlw	0x5                	MOVLW	0x05
000b14   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	199; test.c	ConvertTime(seconds, s);
000b16   ce29     movff	0xe29, 0           	MOVFF	_seconds, r0x00
000b18   f000
000b1a   ce2a     movff	0xe2a, 0x1         	MOVFF	(_seconds + 1), r0x01
000b1c   f001
000b1e   0e0f     movlw	0xf                	MOVLW	HIGH(_s)
000b20   6e03     movwf	0x3, 0             	MOVWF	r0x03
000b22   0e5a     movlw	0x5a               	MOVLW	LOW(_s)
000b24   6e02     movwf	0x2, 0             	MOVWF	r0x02
000b26   0e80     movlw	0x80               	MOVLW	0x80
000b28   6e04     movwf	0x4, 0             	MOVWF	r0x04
000b2a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000b2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b2e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000b30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b32   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000b34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b36   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000b38   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b3a   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b3c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b3e   ecab     call	0x2356, 0           	CALL	_ConvertTime
000b40   f011
000b42   0e05     movlw	0x5                	MOVLW	0x05
000b44   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	201; test.c	sprintf(LCDPrint,"Set Minutes     %s:[%s]:%s",h,m,s);
000b46   0e0f     movlw	0xf                	MOVLW	HIGH(_s)
000b48   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b4a   0e5a     movlw	0x5a               	MOVLW	LOW(_s)
000b4c   6e00     movwf	0, 0               	MOVWF	r0x00
000b4e   0e80     movlw	0x80               	MOVLW	0x80
000b50   6e02     movwf	0x2, 0             	MOVWF	r0x02
000b52   0e0f     movlw	0xf                	MOVLW	HIGH(_m)
000b54   6e04     movwf	0x4, 0             	MOVWF	r0x04
000b56   0e57     movlw	0x57               	MOVLW	LOW(_m)
000b58   6e03     movwf	0x3, 0             	MOVWF	r0x03
000b5a   0e80     movlw	0x80               	MOVLW	0x80
000b5c   6e05     movwf	0x5, 0             	MOVWF	r0x05
000b5e   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
000b60   6e07     movwf	0x7, 0             	MOVWF	r0x07
000b62   0e54     movlw	0x54               	MOVLW	LOW(_h)
000b64   6e06     movwf	0x6, 0             	MOVWF	r0x06
000b66   0e80     movlw	0x80               	MOVLW	0x80
000b68   6e08     movwf	0x8, 0             	MOVWF	r0x08
000b6a   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDPrint)
000b6c   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
000b6e   0e21     movlw	0x21               	MOVLW	LOW(_LCDPrint)
000b70   6e09     movwf	0x9, 0             	MOVWF	r0x09
000b72   0e80     movlw	0x80               	MOVLW	0x80
000b74   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
000b76   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000b78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b7a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000b7c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b7e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b80   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b82   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000b84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b86   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000b88   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b8a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000b8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b8e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000b90   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b92   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000b94   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b96   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000b98   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b9a   0e00     movlw	0                  	MOVLW	UPPER(__str_4)
000b9c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b9e   0e1d     movlw	0x1d               	MOVLW	HIGH(__str_4)
000ba0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ba2   0e38     movlw	0x38               	MOVLW	LOW(__str_4)
000ba4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ba6   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
000ba8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000baa   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000bac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bae   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000bb0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bb2   ec02     call	0x2004, 0           	CALL	_sprintf
000bb4   f010
000bb6   0e0f     movlw	0xf                	MOVLW	0x0f
000bb8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	202; test.c	break;
000bba   d1da     bra	0xf70                	BRA	_00179_DS_
                                           _00174_DS_:
                                           ;	.line	204; test.c	ConvertTime(hours, h);
000bbc   ce25     movff	0xe25, 0           	MOVFF	_hours, r0x00
000bbe   f000
000bc0   ce26     movff	0xe26, 0x1         	MOVFF	(_hours + 1), r0x01
000bc2   f001
000bc4   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
000bc6   6e03     movwf	0x3, 0             	MOVWF	r0x03
000bc8   0e54     movlw	0x54               	MOVLW	LOW(_h)
000bca   6e02     movwf	0x2, 0             	MOVWF	r0x02
000bcc   0e80     movlw	0x80               	MOVLW	0x80
000bce   6e04     movwf	0x4, 0             	MOVWF	r0x04
000bd0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000bd2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bd4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000bd6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bd8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000bda   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bdc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000bde   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000be0   5000     movf	0, 0, 0             	MOVF	r0x00, W
000be2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000be4   ecab     call	0x2356, 0           	CALL	_ConvertTime
000be6   f011
000be8   0e05     movlw	0x5                	MOVLW	0x05
000bea   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	205; test.c	ConvertTime(minutes, m);
000bec   ce27     movff	0xe27, 0           	MOVFF	_minutes, r0x00
000bee   f000
000bf0   ce28     movff	0xe28, 0x1         	MOVFF	(_minutes + 1), r0x01
000bf2   f001
000bf4   0e0f     movlw	0xf                	MOVLW	HIGH(_m)
000bf6   6e03     movwf	0x3, 0             	MOVWF	r0x03
000bf8   0e57     movlw	0x57               	MOVLW	LOW(_m)
000bfa   6e02     movwf	0x2, 0             	MOVWF	r0x02
000bfc   0e80     movlw	0x80               	MOVLW	0x80
000bfe   6e04     movwf	0x4, 0             	MOVWF	r0x04
000c00   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c02   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c04   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000c06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c08   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000c0a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c0c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c10   5000     movf	0, 0, 0             	MOVF	r0x00, W
000c12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c14   ecab     call	0x2356, 0           	CALL	_ConvertTime
000c16   f011
000c18   0e05     movlw	0x5                	MOVLW	0x05
000c1a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	206; test.c	ConvertTime(seconds, s);
000c1c   ce29     movff	0xe29, 0           	MOVFF	_seconds, r0x00
000c1e   f000
000c20   ce2a     movff	0xe2a, 0x1         	MOVFF	(_seconds + 1), r0x01
000c22   f001
000c24   0e0f     movlw	0xf                	MOVLW	HIGH(_s)
000c26   6e03     movwf	0x3, 0             	MOVWF	r0x03
000c28   0e5a     movlw	0x5a               	MOVLW	LOW(_s)
000c2a   6e02     movwf	0x2, 0             	MOVWF	r0x02
000c2c   0e80     movlw	0x80               	MOVLW	0x80
000c2e   6e04     movwf	0x4, 0             	MOVWF	r0x04
000c30   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c34   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000c36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c38   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000c3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c3c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c40   5000     movf	0, 0, 0             	MOVF	r0x00, W
000c42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c44   ecab     call	0x2356, 0           	CALL	_ConvertTime
000c46   f011
000c48   0e05     movlw	0x5                	MOVLW	0x05
000c4a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	208; test.c	sprintf(LCDPrint,"Set Hours       [%s]:%s:%s",h,m,s);
000c4c   0e0f     movlw	0xf                	MOVLW	HIGH(_s)
000c4e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000c50   0e5a     movlw	0x5a               	MOVLW	LOW(_s)
000c52   6e00     movwf	0, 0               	MOVWF	r0x00
000c54   0e80     movlw	0x80               	MOVLW	0x80
000c56   6e02     movwf	0x2, 0             	MOVWF	r0x02
000c58   0e0f     movlw	0xf                	MOVLW	HIGH(_m)
000c5a   6e04     movwf	0x4, 0             	MOVWF	r0x04
000c5c   0e57     movlw	0x57               	MOVLW	LOW(_m)
000c5e   6e03     movwf	0x3, 0             	MOVWF	r0x03
000c60   0e80     movlw	0x80               	MOVLW	0x80
000c62   6e05     movwf	0x5, 0             	MOVWF	r0x05
000c64   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
000c66   6e07     movwf	0x7, 0             	MOVWF	r0x07
000c68   0e54     movlw	0x54               	MOVLW	LOW(_h)
000c6a   6e06     movwf	0x6, 0             	MOVWF	r0x06
000c6c   0e80     movlw	0x80               	MOVLW	0x80
000c6e   6e08     movwf	0x8, 0             	MOVWF	r0x08
000c70   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDPrint)
000c72   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
000c74   0e21     movlw	0x21               	MOVLW	LOW(_LCDPrint)
000c76   6e09     movwf	0x9, 0             	MOVWF	r0x09
000c78   0e80     movlw	0x80               	MOVLW	0x80
000c7a   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
000c7c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000c7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c80   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c82   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c84   5000     movf	0, 0, 0             	MOVF	r0x00, W
000c86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c88   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000c8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c8c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c90   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000c92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c94   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000c96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c98   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000c9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c9c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000c9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ca0   0e00     movlw	0                  	MOVLW	UPPER(__str_5)
000ca2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ca4   0e1d     movlw	0x1d               	MOVLW	HIGH(__str_5)
000ca6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ca8   0e54     movlw	0x54               	MOVLW	LOW(__str_5)
000caa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cac   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
000cae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cb0   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000cb2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cb4   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000cb6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cb8   ec02     call	0x2004, 0           	CALL	_sprintf
000cba   f010
000cbc   0e0f     movlw	0xf                	MOVLW	0x0f
000cbe   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	209; test.c	break;
000cc0   d157     bra	0xf70                	BRA	_00179_DS_
                                           _00175_DS_:
                                           ;	.line	211; test.c	sprintf(LCDPrint, "      MENU      Set Alarmclock?");
000cc2   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDPrint)
000cc4   6e01     movwf	0x1, 0             	MOVWF	r0x01
000cc6   0e21     movlw	0x21               	MOVLW	LOW(_LCDPrint)
000cc8   6e00     movwf	0, 0               	MOVWF	r0x00
000cca   0e80     movlw	0x80               	MOVLW	0x80
000ccc   6e02     movwf	0x2, 0             	MOVWF	r0x02
000cce   0e00     movlw	0                  	MOVLW	UPPER(__str_6)
000cd0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cd2   0e1d     movlw	0x1d               	MOVLW	HIGH(__str_6)
000cd4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cd6   0e70     movlw	0x70               	MOVLW	LOW(__str_6)
000cd8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cda   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000cdc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cde   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000ce0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ce2   5000     movf	0, 0, 0             	MOVF	r0x00, W
000ce4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ce6   ec02     call	0x2004, 0           	CALL	_sprintf
000ce8   f010
000cea   0e06     movlw	0x6                	MOVLW	0x06
000cec   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	212; test.c	break;
000cee   d140     bra	0xf70                	BRA	_00179_DS_
                                           _00176_DS_:
                                           ;	.line	214; test.c	ConvertTime(alarmHours, h);
000cf0   ce2b     movff	0xe2b, 0           	MOVFF	_alarmHours, r0x00
000cf2   f000
000cf4   ce2c     movff	0xe2c, 0x1         	MOVFF	(_alarmHours + 1), r0x01
000cf6   f001
000cf8   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
000cfa   6e03     movwf	0x3, 0             	MOVWF	r0x03
000cfc   0e54     movlw	0x54               	MOVLW	LOW(_h)
000cfe   6e02     movwf	0x2, 0             	MOVWF	r0x02
000d00   0e80     movlw	0x80               	MOVLW	0x80
000d02   6e04     movwf	0x4, 0             	MOVWF	r0x04
000d04   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000d06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d08   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000d0a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d0c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d10   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d14   5000     movf	0, 0, 0             	MOVF	r0x00, W
000d16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d18   ecab     call	0x2356, 0           	CALL	_ConvertTime
000d1a   f011
000d1c   0e05     movlw	0x5                	MOVLW	0x05
000d1e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	215; test.c	ConvertTime(alarmMinutes, m);
000d20   ce2d     movff	0xe2d, 0           	MOVFF	_alarmMinutes, r0x00
000d22   f000
000d24   ce2e     movff	0xe2e, 0x1         	MOVFF	(_alarmMinutes + 1), r0x01
000d26   f001
000d28   0e0f     movlw	0xf                	MOVLW	HIGH(_m)
000d2a   6e03     movwf	0x3, 0             	MOVWF	r0x03
000d2c   0e57     movlw	0x57               	MOVLW	LOW(_m)
000d2e   6e02     movwf	0x2, 0             	MOVWF	r0x02
000d30   0e80     movlw	0x80               	MOVLW	0x80
000d32   6e04     movwf	0x4, 0             	MOVWF	r0x04
000d34   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000d36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d38   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000d3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d3c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d40   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d44   5000     movf	0, 0, 0             	MOVF	r0x00, W
000d46   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d48   ecab     call	0x2356, 0           	CALL	_ConvertTime
000d4a   f011
000d4c   0e05     movlw	0x5                	MOVLW	0x05
000d4e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	216; test.c	sprintf(LCDPrint,"Set Alarm Min    %s:[%s]",h,m);
000d50   0e0f     movlw	0xf                	MOVLW	HIGH(_m)
000d52   6e01     movwf	0x1, 0             	MOVWF	r0x01
000d54   0e57     movlw	0x57               	MOVLW	LOW(_m)
000d56   6e00     movwf	0, 0               	MOVWF	r0x00
000d58   0e80     movlw	0x80               	MOVLW	0x80
000d5a   6e02     movwf	0x2, 0             	MOVWF	r0x02
000d5c   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
000d5e   6e04     movwf	0x4, 0             	MOVWF	r0x04
000d60   0e54     movlw	0x54               	MOVLW	LOW(_h)
000d62   6e03     movwf	0x3, 0             	MOVWF	r0x03
000d64   0e80     movlw	0x80               	MOVLW	0x80
000d66   6e05     movwf	0x5, 0             	MOVWF	r0x05
000d68   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDPrint)
000d6a   6e07     movwf	0x7, 0             	MOVWF	r0x07
000d6c   0e21     movlw	0x21               	MOVLW	LOW(_LCDPrint)
000d6e   6e06     movwf	0x6, 0             	MOVWF	r0x06
000d70   0e80     movlw	0x80               	MOVLW	0x80
000d72   6e08     movwf	0x8, 0             	MOVWF	r0x08
000d74   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d76   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d78   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d7a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d7c   5000     movf	0, 0, 0             	MOVF	r0x00, W
000d7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d80   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000d82   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d84   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000d86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d88   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000d8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d8c   0e00     movlw	0                  	MOVLW	UPPER(__str_7)
000d8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d90   0e1d     movlw	0x1d               	MOVLW	HIGH(__str_7)
000d92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d94   0e90     movlw	0x90               	MOVLW	LOW(__str_7)
000d96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d98   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000d9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d9c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000d9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000da0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000da2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000da4   ec02     call	0x2004, 0           	CALL	_sprintf
000da6   f010
000da8   0e0c     movlw	0xc                	MOVLW	0x0c
000daa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	217; test.c	break;
000dac   d0e1     bra	0xf70                	BRA	_00179_DS_
                                           _00177_DS_:
                                           ;	.line	219; test.c	ConvertTime(alarmHours, h);
000dae   ce2b     movff	0xe2b, 0           	MOVFF	_alarmHours, r0x00
000db0   f000
000db2   ce2c     movff	0xe2c, 0x1         	MOVFF	(_alarmHours + 1), r0x01
000db4   f001
000db6   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
000db8   6e03     movwf	0x3, 0             	MOVWF	r0x03
000dba   0e54     movlw	0x54               	MOVLW	LOW(_h)
000dbc   6e02     movwf	0x2, 0             	MOVWF	r0x02
000dbe   0e80     movlw	0x80               	MOVLW	0x80
000dc0   6e04     movwf	0x4, 0             	MOVWF	r0x04
000dc2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000dc4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dc6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000dc8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dca   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000dcc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dce   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000dd0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dd2   5000     movf	0, 0, 0             	MOVF	r0x00, W
000dd4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dd6   ecab     call	0x2356, 0           	CALL	_ConvertTime
000dd8   f011
000dda   0e05     movlw	0x5                	MOVLW	0x05
000ddc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	220; test.c	ConvertTime(alarmMinutes, m);
000dde   ce2d     movff	0xe2d, 0           	MOVFF	_alarmMinutes, r0x00
000de0   f000
000de2   ce2e     movff	0xe2e, 0x1         	MOVFF	(_alarmMinutes + 1), r0x01
000de4   f001
000de6   0e0f     movlw	0xf                	MOVLW	HIGH(_m)
000de8   6e03     movwf	0x3, 0             	MOVWF	r0x03
000dea   0e57     movlw	0x57               	MOVLW	LOW(_m)
000dec   6e02     movwf	0x2, 0             	MOVWF	r0x02
000dee   0e80     movlw	0x80               	MOVLW	0x80
000df0   6e04     movwf	0x4, 0             	MOVWF	r0x04
000df2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000df4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000df6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000df8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dfa   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000dfc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dfe   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000e00   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e02   5000     movf	0, 0, 0             	MOVF	r0x00, W
000e04   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e06   ecab     call	0x2356, 0           	CALL	_ConvertTime
000e08   f011
000e0a   0e05     movlw	0x5                	MOVLW	0x05
000e0c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	221; test.c	sprintf(LCDPrint,"Set Alarm Hours  [%s]:%s",h,m);
000e0e   0e0f     movlw	0xf                	MOVLW	HIGH(_m)
000e10   6e01     movwf	0x1, 0             	MOVWF	r0x01
000e12   0e57     movlw	0x57               	MOVLW	LOW(_m)
000e14   6e00     movwf	0, 0               	MOVWF	r0x00
000e16   0e80     movlw	0x80               	MOVLW	0x80
000e18   6e02     movwf	0x2, 0             	MOVWF	r0x02
000e1a   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
000e1c   6e04     movwf	0x4, 0             	MOVWF	r0x04
000e1e   0e54     movlw	0x54               	MOVLW	LOW(_h)
000e20   6e03     movwf	0x3, 0             	MOVWF	r0x03
000e22   0e80     movlw	0x80               	MOVLW	0x80
000e24   6e05     movwf	0x5, 0             	MOVWF	r0x05
000e26   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDPrint)
000e28   6e07     movwf	0x7, 0             	MOVWF	r0x07
000e2a   0e21     movlw	0x21               	MOVLW	LOW(_LCDPrint)
000e2c   6e06     movwf	0x6, 0             	MOVWF	r0x06
000e2e   0e80     movlw	0x80               	MOVLW	0x80
000e30   6e08     movwf	0x8, 0             	MOVWF	r0x08
000e32   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000e34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e36   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000e38   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e3a   5000     movf	0, 0, 0             	MOVF	r0x00, W
000e3c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e3e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000e40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e42   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000e44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e46   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000e48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e4a   0e00     movlw	0                  	MOVLW	UPPER(__str_8)
000e4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e4e   0e1d     movlw	0x1d               	MOVLW	HIGH(__str_8)
000e50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e52   0eaa     movlw	0xaa               	MOVLW	LOW(__str_8)
000e54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e56   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000e58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e5a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000e5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e5e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000e60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e62   ec02     call	0x2004, 0           	CALL	_sprintf
000e64   f010
000e66   0e0c     movlw	0xc                	MOVLW	0x0c
000e68   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	222; test.c	break;
000e6a   d082     bra	0xf70                	BRA	_00179_DS_
                                           _00178_DS_:
                                           ;	.line	224; test.c	ConvertTime(hours, h);
000e6c   ce25     movff	0xe25, 0           	MOVFF	_hours, r0x00
000e6e   f000
000e70   ce26     movff	0xe26, 0x1         	MOVFF	(_hours + 1), r0x01
000e72   f001
000e74   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
000e76   6e03     movwf	0x3, 0             	MOVWF	r0x03
000e78   0e54     movlw	0x54               	MOVLW	LOW(_h)
000e7a   6e02     movwf	0x2, 0             	MOVWF	r0x02
000e7c   0e80     movlw	0x80               	MOVLW	0x80
000e7e   6e04     movwf	0x4, 0             	MOVWF	r0x04
000e80   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000e82   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e84   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000e86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e88   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000e8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e8c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000e8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e90   5000     movf	0, 0, 0             	MOVF	r0x00, W
000e92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e94   ecab     call	0x2356, 0           	CALL	_ConvertTime
000e96   f011
000e98   0e05     movlw	0x5                	MOVLW	0x05
000e9a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	225; test.c	ConvertTime(minutes, m);
000e9c   ce27     movff	0xe27, 0           	MOVFF	_minutes, r0x00
000e9e   f000
000ea0   ce28     movff	0xe28, 0x1         	MOVFF	(_minutes + 1), r0x01
000ea2   f001
000ea4   0e0f     movlw	0xf                	MOVLW	HIGH(_m)
000ea6   6e03     movwf	0x3, 0             	MOVWF	r0x03
000ea8   0e57     movlw	0x57               	MOVLW	LOW(_m)
000eaa   6e02     movwf	0x2, 0             	MOVWF	r0x02
000eac   0e80     movlw	0x80               	MOVLW	0x80
000eae   6e04     movwf	0x4, 0             	MOVWF	r0x04
000eb0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000eb2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000eb4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000eb6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000eb8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000eba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ebc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000ebe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ec0   5000     movf	0, 0, 0             	MOVF	r0x00, W
000ec2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ec4   ecab     call	0x2356, 0           	CALL	_ConvertTime
000ec6   f011
000ec8   0e05     movlw	0x5                	MOVLW	0x05
000eca   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	226; test.c	ConvertTime(seconds, s);
000ecc   ce29     movff	0xe29, 0           	MOVFF	_seconds, r0x00
000ece   f000
000ed0   ce2a     movff	0xe2a, 0x1         	MOVFF	(_seconds + 1), r0x01
000ed2   f001
000ed4   0e0f     movlw	0xf                	MOVLW	HIGH(_s)
000ed6   6e03     movwf	0x3, 0             	MOVWF	r0x03
000ed8   0e5a     movlw	0x5a               	MOVLW	LOW(_s)
000eda   6e02     movwf	0x2, 0             	MOVWF	r0x02
000edc   0e80     movlw	0x80               	MOVLW	0x80
000ede   6e04     movwf	0x4, 0             	MOVWF	r0x04
000ee0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000ee2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ee4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000ee6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ee8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000eea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000eec   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000eee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ef0   5000     movf	0, 0, 0             	MOVF	r0x00, W
000ef2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ef4   ecab     call	0x2356, 0           	CALL	_ConvertTime
000ef6   f011
000ef8   0e05     movlw	0x5                	MOVLW	0x05
000efa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	228; test.c	sprintf(LCDPrint, "   It's Time !      %s:%s:%s",h,m,s);
000efc   0e0f     movlw	0xf                	MOVLW	HIGH(_s)
000efe   6e01     movwf	0x1, 0             	MOVWF	r0x01
000f00   0e5a     movlw	0x5a               	MOVLW	LOW(_s)
000f02   6e00     movwf	0, 0               	MOVWF	r0x00
000f04   0e80     movlw	0x80               	MOVLW	0x80
000f06   6e02     movwf	0x2, 0             	MOVWF	r0x02
000f08   0e0f     movlw	0xf                	MOVLW	HIGH(_m)
000f0a   6e04     movwf	0x4, 0             	MOVWF	r0x04
000f0c   0e57     movlw	0x57               	MOVLW	LOW(_m)
000f0e   6e03     movwf	0x3, 0             	MOVWF	r0x03
000f10   0e80     movlw	0x80               	MOVLW	0x80
000f12   6e05     movwf	0x5, 0             	MOVWF	r0x05
000f14   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
000f16   6e07     movwf	0x7, 0             	MOVWF	r0x07
000f18   0e54     movlw	0x54               	MOVLW	LOW(_h)
000f1a   6e06     movwf	0x6, 0             	MOVWF	r0x06
000f1c   0e80     movlw	0x80               	MOVLW	0x80
000f1e   6e08     movwf	0x8, 0             	MOVWF	r0x08
000f20   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDPrint)
000f22   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
000f24   0e21     movlw	0x21               	MOVLW	LOW(_LCDPrint)
000f26   6e09     movwf	0x9, 0             	MOVWF	r0x09
000f28   0e80     movlw	0x80               	MOVLW	0x80
000f2a   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
000f2c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000f2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f30   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000f32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f34   5000     movf	0, 0, 0             	MOVF	r0x00, W
000f36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f38   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000f3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f3c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000f3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f40   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000f42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f44   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000f46   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f48   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000f4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f4c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000f4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f50   0e00     movlw	0                  	MOVLW	UPPER(__str_9)
000f52   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f54   0e1d     movlw	0x1d               	MOVLW	HIGH(__str_9)
000f56   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f58   0ec4     movlw	0xc4               	MOVLW	LOW(__str_9)
000f5a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f5c   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
000f5e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f60   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000f62   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f64   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000f66   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f68   ec02     call	0x2004, 0           	CALL	_sprintf
000f6a   f010
000f6c   0e0f     movlw	0xf                	MOVLW	0x0f
000f6e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00179_DS_:
                                           ;	.line	231; test.c	DisplayString(0, LCDPrint);
000f70   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDPrint)
000f72   6e01     movwf	0x1, 0             	MOVWF	r0x01
000f74   0e21     movlw	0x21               	MOVLW	LOW(_LCDPrint)
000f76   6e00     movwf	0, 0               	MOVWF	r0x00
000f78   0e80     movlw	0x80               	MOVLW	0x80
000f7a   6e02     movwf	0x2, 0             	MOVWF	r0x02
000f7c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000f7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f80   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000f82   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f84   5000     movf	0, 0, 0             	MOVF	r0x00, W
000f86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f88   0e00     movlw	0                  	MOVLW	0x00
000f8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f8c   ec77     call	0x20ee, 0           	CALL	_DisplayString
000f8e   f010
000f90   0e04     movlw	0x4                	MOVLW	0x04
000f92   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000f94   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
000f96   f00e
000f98   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
000f9a   f00d
000f9c   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
000f9e   f00c
000fa0   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
000fa2   f00b
000fa4   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
000fa6   f00a
000fa8   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
000faa   f009
000fac   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000fae   f008
000fb0   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000fb2   f007
000fb4   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000fb6   f006
000fb8   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000fba   f005
000fbc   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000fbe   f004
000fc0   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000fc2   f003
000fc4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000fc6   f002
000fc8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000fca   f001
000fcc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000fce   f000
000fd0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000fd2   ffd9
000fd4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__IsItTime	code
                                           _IsItTime:
                                           ;	.line	169; test.c	void IsItTime(){
002552   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002554   ffe5
002556   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002558   ffd9
00255a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00255c   ffe5
00255e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002560   ffe5
002562   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002564   ffe5
002566   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002568   ffe5
                                           ;	.line	171; test.c	if(alarmStatus & (hours == alarmHours) & (minutes == alarmMinutes)){
00256a   6a00     clrf	0, 0                	CLRF	r0x00
00256c   010e     movlb	0xe                	BANKSEL	_hours
00256e   5125     movf	0x25, 0, 0x1        	MOVF	_hours, W, B
002570   010e     movlb	0xe                	BANKSEL	_alarmHours
002572   192b     xorwf	0x2b, 0, 0x1       	XORWF	_alarmHours, W, B
002574   e106     bnz	0x2582               	BNZ	_00160_DS_
002576   010e     movlb	0xe                	BANKSEL	(_hours + 1)
002578   5126     movf	0x26, 0, 0x1        	MOVF	(_hours + 1), W, B
00257a   010e     movlb	0xe                	BANKSEL	(_alarmHours + 1)
00257c   192c     xorwf	0x2c, 0, 0x1       	XORWF	(_alarmHours + 1), W, B
00257e   e101     bnz	0x2582               	BNZ	_00160_DS_
002580   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
                                           _00160_DS_:
002582   6a01     clrf	0x1, 0              	CLRF	r0x01
002584   be00     btfsc	0, 0x7, 0          	BTFSC	r0x00, 7
002586   6801     setf	0x1, 0              	SETF	r0x01
002588   010e     movlb	0xe                	BANKSEL	_alarmStatus
00258a   512f     movf	0x2f, 0, 0x1        	MOVF	_alarmStatus, W, B
00258c   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
00258e   010e     movlb	0xe                	BANKSEL	(_alarmStatus + 1)
002590   5130     movf	0x30, 0, 0x1        	MOVF	(_alarmStatus + 1), W, B
002592   1601     andwf	0x1, 0x1, 0        	ANDWF	r0x01, F
002594   6a02     clrf	0x2, 0              	CLRF	r0x02
002596   010e     movlb	0xe                	BANKSEL	_minutes
002598   5127     movf	0x27, 0, 0x1        	MOVF	_minutes, W, B
00259a   010e     movlb	0xe                	BANKSEL	_alarmMinutes
00259c   192d     xorwf	0x2d, 0, 0x1       	XORWF	_alarmMinutes, W, B
00259e   e106     bnz	0x25ac               	BNZ	_00163_DS_
0025a0   010e     movlb	0xe                	BANKSEL	(_minutes + 1)
0025a2   5128     movf	0x28, 0, 0x1        	MOVF	(_minutes + 1), W, B
0025a4   010e     movlb	0xe                	BANKSEL	(_alarmMinutes + 1)
0025a6   192e     xorwf	0x2e, 0, 0x1       	XORWF	(_alarmMinutes + 1), W, B
0025a8   e101     bnz	0x25ac               	BNZ	_00163_DS_
0025aa   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
                                           _00163_DS_:
0025ac   6a03     clrf	0x3, 0              	CLRF	r0x03
0025ae   be02     btfsc	0x2, 0x7, 0        	BTFSC	r0x02, 7
0025b0   6803     setf	0x3, 0              	SETF	r0x03
0025b2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0025b4   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
0025b6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0025b8   1601     andwf	0x1, 0x1, 0        	ANDWF	r0x01, F
0025ba   5000     movf	0, 0, 0             	MOVF	r0x00, W
0025bc   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
0025be   e005     bz	0x25ca                	BZ	_00156_DS_
                                           ;	.line	172; test.c	stateMenu = RINGING;
0025c0   0e07     movlw	0x7                	MOVLW	0x07
0025c2   010e     movlb	0xe                	BANKSEL	_stateMenu
0025c4   6f23     movwf	0x23, 0x1          	MOVWF	_stateMenu, B
0025c6   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
0025c8   6b24     clrf	0x24, 0x1           	CLRF	(_stateMenu + 1), B
                                           _00156_DS_:
0025ca   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0025cc   f003
0025ce   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0025d0   f002
0025d2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0025d4   f001
0025d6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0025d8   f000
0025da   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0025dc   ffd9
0025de   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__UpdateTime	code
                                           _UpdateTime:
                                           ;	.line	154; test.c	void UpdateTime(){
0026d0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0026d2   ffe5
0026d4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0026d6   ffd9
                                           ;	.line	155; test.c	if(seconds>=60)
0026d8   0e00     movlw	0                  	MOVLW	0x00
0026da   010e     movlb	0xe                	BANKSEL	(_seconds + 1)
0026dc   5d2a     subwf	0x2a, 0, 0x1       	SUBWF	(_seconds + 1), W, B
0026de   e103     bnz	0x26e6               	BNZ	_00146_DS_
0026e0   0e3c     movlw	0x3c               	MOVLW	0x3c
0026e2   010e     movlb	0xe                	BANKSEL	_seconds
0026e4   5d29     subwf	0x29, 0, 0x1       	SUBWF	_seconds, W, B
                                           _00146_DS_:
0026e6   e30b     bnc	0x26fe               	BNC	_00136_DS_
                                           ;	.line	157; test.c	seconds = seconds - 60; // si une interruption a empêché l'update pendant + d'une seconde.
0026e8   0ec4     movlw	0xc4               	MOVLW	0xc4
0026ea   010e     movlb	0xe                	BANKSEL	_seconds
0026ec   2729     addwf	0x29, 0x1, 0x1     	ADDWF	_seconds, F, B
0026ee   e202     bc	0x26f4                	BC	_60285_DS_
0026f0   010e     movlb	0xe                	BANKSEL	(_seconds + 1)
0026f2   072a     decf	0x2a, 0x1, 0x1      	DECF	(_seconds + 1), F, B
                                           _60285_DS_:
0026f4   010e     movlb	0xe                	BANKSEL	_minutes
                                           ;	.line	158; test.c	minutes++;
0026f6   2b27     incf	0x27, 0x1, 0x1      	INCF	_minutes, F, B
0026f8   e302     bnc	0x26fe               	BNC	_70286_DS_
0026fa   010e     movlb	0xe                	BANKSEL	(_minutes + 1)
0026fc   2b28     incf	0x28, 0x1, 0x1      	INCF	(_minutes + 1), F, B
                                           _70286_DS_:
                                           _00136_DS_:
0026fe   010e     movlb	0xe                	BANKSEL	_minutes
                                           ;	.line	160; test.c	if(minutes == 60){
002700   5127     movf	0x27, 0, 0x1        	MOVF	_minutes, W, B
002702   0a3c     xorlw	0x3c               	XORLW	0x3c
002704   e103     bnz	0x270c               	BNZ	_00147_DS_
002706   010e     movlb	0xe                	BANKSEL	(_minutes + 1)
002708   5128     movf	0x28, 0, 0x1        	MOVF	(_minutes + 1), W, B
00270a   e001     bz	0x270e                	BZ	_00148_DS_
                                           _00147_DS_:
00270c   d009     bra	0x2720               	BRA	_00138_DS_
                                           _00148_DS_:
00270e   010e     movlb	0xe                	BANKSEL	_minutes
                                           ;	.line	161; test.c	minutes = 0;
002710   6b27     clrf	0x27, 0x1           	CLRF	_minutes, B
002712   010e     movlb	0xe                	BANKSEL	(_minutes + 1)
002714   6b28     clrf	0x28, 0x1           	CLRF	(_minutes + 1), B
002716   010e     movlb	0xe                	BANKSEL	_hours
                                           ;	.line	162; test.c	hours++;
002718   2b25     incf	0x25, 0x1, 0x1      	INCF	_hours, F, B
00271a   e302     bnc	0x2720               	BNC	_80287_DS_
00271c   010e     movlb	0xe                	BANKSEL	(_hours + 1)
00271e   2b26     incf	0x26, 0x1, 0x1      	INCF	(_hours + 1), F, B
                                           _80287_DS_:
                                           _00138_DS_:
                                           ;	.line	164; test.c	if(hours > 23){
002720   0e00     movlw	0                  	MOVLW	0x00
002722   010e     movlb	0xe                	BANKSEL	(_hours + 1)
002724   5d26     subwf	0x26, 0, 0x1       	SUBWF	(_hours + 1), W, B
002726   e103     bnz	0x272e               	BNZ	_00149_DS_
002728   0e18     movlw	0x18               	MOVLW	0x18
00272a   010e     movlb	0xe                	BANKSEL	_hours
00272c   5d25     subwf	0x25, 0, 0x1       	SUBWF	_hours, W, B
                                           _00149_DS_:
00272e   e304     bnc	0x2738               	BNC	_00141_DS_
002730   010e     movlb	0xe                	BANKSEL	_hours
                                           ;	.line	165; test.c	hours = 0;
002732   6b25     clrf	0x25, 0x1           	CLRF	_hours, B
002734   010e     movlb	0xe                	BANKSEL	(_hours + 1)
002736   6b26     clrf	0x26, 0x1           	CLRF	(_hours + 1), B
                                           _00141_DS_:
002738   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00273a   ffd9
00273c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__ConfigLed	code
                                           _ConfigLed:
                                           ;	.line	140; test.c	void ConfigLed(){
002950   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002952   ffe5
002954   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002956   ffd9
                                           ;	.line	142; test.c	LED0_TRIS = 0;
002958   909a     bcf	0x9a, 0, 0           	BCF	_TRISJbits, 0
                                           ;	.line	143; test.c	LED1_TRIS = 0;
00295a   929a     bcf	0x9a, 0x1, 0         	BCF	_TRISJbits, 1
                                           ;	.line	144; test.c	LED2_TRIS = 0;
00295c   949a     bcf	0x9a, 0x2, 0         	BCF	_TRISJbits, 2
                                           ;	.line	146; test.c	LED0_IO = 0;
00295e   9091     bcf	0x91, 0, 0           	BCF	_LATJbits, 0
                                           ;	.line	147; test.c	LED1_IO = 0;
002960   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	148; test.c	LED2_IO = 0;
002962   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
002964   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002966   ffd9
002968   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__ConfigButtons	code
                                           _ConfigButtons:
                                           ;	.line	128; test.c	void ConfigButtons(){
00296a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00296c   ffe5
00296e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002970   ffd9
                                           ;	.line	131; test.c	INTCON2bits.INTEDG1 = 0; // Interrupt on falling edge
002972   9af1     bcf	0xf1, 0x5, 0         	BCF	_INTCON2bits, 5
                                           ;	.line	132; test.c	INTCON2bits.INTEDG3 = 0; // Interrupt on falling edge
002974   96f1     bcf	0xf1, 0x3, 0         	BCF	_INTCON2bits, 3
                                           ;	.line	133; test.c	INTCON3bits.INT3F = 0; // clear flag
002976   94f0     bcf	0xf0, 0x2, 0         	BCF	_INTCON3bits, 2
                                           ;	.line	134; test.c	INTCON3bits.INT1F = 0; // clear flag	
002978   90f0     bcf	0xf0, 0, 0           	BCF	_INTCON3bits, 0
                                           ;	.line	135; test.c	INTCON3bits.INT1E = 1; // Up button interrupt enable
00297a   86f0     bsf	0xf0, 0x3, 0         	BSF	_INTCON3bits, 3
                                           ;	.line	136; test.c	INTCON3bits.INT3E = 1; // Down button interrupt enable
00297c   8af0     bsf	0xf0, 0x5, 0         	BSF	_INTCON3bits, 5
00297e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002980   ffd9
002982   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__ConfigTimer0	code
                                           _ConfigTimer0:
                                           ;	.line	96; test.c	void ConfigTimer0(void){
001cce   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001cd0   ffe5
001cd2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001cd4   ffd9
                                           ;	.line	98; test.c	INTCON2bits.TMR0IP = 1; // Priorité Haute
001cd6   84f1     bsf	0xf1, 0x2, 0         	BSF	_INTCON2bits, 2
                                           ;	.line	99; test.c	INTCONbits.TMR0IE = 1;	// Activation interruption Timer 0
001cd8   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
                                           ;	.line	100; test.c	INTCONbits.TMR0IF = 0; // clear timer0 flag
001cda   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           ;	.line	104; test.c	T0CONbits.T08BIT = 0;		
001cdc   9cd5     bcf	0xd5, 0x6, 0         	BCF	_T0CONbits, 6
                                           ;	.line	106; test.c	T0CONbits.T0CS = 0;	
001cde   9ad5     bcf	0xd5, 0x5, 0         	BCF	_T0CONbits, 5
                                           ;	.line	112; test.c	T0CONbits.PSA = 0;
001ce0   96d5     bcf	0xd5, 0x3, 0         	BCF	_T0CONbits, 3
                                           ;	.line	113; test.c	T0CONbits.T0PS0 = 1; // diviseur par 256 
001ce2   80d5     bsf	0xd5, 0, 0           	BSF	_T0CONbits, 0
                                           ;	.line	114; test.c	T0CONbits.T0PS1 = 1;
001ce4   82d5     bsf	0xd5, 0x1, 0         	BSF	_T0CONbits, 1
                                           ;	.line	115; test.c	T0CONbits.T0PS2 = 1;
001ce6   84d5     bsf	0xd5, 0x2, 0         	BSF	_T0CONbits, 2
                                           ;	.line	117; test.c	TMR0H = 0xA0;
001ce8   0ea0     movlw	0xa0               	MOVLW	0xa0
001cea   6ed7     movwf	0xd7, 0            	MOVWF	_TMR0H
                                           ;	.line	118; test.c	TMR0L = 0xA2;
001cec   0ea2     movlw	0xa2               	MOVLW	0xa2
001cee   6ed6     movwf	0xd6, 0            	MOVWF	_TMR0L
                                           ;	.line	120; test.c	T0CONbits.TMR0ON = 1;
001cf0   8ed5     bsf	0xd5, 0x7, 0         	BSF	_T0CONbits, 7
001cf2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001cf4   ffd9
001cf6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
001cf8   4e4f     dcfsnz	0x4f, 0x1, 0      	DB	0x4f, 0x4e, 0x20, 0x00
001cfa   0020     dw	0x20  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_1:
001cfc   464f     rlncf	0x4f, 0x1, 0       	DB	0x4f, 0x46, 0x46, 0x00
001cfe   0046     dw	0x46  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_2:
001d00   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x73, 0x3a, 0x25, 0x73, 0x3a, 0x25, 0x73
001d02   2020     addwfc	0x20, 0, 0        
001d04   7325     btg	0x25, 0x1, 0x1       
001d06   253a     addwf	0x3a, 0, 0x1       
001d08   3a73     swapf	0x73, 0x1, 0       
001d0a   7325     btg	0x25, 0x1, 0x1       
001d0c   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x25, 0x73
001d0e   2020     addwfc	0x20, 0, 0        
001d10   6c41     negf	0x41, 0             
001d12   7261     btg	0x61, 0x1, 0         
001d14   206d     addwfc	0x6d, 0, 0        
001d16   7325     btg	0x25, 0x1, 0x1       
001d18   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_3:
001d1a   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x4d, 0x45, 0x4e, 0x55, 0x20, 0x20
001d1c   2020     addwfc	0x20, 0, 0        
001d1e   2020     addwfc	0x20, 0, 0        
001d20   454d     rlncf	0x4d, 0, 0x1       
001d22   554e     subfwb	0x4e, 0, 0x1      
001d24   2020     addwfc	0x20, 0, 0        
001d26   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x53, 0x65, 0x74, 0x20, 0x74, 0x69
001d28   2020     addwfc	0x20, 0, 0        
001d2a   2020     addwfc	0x20, 0, 0        
001d2c   6553     cpfsgt	0x53, 0x1         
001d2e   2074     addwfc	0x74, 0, 0        
001d30   6974     setf	0x74, 0x1           
001d32   656d     cpfsgt	0x6d, 0x1         	DB	0x6d, 0x65, 0x20, 0x3f, 0x00
001d34   3f20     incfsz	0x20, 0x1, 0x1    
001d36   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_4:
001d38   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x20, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x20
001d3a   2074     addwfc	0x74, 0, 0        
001d3c   694d     setf	0x4d, 0x1           
001d3e   756e     btg	0x6e, 0x2, 0x1       
001d40   6574     cpfsgt	0x74, 0x1         
001d42   2073     addwfc	0x73, 0, 0        
001d44   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x73, 0x3a, 0x5b, 0x25, 0x73, 0x5d, 0x3a
001d46   2020     addwfc	0x20, 0, 0        
001d48   7325     btg	0x25, 0x1, 0x1       
001d4a   5b3a     subwfb	0x3a, 0x1, 0x1    
001d4c   7325     btg	0x25, 0x1, 0x1       
001d4e   3a5d     swapf	0x5d, 0x1, 0       
001d50   7325     btg	0x25, 0x1, 0x1       	DB	0x25, 0x73, 0x00
001d52   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_5:
001d54   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x20, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x20, 0x20, 0x20
001d56   2074     addwfc	0x74, 0, 0        
001d58   6f48     movwf	0x48, 0x1          
001d5a   7275     btg	0x75, 0x1, 0         
001d5c   2073     addwfc	0x73, 0, 0        
001d5e   2020     addwfc	0x20, 0, 0        
001d60   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x5b, 0x25, 0x73, 0x5d, 0x3a, 0x25, 0x73, 0x3a
001d62   2020     addwfc	0x20, 0, 0        
001d64   255b     addwf	0x5b, 0, 0x1       
001d66   5d73     subwf	0x73, 0, 0x1       
001d68   253a     addwf	0x3a, 0, 0x1       
001d6a   3a73     swapf	0x73, 0x1, 0       
001d6c   7325     btg	0x25, 0x1, 0x1       	DB	0x25, 0x73, 0x00
001d6e   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_6:
001d70   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x4d, 0x45, 0x4e, 0x55, 0x20, 0x20
001d72   2020     addwfc	0x20, 0, 0        
001d74   2020     addwfc	0x20, 0, 0        
001d76   454d     rlncf	0x4d, 0, 0x1       
001d78   554e     subfwb	0x4e, 0, 0x1      
001d7a   2020     addwfc	0x20, 0, 0        
001d7c   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x53, 0x65, 0x74, 0x20, 0x41, 0x6c, 0x61, 0x72
001d7e   2020     addwfc	0x20, 0, 0        
001d80   6553     cpfsgt	0x53, 0x1         
001d82   2074     addwfc	0x74, 0, 0        
001d84   6c41     negf	0x41, 0             
001d86   7261     btg	0x61, 0x1, 0         
001d88   636d     cpfseq	0x6d, 0x1         	DB	0x6d, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x3f, 0x00
001d8a   6f6c     movwf	0x6c, 0x1          
001d8c   6b63     clrf	0x63, 0x1           
001d8e   003f     dw	0x3f  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_7:
001d90   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x4d, 0x69
001d92   2074     addwfc	0x74, 0, 0        
001d94   6c41     negf	0x41, 0             
001d96   7261     btg	0x61, 0x1, 0         
001d98   206d     addwfc	0x6d, 0, 0        
001d9a   694d     setf	0x4d, 0x1           
001d9c   206e     addwfc	0x6e, 0, 0        	DB	0x6e, 0x20, 0x20, 0x20, 0x20, 0x25, 0x73, 0x3a, 0x5b, 0x25, 0x73, 0x5d
001d9e   2020     addwfc	0x20, 0, 0        
001da0   2520     addwf	0x20, 0, 0x1       
001da2   3a73     swapf	0x73, 0x1, 0       
001da4   255b     addwf	0x5b, 0, 0x1       
001da6   5d73     subwf	0x73, 0, 0x1       
001da8   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_8:
001daa   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x48, 0x6f
001dac   2074     addwfc	0x74, 0, 0        
001dae   6c41     negf	0x41, 0             
001db0   7261     btg	0x61, 0x1, 0         
001db2   206d     addwfc	0x6d, 0, 0        
001db4   6f48     movwf	0x48, 0x1          
001db6   7275     btg	0x75, 0x1, 0         	DB	0x75, 0x72, 0x73, 0x20, 0x20, 0x5b, 0x25, 0x73, 0x5d, 0x3a, 0x25, 0x73
001db8   2073     addwfc	0x73, 0, 0        
001dba   5b20     subwfb	0x20, 0x1, 0x1    
001dbc   7325     btg	0x25, 0x1, 0x1       
001dbe   3a5d     swapf	0x5d, 0x1, 0       
001dc0   7325     btg	0x25, 0x1, 0x1       
001dc2   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_9:
001dc4   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x49, 0x74, 0x27, 0x73, 0x20, 0x54, 0x69, 0x6d, 0x65
001dc6   4920     infsnz	0x20, 0, 0x1      
001dc8   2774     addwf	0x74, 0x1, 0x1     
001dca   2073     addwfc	0x73, 0, 0        
001dcc   6954     setf	0x54, 0x1           
001dce   656d     cpfsgt	0x6d, 0x1         
001dd0   2120     addwfc	0x20, 0, 0x1      	DB	0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x73, 0x3a, 0x25
001dd2   2020     addwfc	0x20, 0, 0        
001dd4   2020     addwfc	0x20, 0, 0        
001dd6   2020     addwfc	0x20, 0, 0        
001dd8   7325     btg	0x25, 0x1, 0x1       
001dda   253a     addwf	0x3a, 0, 0x1       
001ddc   3a73     swapf	0x73, 0x1, 0       	DB	0x73, 0x3a, 0x25, 0x73, 0x00
001dde   7325     btg	0x25, 0x1, 0x1       
001de0   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_10:
001de2   2530     addwf	0x30, 0, 0x1       	DB	0x30, 0x25, 0x75, 0x00, 0x00
001de4   0075     dw	0x75  ;unknown opcode 
001de6   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_11:
001de8   7525     btg	0x25, 0x2, 0x1       	DB	0x25, 0x75, 0x00, 0x00
001dea   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 4364 (0x110c) bytes ( 3.33%)
                                           ;           	 2182 (0x0886) words
                                           ; udata size:	   64 (0x0040) bytes ( 1.67%)
                                           ; access size:	   22 (0x0016) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Mar 19 2013) (UNIX)
                                           ; This file was generated Wed Mar 20 12:40:25 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDInit
                                           	global _LCDUpdate
                                           	global _LCDErase
                                           	global _LCDText
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           
                                           udata_LCDBlocking_0	udata
                                           _LCDText	res	33
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDErase	code
                                           _LCDErase:
                                           ;	.line	392; TCPIP_Stack/LCDBlocking.c	void LCDErase(void)
00240a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00240c   ffe5
00240e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002410   ffd9
002412   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002414   ffe5
002416   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002418   ffe5
00241a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00241c   ffe5
00241e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002420   ffe5
002422   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002424   ffe5
002426   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002428   ffe5
00242a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00242c   ffe5
00242e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002430   ffe5
                                           ;	.line	395; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);
002432   0e01     movlw	0x1                	MOVLW	0x01
002434   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002436   0e00     movlw	0                  	MOVLW	0x00
002438   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00243a   ec9f     call	0x273e, 0           	CALL	_LCDWrite
00243c   f013
00243e   0e02     movlw	0x2                	MOVLW	0x02
002440   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	396; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
002442   0e48     movlw	0x48               	MOVLW	0x48
002444   6e00     movwf	0, 0               	MOVWF	r0x00
002446   0e0d     movlw	0xd                	MOVLW	0x0d
002448   6e01     movwf	0x1, 0             	MOVWF	r0x01
00244a   6a02     clrf	0x2, 0              	CLRF	r0x02
00244c   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00305_DS_:
00244e   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
002450   f004
002452   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
002454   f005
002456   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
002458   f006
00245a   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00245c   f007
00245e   0eff     movlw	0xff               	MOVLW	0xff
002460   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002462   0eff     movlw	0xff               	MOVLW	0xff
002464   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002466   0eff     movlw	0xff               	MOVLW	0xff
002468   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00246a   0eff     movlw	0xff               	MOVLW	0xff
00246c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00246e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002470   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
002472   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
002474   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002476   e1eb     bnz	0x244e               	BNZ	_00305_DS_
                                           ;	.line	399; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', 32);
002478   0e00     movlw	0                  	MOVLW	0x00
00247a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00247c   0e20     movlw	0x20               	MOVLW	0x20
00247e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002480   0e20     movlw	0x20               	MOVLW	0x20
002482   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002484   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
002486   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002488   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
00248a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00248c   ece2     call	0x21c4, 0           	CALL	_memset
00248e   f010
002490   0e05     movlw	0x5                	MOVLW	0x05
002492   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002494   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002496   f007
002498   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00249a   f006
00249c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00249e   f005
0024a0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0024a2   f004
0024a4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0024a6   f003
0024a8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0024aa   f002
0024ac   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0024ae   f001
0024b0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0024b2   f000
0024b4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0024b6   ffd9
0024b8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDUpdate	code
                                           _LCDUpdate:
                                           ;	.line	332; TCPIP_Stack/LCDBlocking.c	void LCDUpdate(void)
000fd6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000fd8   ffe5
000fda   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000fdc   ffd9
000fde   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000fe0   ffe5
000fe2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000fe4   ffe5
000fe6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000fe8   ffe5
000fea   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000fec   ffe5
000fee   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000ff0   ffe5
000ff2   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000ff4   ffe5
000ff6   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000ff8   ffe5
000ffa   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000ffc   ffe5
000ffe   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001000   ffe5
                                           ;	.line	337; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x02);
001002   0e02     movlw	0x2                	MOVLW	0x02
001004   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001006   0e00     movlw	0                  	MOVLW	0x00
001008   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00100a   ec9f     call	0x273e, 0           	CALL	_LCDWrite
00100c   f013
00100e   0e02     movlw	0x2                	MOVLW	0x02
001010   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	338; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
001012   0e48     movlw	0x48               	MOVLW	0x48
001014   6e00     movwf	0, 0               	MOVWF	r0x00
001016   0e0d     movlw	0xd                	MOVLW	0x0d
001018   6e01     movwf	0x1, 0             	MOVWF	r0x01
00101a   6a02     clrf	0x2, 0              	CLRF	r0x02
00101c   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00225_DS_:
00101e   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
001020   f004
001022   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001024   f005
001026   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001028   f006
00102a   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00102c   f007
00102e   0eff     movlw	0xff               	MOVLW	0xff
001030   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001032   0eff     movlw	0xff               	MOVLW	0xff
001034   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001036   0eff     movlw	0xff               	MOVLW	0xff
001038   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00103a   0eff     movlw	0xff               	MOVLW	0xff
00103c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00103e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001040   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
001042   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
001044   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001046   e1eb     bnz	0x101e               	BNZ	_00225_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
001048   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00257_DS_:
00104a   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00104c   f001
00104e   6a02     clrf	0x2, 0              	CLRF	r0x02
001050   0e00     movlw	0                  	MOVLW	0x00
001052   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
001054   e102     bnz	0x105a               	BNZ	_00297_DS_
001056   0e10     movlw	0x10               	MOVLW	0x10
001058   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00297_DS_:
00105a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00105c   d057     bra	0x110c               	BRA	_00260_DS_
                                           ;	.line	345; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
00105e   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001060   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
001062   6e01     movwf	0x1, 0             	MOVWF	r0x01
001064   6a02     clrf	0x2, 0              	CLRF	r0x02
001066   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001068   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00106a   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
00106c   ffe9
00106e   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
001070   ffea
001072   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
001074   f001
001076   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001078   e119     bnz	0x10ac               	BNZ	_00232_DS_
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
00107a   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00107c   f001
                                           _00253_DS_:
00107e   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
001080   f002
001082   6a03     clrf	0x3, 0              	CLRF	r0x03
001084   0e00     movlw	0                  	MOVLW	0x00
001086   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
001088   e102     bnz	0x108e               	BNZ	_00298_DS_
00108a   0e10     movlw	0x10               	MOVLW	0x10
00108c   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00298_DS_:
00108e   e20e     bc	0x10ac                	BC	_00232_DS_
                                           ;	.line	349; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
001090   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001092   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
001094   6e02     movwf	0x2, 0             	MOVWF	r0x02
001096   6a03     clrf	0x3, 0              	CLRF	r0x03
001098   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
00109a   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00109c   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
00109e   ffe9
0010a0   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
0010a2   ffea
0010a4   0e20     movlw	0x20               	MOVLW	0x20
0010a6   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
0010a8   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0010aa   d7e9     bra	0x107e               	BRA	_00253_DS_
                                           _00232_DS_:
                                           ;	.line	352; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
0010ac   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0010ae   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0010b0   6e01     movwf	0x1, 0             	MOVWF	r0x01
0010b2   6a02     clrf	0x2, 0              	CLRF	r0x02
0010b4   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0010b6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0010b8   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0010ba   ffe9
0010bc   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0010be   ffea
0010c0   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0010c2   f001
0010c4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0010c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010c8   0e01     movlw	0x1                	MOVLW	0x01
0010ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010cc   ec9f     call	0x273e, 0           	CALL	_LCDWrite
0010ce   f013
0010d0   0e02     movlw	0x2                	MOVLW	0x02
0010d2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	353; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0010d4   0e55     movlw	0x55               	MOVLW	0x55
0010d6   6e01     movwf	0x1, 0             	MOVWF	r0x01
0010d8   6a02     clrf	0x2, 0              	CLRF	r0x02
0010da   6a03     clrf	0x3, 0              	CLRF	r0x03
0010dc   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00233_DS_:
0010de   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0010e0   f005
0010e2   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0010e4   f006
0010e6   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0010e8   f007
0010ea   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
0010ec   f008
0010ee   0eff     movlw	0xff               	MOVLW	0xff
0010f0   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
0010f2   0eff     movlw	0xff               	MOVLW	0xff
0010f4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0010f6   0eff     movlw	0xff               	MOVLW	0xff
0010f8   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0010fa   0eff     movlw	0xff               	MOVLW	0xff
0010fc   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
0010fe   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001100   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
001102   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001104   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
001106   e1eb     bnz	0x10de               	BNZ	_00233_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
001108   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00110a   d79f     bra	0x104a               	BRA	_00257_DS_
                                           _00260_DS_:
                                           ;	.line	357; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0xC0);
00110c   0ec0     movlw	0xc0               	MOVLW	0xc0
00110e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001110   0e00     movlw	0                  	MOVLW	0x00
001112   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001114   ec9f     call	0x273e, 0           	CALL	_LCDWrite
001116   f013
001118   0e02     movlw	0x2                	MOVLW	0x02
00111a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	358; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
00111c   0e55     movlw	0x55               	MOVLW	0x55
00111e   6e00     movwf	0, 0               	MOVWF	r0x00
001120   6a01     clrf	0x1, 0              	CLRF	r0x01
001122   6a02     clrf	0x2, 0              	CLRF	r0x02
001124   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00239_DS_:
001126   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
001128   f004
00112a   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00112c   f005
00112e   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001130   f006
001132   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001134   f007
001136   0eff     movlw	0xff               	MOVLW	0xff
001138   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00113a   0eff     movlw	0xff               	MOVLW	0xff
00113c   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00113e   0eff     movlw	0xff               	MOVLW	0xff
001140   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001142   0eff     movlw	0xff               	MOVLW	0xff
001144   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001146   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001148   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
00114a   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00114c   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00114e   e1eb     bnz	0x1126               	BNZ	_00239_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
001150   0e10     movlw	0x10               	MOVLW	0x10
001152   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00265_DS_:
001154   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
001156   f001
001158   6a02     clrf	0x2, 0              	CLRF	r0x02
00115a   0e00     movlw	0                  	MOVLW	0x00
00115c   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
00115e   e102     bnz	0x1164               	BNZ	_00299_DS_
001160   0e20     movlw	0x20               	MOVLW	0x20
001162   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00299_DS_:
001164   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001166   d057     bra	0x1216               	BRA	_00269_DS_
                                           ;	.line	365; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
001168   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
00116a   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00116c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00116e   6a02     clrf	0x2, 0              	CLRF	r0x02
001170   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001172   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001174   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
001176   ffe9
001178   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
00117a   ffea
00117c   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
00117e   f001
001180   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001182   e119     bnz	0x11b6               	BNZ	_00246_DS_
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
001184   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
001186   f001
                                           _00261_DS_:
001188   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
00118a   f002
00118c   6a03     clrf	0x3, 0              	CLRF	r0x03
00118e   0e00     movlw	0                  	MOVLW	0x00
001190   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
001192   e102     bnz	0x1198               	BNZ	_00300_DS_
001194   0e20     movlw	0x20               	MOVLW	0x20
001196   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00300_DS_:
001198   e20e     bc	0x11b6                	BC	_00246_DS_
                                           ;	.line	369; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
00119a   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
00119c   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
00119e   6e02     movwf	0x2, 0             	MOVWF	r0x02
0011a0   6a03     clrf	0x3, 0              	CLRF	r0x03
0011a2   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0011a4   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0011a6   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
0011a8   ffe9
0011aa   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
0011ac   ffea
0011ae   0e20     movlw	0x20               	MOVLW	0x20
0011b0   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
0011b2   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0011b4   d7e9     bra	0x1188               	BRA	_00261_DS_
                                           _00246_DS_:
                                           ;	.line	372; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
0011b6   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0011b8   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0011ba   6e01     movwf	0x1, 0             	MOVWF	r0x01
0011bc   6a02     clrf	0x2, 0              	CLRF	r0x02
0011be   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0011c0   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0011c2   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0011c4   ffe9
0011c6   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0011c8   ffea
0011ca   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0011cc   f001
0011ce   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0011d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011d2   0e01     movlw	0x1                	MOVLW	0x01
0011d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011d6   ec9f     call	0x273e, 0           	CALL	_LCDWrite
0011d8   f013
0011da   0e02     movlw	0x2                	MOVLW	0x02
0011dc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	373; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0011de   0e55     movlw	0x55               	MOVLW	0x55
0011e0   6e01     movwf	0x1, 0             	MOVWF	r0x01
0011e2   6a02     clrf	0x2, 0              	CLRF	r0x02
0011e4   6a03     clrf	0x3, 0              	CLRF	r0x03
0011e6   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00247_DS_:
0011e8   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0011ea   f005
0011ec   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0011ee   f006
0011f0   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0011f2   f007
0011f4   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
0011f6   f008
0011f8   0eff     movlw	0xff               	MOVLW	0xff
0011fa   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
0011fc   0eff     movlw	0xff               	MOVLW	0xff
0011fe   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001200   0eff     movlw	0xff               	MOVLW	0xff
001202   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001204   0eff     movlw	0xff               	MOVLW	0xff
001206   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
001208   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00120a   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00120c   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00120e   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
001210   e1eb     bnz	0x11e8               	BNZ	_00247_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
001212   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001214   d79f     bra	0x1154               	BRA	_00265_DS_
                                           _00269_DS_:
001216   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001218   f008
00121a   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00121c   f007
00121e   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001220   f006
001222   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001224   f005
001226   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001228   f004
00122a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00122c   f003
00122e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001230   f002
001232   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001234   f001
001236   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001238   f000
00123a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00123c   ffd9
00123e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDInit	code
                                           _LCDInit:
                                           ;	.line	207; TCPIP_Stack/LCDBlocking.c	void LCDInit(void)
001240   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001242   ffe5
001244   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001246   ffd9
001248   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00124a   ffe5
00124c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00124e   ffe5
001250   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001252   ffe5
001254   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001256   ffe5
001258   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00125a   ffe5
00125c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00125e   ffe5
001260   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001262   ffe5
001264   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001266   ffe5
001268   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00126a   ffe5
                                           ;	.line	211; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', sizeof(LCDText)-1);
00126c   0e00     movlw	0                  	MOVLW	0x00
00126e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001270   0e20     movlw	0x20               	MOVLW	0x20
001272   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001274   0e20     movlw	0x20               	MOVLW	0x20
001276   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001278   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
00127a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00127c   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
00127e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001280   ece2     call	0x21c4, 0           	CALL	_memset
001282   f010
001284   0e05     movlw	0x5                	MOVLW	0x05
001286   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001288   010f     movlb	0xf                	BANKSEL	(_LCDText + 32)
                                           ;	.line	212; TCPIP_Stack/LCDBlocking.c	LCDText[sizeof(LCDText)-1] = 0;
00128a   6b20     clrf	0x20, 0x1           	CLRF	(_LCDText + 32), B
                                           ;	.line	215; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
00128c   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	216; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
00128e   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	220; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
001290   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	233; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
001292   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	234; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
001294   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	235; TCPIP_Stack/LCDBlocking.c	LCD_E_TRIS = 0;
001296   9099     bcf	0x99, 0, 0           	BCF	_TRISHbits, 0
                                           ;	.line	239; TCPIP_Stack/LCDBlocking.c	DelayMs(40);
001298   0ea0     movlw	0xa0               	MOVLW	0xa0
00129a   6e00     movwf	0, 0               	MOVWF	r0x00
00129c   0e09     movlw	0x9                	MOVLW	0x09
00129e   6e01     movwf	0x1, 0             	MOVWF	r0x01
0012a0   0e01     movlw	0x1                	MOVLW	0x01
0012a2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0012a4   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00143_DS_:
0012a6   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0012a8   f004
0012aa   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0012ac   f005
0012ae   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0012b0   f006
0012b2   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0012b4   f007
0012b6   0eff     movlw	0xff               	MOVLW	0xff
0012b8   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0012ba   0eff     movlw	0xff               	MOVLW	0xff
0012bc   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0012be   0eff     movlw	0xff               	MOVLW	0xff
0012c0   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0012c2   0eff     movlw	0xff               	MOVLW	0xff
0012c4   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0012c6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0012c8   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0012ca   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0012cc   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0012ce   e1eb     bnz	0x12a6               	BNZ	_00143_DS_
                                           ;	.line	247; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = 0;
0012d0   9490     bcf	0x90, 0x2, 0         	BCF	_LATHbits, 2
                                           ;	.line	249; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = 0x03;
0012d2   0e03     movlw	0x3                	MOVLW	0x03
0012d4   6e8d     movwf	0x8d, 0            	MOVWF	_LATE
0012d6   0000     nop                      	nop 
0012d8   0000     nop                      	nop 
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
0012da   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00191_DS_:
0012dc   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0012de   f001
0012e0   6a02     clrf	0x2, 0              	CLRF	r0x02
0012e2   0e00     movlw	0                  	MOVLW	0x00
0012e4   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0012e6   e102     bnz	0x12ec               	BNZ	_00220_DS_
0012e8   0e03     movlw	0x3                	MOVLW	0x03
0012ea   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00220_DS_:
0012ec   e239     bc	0x1360                	BC	_00194_DS_
                                           ;	.line	266; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
0012ee   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
                                           ;	.line	267; TCPIP_Stack/LCDBlocking.c	Delay10us(1);	       	// Wait E Pulse width time (min 230ns)
0012f0   0e11     movlw	0x11               	MOVLW	0x11
0012f2   6e01     movwf	0x1, 0             	MOVWF	r0x01
0012f4   6a02     clrf	0x2, 0              	CLRF	r0x02
0012f6   6a03     clrf	0x3, 0              	CLRF	r0x03
0012f8   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00155_DS_:
0012fa   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0012fc   f005
0012fe   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001300   f006
001302   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001304   f007
001306   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
001308   f008
00130a   0eff     movlw	0xff               	MOVLW	0xff
00130c   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00130e   0eff     movlw	0xff               	MOVLW	0xff
001310   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001312   0eff     movlw	0xff               	MOVLW	0xff
001314   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001316   0eff     movlw	0xff               	MOVLW	0xff
001318   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
00131a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00131c   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00131e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001320   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
001322   e1eb     bnz	0x12fa               	BNZ	_00155_DS_
                                           ;	.line	268; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
001324   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	269; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
001326   0e48     movlw	0x48               	MOVLW	0x48
001328   6e01     movwf	0x1, 0             	MOVWF	r0x01
00132a   0e0d     movlw	0xd                	MOVLW	0x0d
00132c   6e02     movwf	0x2, 0             	MOVWF	r0x02
00132e   6a03     clrf	0x3, 0              	CLRF	r0x03
001330   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00161_DS_:
001332   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001334   f005
001336   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001338   f006
00133a   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00133c   f007
00133e   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
001340   f008
001342   0eff     movlw	0xff               	MOVLW	0xff
001344   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
001346   0eff     movlw	0xff               	MOVLW	0xff
001348   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00134a   0eff     movlw	0xff               	MOVLW	0xff
00134c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00134e   0eff     movlw	0xff               	MOVLW	0xff
001350   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
001352   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001354   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
001356   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001358   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
00135a   e1eb     bnz	0x1332               	BNZ	_00161_DS_
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
00135c   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00135e   d7be     bra	0x12dc               	BRA	_00191_DS_
                                           _00194_DS_:
                                           ;	.line	295; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x38);
001360   0e38     movlw	0x38               	MOVLW	0x38
001362   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001364   0e00     movlw	0                  	MOVLW	0x00
001366   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001368   ec9f     call	0x273e, 0           	CALL	_LCDWrite
00136a   f013
00136c   0e02     movlw	0x2                	MOVLW	0x02
00136e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	297; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
001370   0e55     movlw	0x55               	MOVLW	0x55
001372   6e00     movwf	0, 0               	MOVWF	r0x00
001374   6a01     clrf	0x1, 0              	CLRF	r0x01
001376   6a02     clrf	0x2, 0              	CLRF	r0x02
001378   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00167_DS_:
00137a   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00137c   f004
00137e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001380   f005
001382   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001384   f006
001386   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001388   f007
00138a   0eff     movlw	0xff               	MOVLW	0xff
00138c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00138e   0eff     movlw	0xff               	MOVLW	0xff
001390   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001392   0eff     movlw	0xff               	MOVLW	0xff
001394   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001396   0eff     movlw	0xff               	MOVLW	0xff
001398   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00139a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00139c   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
00139e   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0013a0   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0013a2   e1eb     bnz	0x137a               	BNZ	_00167_DS_
                                           ;	.line	300; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x06);	// Increment after each write, do not shift
0013a4   0e06     movlw	0x6                	MOVLW	0x06
0013a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013a8   0e00     movlw	0                  	MOVLW	0x00
0013aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013ac   ec9f     call	0x273e, 0           	CALL	_LCDWrite
0013ae   f013
0013b0   0e02     movlw	0x2                	MOVLW	0x02
0013b2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	301; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0013b4   0e55     movlw	0x55               	MOVLW	0x55
0013b6   6e00     movwf	0, 0               	MOVWF	r0x00
0013b8   6a01     clrf	0x1, 0              	CLRF	r0x01
0013ba   6a02     clrf	0x2, 0              	CLRF	r0x02
0013bc   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00173_DS_:
0013be   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0013c0   f004
0013c2   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0013c4   f005
0013c6   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0013c8   f006
0013ca   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0013cc   f007
0013ce   0eff     movlw	0xff               	MOVLW	0xff
0013d0   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0013d2   0eff     movlw	0xff               	MOVLW	0xff
0013d4   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0013d6   0eff     movlw	0xff               	MOVLW	0xff
0013d8   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0013da   0eff     movlw	0xff               	MOVLW	0xff
0013dc   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0013de   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0013e0   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0013e2   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0013e4   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0013e6   e1eb     bnz	0x13be               	BNZ	_00173_DS_
                                           ;	.line	304; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x0C);	// Turn display on, no cusor, no cursor blink
0013e8   0e0c     movlw	0xc                	MOVLW	0x0c
0013ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013ec   0e00     movlw	0                  	MOVLW	0x00
0013ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013f0   ec9f     call	0x273e, 0           	CALL	_LCDWrite
0013f2   f013
0013f4   0e02     movlw	0x2                	MOVLW	0x02
0013f6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	305; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0013f8   0e55     movlw	0x55               	MOVLW	0x55
0013fa   6e00     movwf	0, 0               	MOVWF	r0x00
0013fc   6a01     clrf	0x1, 0              	CLRF	r0x01
0013fe   6a02     clrf	0x2, 0              	CLRF	r0x02
001400   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00179_DS_:
001402   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
001404   f004
001406   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001408   f005
00140a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00140c   f006
00140e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001410   f007
001412   0eff     movlw	0xff               	MOVLW	0xff
001414   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001416   0eff     movlw	0xff               	MOVLW	0xff
001418   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00141a   0eff     movlw	0xff               	MOVLW	0xff
00141c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00141e   0eff     movlw	0xff               	MOVLW	0xff
001420   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001422   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001424   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
001426   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
001428   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00142a   e1eb     bnz	0x1402               	BNZ	_00179_DS_
                                           ;	.line	308; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);	
00142c   0e01     movlw	0x1                	MOVLW	0x01
00142e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001430   0e00     movlw	0                  	MOVLW	0x00
001432   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001434   ec9f     call	0x273e, 0           	CALL	_LCDWrite
001436   f013
001438   0e02     movlw	0x2                	MOVLW	0x02
00143a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	309; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
00143c   0e48     movlw	0x48               	MOVLW	0x48
00143e   6e00     movwf	0, 0               	MOVWF	r0x00
001440   0e0d     movlw	0xd                	MOVLW	0x0d
001442   6e01     movwf	0x1, 0             	MOVWF	r0x01
001444   6a02     clrf	0x2, 0              	CLRF	r0x02
001446   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00185_DS_:
001448   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00144a   f004
00144c   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00144e   f005
001450   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001452   f006
001454   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001456   f007
001458   0eff     movlw	0xff               	MOVLW	0xff
00145a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00145c   0eff     movlw	0xff               	MOVLW	0xff
00145e   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001460   0eff     movlw	0xff               	MOVLW	0xff
001462   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001464   0eff     movlw	0xff               	MOVLW	0xff
001466   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001468   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00146a   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
00146c   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00146e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001470   e1eb     bnz	0x1448               	BNZ	_00185_DS_
001472   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001474   f008
001476   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001478   f007
00147a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00147c   f006
00147e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001480   f005
001482   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001484   f004
001486   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001488   f003
00148a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00148c   f002
00148e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001490   f001
001492   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001494   f000
001496   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001498   ffd9
00149a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDWrite	code
                                           _LCDWrite:
                                           ;	.line	94; TCPIP_Stack/LCDBlocking.c	static void LCDWrite(BYTE RS, BYTE Data)
00273e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002740   ffe5
002742   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002744   ffd9
002746   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002748   ffe5
00274a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00274c   ffe5
00274e   0e02     movlw	0x2                	MOVLW	0x02
002750   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002752   f000
002754   0e03     movlw	0x3                	MOVLW	0x03
002756   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002758   f001
                                           ;	.line	97; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
00275a   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	110; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
00275c   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	111; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
00275e   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	112; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
002760   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	113; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = RS;
002762   5000     movf	0, 0, 0             	MOVF	r0x00, W
002764   0b01     andlw	0x1                	ANDLW	0x01
002766   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
002768   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
00276a   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
00276c   5090     movf	0x90, 0, 0          	MOVF	_LATHbits, W
00276e   0bfb     andlw	0xfb               	ANDLW	0xfb
002770   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
002772   6e90     movwf	0x90, 0            	MOVWF	_LATHbits
                                           ;	.line	140; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = Data;
002774   c001     movff	0x1, 0xf8d         	MOVFF	r0x01, _LATE
002776   ff8d
002778   0000     nop                      	nop 
00277a   0000     nop                      	nop 
                                           ;	.line	155; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
00277c   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
00277e   0000     nop                      	nop 
002780   0000     nop                      	nop 
002782   0000     nop                      	nop 
002784   0000     nop                      	nop 
002786   0000     nop                      	nop 
002788   0000     nop                      	nop 
00278a   0000     nop                      	nop 
00278c   0000     nop                      	nop 
00278e   0000     nop                      	nop 
                                           ;	.line	165; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
002790   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
002792   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002794   f001
002796   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002798   f000
00279a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00279c   ffd9
00279e   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   33 (0x0021) bytes ( 0.86%)
                                           ; access size:	    9 (0x0009) bytes
                                           
                                           
                                           	end
