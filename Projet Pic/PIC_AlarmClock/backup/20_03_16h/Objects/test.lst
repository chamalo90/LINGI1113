gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00001 ;--------------------------------------------------------
               00002 ; File Created by SDCC : free open source ANSI-C Compiler
               00003 ; Version 2.9.4 #5595 (Mar 19 2013) (UNIX)
               00004 ; This file was generated Wed Mar 20 14:40:48 2013
               00005 ;--------------------------------------------------------
               00006 ; PIC16 port for the Microchip 16-bit core micros
               00007 ;--------------------------------------------------------
               00008         list    p=18f97j60
               00009 
               00010         radix dec
               00011 
               00012 ;--------------------------------------------------------
               00013 ; public variables in this module
               00014 ;--------------------------------------------------------
               00015         global _ConfigTimer0
               00016         global _ConfigButtons
               00017         global _ConfigLed
               00018         global _UpdateTime
               00019         global _IsItTime
               00020         global _UpdateLCD
               00021         global _ledAlarm
               00022         global _ConvertTime
               00023         global _DisplayWORD
               00024         global _DisplayString
               00025         global _strlcpy
               00026         global _hours
               00027         global _minutes
               00028         global _seconds
               00029         global _alarmHours
               00030         global _alarmMinutes
               00031         global _stateMenu
               00032         global _alarmStatus
               00033         global _LCDPrint
               00034         global _h
               00035         global _m
               00036         global _s
               00037         global _alarmState
               00038         global _main
               00039         global _HighPriorityInterrupt
               00040         global _LowPriorityInterrupt
               00041 
               00042 ;--------------------------------------------------------
               00043 ; extern variables in this module
               00044 ;--------------------------------------------------------
               00045         extern __gptrget1
               00046         extern __gptrput1
               00047         extern _EBSTCONbits
               00048         extern _MISTATbits
               00049         extern _EFLOCONbits
               00050         extern _MACON1bits
               00051         extern _MACON2bits
               00052         extern _MACON3bits
               00053         extern _MACON4bits
               00054         extern _MACLCON1bits
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00055         extern _MACLCON2bits
               00056         extern _MICONbits
               00057         extern _MICMDbits
               00058         extern _EWOLIEbits
               00059         extern _EWOLIRbits
               00060         extern _ERXFCONbits
               00061         extern _EIEbits
               00062         extern _ESTATbits
               00063         extern _ECON2bits
               00064         extern _EIRbits
               00065         extern _EDATAbits
               00066         extern _SSP2CON2bits
               00067         extern _SSP2CON1bits
               00068         extern _SSP2STATbits
               00069         extern _ECCP2DELbits
               00070         extern _ECCP2ASbits
               00071         extern _ECCP3DELbits
               00072         extern _ECCP3ASbits
               00073         extern _RCSTA2bits
               00074         extern _TXSTA2bits
               00075         extern _CCP5CONbits
               00076         extern _CCP4CONbits
               00077         extern _T4CONbits
               00078         extern _ECCP1DELbits
               00079         extern _BAUDCON2bits
               00080         extern _BAUDCTL2bits
               00081         extern _BAUDCONbits
               00082         extern _BAUDCON1bits
               00083         extern _BAUDCTLbits
               00084         extern _BAUDCTL1bits
               00085         extern _PORTAbits
               00086         extern _PORTBbits
               00087         extern _PORTCbits
               00088         extern _PORTDbits
               00089         extern _PORTEbits
               00090         extern _PORTFbits
               00091         extern _PORTGbits
               00092         extern _PORTHbits
               00093         extern _PORTJbits
               00094         extern _LATAbits
               00095         extern _LATBbits
               00096         extern _LATCbits
               00097         extern _LATDbits
               00098         extern _LATEbits
               00099         extern _LATFbits
               00100         extern _LATGbits
               00101         extern _LATHbits
               00102         extern _LATJbits
               00103         extern _DDRAbits
               00104         extern _TRISAbits
               00105         extern _DDRBbits
               00106         extern _TRISBbits
               00107         extern _DDRCbits
               00108         extern _TRISCbits
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00109         extern _DDRDbits
               00110         extern _TRISDbits
               00111         extern _DDREbits
               00112         extern _TRISEbits
               00113         extern _DDRFbits
               00114         extern _TRISFbits
               00115         extern _DDRGbits
               00116         extern _TRISGbits
               00117         extern _DDRHbits
               00118         extern _TRISHbits
               00119         extern _DDRJbits
               00120         extern _TRISJbits
               00121         extern _OSCTUNEbits
               00122         extern _MEMCONbits
               00123         extern _PIE1bits
               00124         extern _PIR1bits
               00125         extern _IPR1bits
               00126         extern _PIE2bits
               00127         extern _PIR2bits
               00128         extern _IPR2bits
               00129         extern _PIE3bits
               00130         extern _PIR3bits
               00131         extern _IPR3bits
               00132         extern _EECON1bits
               00133         extern _RCSTAbits
               00134         extern _RCSTA1bits
               00135         extern _TXSTAbits
               00136         extern _TXSTA1bits
               00137         extern _PSPCONbits
               00138         extern _T3CONbits
               00139         extern _CMCONbits
               00140         extern _CVRCONbits
               00141         extern _ECCP1ASbits
               00142         extern _CCP3CONbits
               00143         extern _ECCP3CONbits
               00144         extern _CCP2CONbits
               00145         extern _ECCP2CONbits
               00146         extern _CCP1CONbits
               00147         extern _ECCP1CONbits
               00148         extern _ADCON2bits
               00149         extern _ADCON1bits
               00150         extern _ADCON0bits
               00151         extern _SSP1CON2bits
               00152         extern _SSPCON2bits
               00153         extern _SSP1CON1bits
               00154         extern _SSPCON1bits
               00155         extern _SSP1STATbits
               00156         extern _SSPSTATbits
               00157         extern _T2CONbits
               00158         extern _T1CONbits
               00159         extern _RCONbits
               00160         extern _WDTCONbits
               00161         extern _ECON1bits
               00162         extern _OSCCONbits
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00163         extern _T0CONbits
               00164         extern _STATUSbits
               00165         extern _INTCON3bits
               00166         extern _INTCON2bits
               00167         extern _INTCONbits
               00168         extern _STKPTRbits
               00169         extern _stdin
               00170         extern _stdout
               00171         extern _LCDText
               00172         extern _MAADR5
               00173         extern _MAADR6
               00174         extern _MAADR3
               00175         extern _MAADR4
               00176         extern _MAADR1
               00177         extern _MAADR2
               00178         extern _EBSTSD
               00179         extern _EBSTCON
               00180         extern _EBSTCS
               00181         extern _EBSTCSL
               00182         extern _EBSTCSH
               00183         extern _MISTAT
               00184         extern _EFLOCON
               00185         extern _EPAUS
               00186         extern _EPAUSL
               00187         extern _EPAUSH
               00188         extern _MACON1
               00189         extern _MACON2
               00190         extern _MACON3
               00191         extern _MACON4
               00192         extern _MABBIPG
               00193         extern _MAIPG
               00194         extern _MAIPGL
               00195         extern _MAIPGH
               00196         extern _MACLCON1
               00197         extern _MACLCON2
               00198         extern _MAMXFL
               00199         extern _MAMXFLL
               00200         extern _MAMXFLH
               00201         extern _MICON
               00202         extern _MICMD
               00203         extern _MIREGADR
               00204         extern _MIWR
               00205         extern _MIWRL
               00206         extern _MIWRH
               00207         extern _MIRD
               00208         extern _MIRDL
               00209         extern _MIRDH
               00210         extern _EHT0
               00211         extern _EHT1
               00212         extern _EHT2
               00213         extern _EHT3
               00214         extern _EHT4
               00215         extern _EHT5
               00216         extern _EHT6
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00217         extern _EHT7
               00218         extern _EPMM0
               00219         extern _EPMM1
               00220         extern _EPMM2
               00221         extern _EPMM3
               00222         extern _EPMM4
               00223         extern _EPMM5
               00224         extern _EPMM6
               00225         extern _EPMM7
               00226         extern _EPMCS
               00227         extern _EPMCSL
               00228         extern _EPMCSH
               00229         extern _EPMO
               00230         extern _EPMOL
               00231         extern _EPMOH
               00232         extern _EWOLIE
               00233         extern _EWOLIR
               00234         extern _ERXFCON
               00235         extern _EPKTCNT
               00236         extern _EWRPT
               00237         extern _EWRPTL
               00238         extern _EWRPTH
               00239         extern _ETXST
               00240         extern _ETXSTL
               00241         extern _ETXSTH
               00242         extern _ETXND
               00243         extern _ETXNDL
               00244         extern _ETXNDH
               00245         extern _ERXST
               00246         extern _ERXSTL
               00247         extern _ERXSTH
               00248         extern _ERXND
               00249         extern _ERXNDL
               00250         extern _ERXNDH
               00251         extern _ERXRDPT
               00252         extern _ERXRDPTL
               00253         extern _ERXRDPTH
               00254         extern _ERXWRPT
               00255         extern _ERXWRPTL
               00256         extern _ERXWRPTH
               00257         extern _EDMAST
               00258         extern _EDMASTL
               00259         extern _EDMASTH
               00260         extern _EDMAND
               00261         extern _EDMANDL
               00262         extern _EDMANDH
               00263         extern _EDMADST
               00264         extern _EDMADSTL
               00265         extern _EDMADSTH
               00266         extern _EDMACS
               00267         extern _EDMACSL
               00268         extern _EDMACSH
               00269         extern _EIE
               00270         extern _ESTAT
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00271         extern _ECON2
               00272         extern _EIR
               00273         extern _EDATA
               00274         extern _SSP2CON2
               00275         extern _SSP2CON1
               00276         extern _SSP2STAT
               00277         extern _SSP2ADD
               00278         extern _SSP2BUF
               00279         extern _ECCP2DEL
               00280         extern _ECCP2AS
               00281         extern _ECCP3DEL
               00282         extern _ECCP3AS
               00283         extern _RCSTA2
               00284         extern _TXSTA2
               00285         extern _TXREG2
               00286         extern _RCREG2
               00287         extern _SPBRG2
               00288         extern _CCP5CON
               00289         extern _CCPR5
               00290         extern _CCPR5L
               00291         extern _CCPR5H
               00292         extern _CCP4CON
               00293         extern _CCPR4
               00294         extern _CCPR4L
               00295         extern _CCPR4H
               00296         extern _T4CON
               00297         extern _PR4
               00298         extern _TMR4
               00299         extern _ECCP1DEL
               00300         extern _ERDPT
               00301         extern _ERDPTL
               00302         extern _ERDPTH
               00303         extern _BAUDCON2
               00304         extern _BAUDCTL2
               00305         extern _SPBRGH2
               00306         extern _BAUDCON
               00307         extern _BAUDCON1
               00308         extern _BAUDCTL
               00309         extern _BAUDCTL1
               00310         extern _SPBRGH
               00311         extern _SPBRGH1
               00312         extern _PORTA
               00313         extern _PORTB
               00314         extern _PORTC
               00315         extern _PORTD
               00316         extern _PORTE
               00317         extern _PORTF
               00318         extern _PORTG
               00319         extern _PORTH
               00320         extern _PORTJ
               00321         extern _LATA
               00322         extern _LATB
               00323         extern _LATC
               00324         extern _LATD
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00325         extern _LATE
               00326         extern _LATF
               00327         extern _LATG
               00328         extern _LATH
               00329         extern _LATJ
               00330         extern _DDRA
               00331         extern _TRISA
               00332         extern _DDRB
               00333         extern _TRISB
               00334         extern _DDRC
               00335         extern _TRISC
               00336         extern _DDRD
               00337         extern _TRISD
               00338         extern _DDRE
               00339         extern _TRISE
               00340         extern _DDRF
               00341         extern _TRISF
               00342         extern _DDRG
               00343         extern _TRISG
               00344         extern _DDRH
               00345         extern _TRISH
               00346         extern _DDRJ
               00347         extern _TRISJ
               00348         extern _OSCTUNE
               00349         extern _MEMCON
               00350         extern _PIE1
               00351         extern _PIR1
               00352         extern _IPR1
               00353         extern _PIE2
               00354         extern _PIR2
               00355         extern _IPR2
               00356         extern _PIE3
               00357         extern _PIR3
               00358         extern _IPR3
               00359         extern _EECON1
               00360         extern _EECON2
               00361         extern _RCSTA
               00362         extern _RCSTA1
               00363         extern _TXSTA
               00364         extern _TXSTA1
               00365         extern _TXREG
               00366         extern _TXREG1
               00367         extern _RCREG
               00368         extern _RCREG1
               00369         extern _SPBRG
               00370         extern _SPBRG1
               00371         extern _PSPCON
               00372         extern _T3CON
               00373         extern _TMR3L
               00374         extern _TMR3H
               00375         extern _CMCON
               00376         extern _CVRCON
               00377         extern _ECCP1AS
               00378         extern _CCP3CON
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00379         extern _ECCP3CON
               00380         extern _CCPR3
               00381         extern _CCPR3L
               00382         extern _CCPR3H
               00383         extern _CCP2CON
               00384         extern _ECCP2CON
               00385         extern _CCPR2
               00386         extern _CCPR2L
               00387         extern _CCPR2H
               00388         extern _CCP1CON
               00389         extern _ECCP1CON
               00390         extern _CCPR1
               00391         extern _CCPR1L
               00392         extern _CCPR1H
               00393         extern _ADCON2
               00394         extern _ADCON1
               00395         extern _ADCON0
               00396         extern _ADRES
               00397         extern _ADRESL
               00398         extern _ADRESH
               00399         extern _SSP1CON2
               00400         extern _SSPCON2
               00401         extern _SSP1CON1
               00402         extern _SSPCON1
               00403         extern _SSP1STAT
               00404         extern _SSPSTAT
               00405         extern _SSP1ADD
               00406         extern _SSPADD
               00407         extern _SSP1BUF
               00408         extern _SSPBUF
               00409         extern _T2CON
               00410         extern _PR2
               00411         extern _TMR2
               00412         extern _T1CON
               00413         extern _TMR1L
               00414         extern _TMR1H
               00415         extern _RCON
               00416         extern _WDTCON
               00417         extern _ECON1
               00418         extern _OSCCON
               00419         extern _T0CON
               00420         extern _TMR0L
               00421         extern _TMR0H
               00422         extern _STATUS
               00423         extern _FSR2L
               00424         extern _FSR2H
               00425         extern _PLUSW2
               00426         extern _PREINC2
               00427         extern _POSTDEC2
               00428         extern _POSTINC2
               00429         extern _INDF2
               00430         extern _BSR
               00431         extern _FSR1L
               00432         extern _FSR1H
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00433         extern _PLUSW1
               00434         extern _PREINC1
               00435         extern _POSTDEC1
               00436         extern _POSTINC1
               00437         extern _INDF1
               00438         extern _WREG
               00439         extern _FSR0L
               00440         extern _FSR0H
               00441         extern _PLUSW0
               00442         extern _PREINC0
               00443         extern _POSTDEC0
               00444         extern _POSTINC0
               00445         extern _INDF0
               00446         extern _INTCON3
               00447         extern _INTCON2
               00448         extern _INTCON
               00449         extern _PROD
               00450         extern _PRODL
               00451         extern _PRODH
               00452         extern _TABLAT
               00453         extern _TBLPTR
               00454         extern _TBLPTRL
               00455         extern _TBLPTRH
               00456         extern _TBLPTRU
               00457         extern _PC
               00458         extern _PCL
               00459         extern _PCLATH
               00460         extern _PCLATU
               00461         extern _STKPTR
               00462         extern _TOS
               00463         extern _TOSL
               00464         extern _TOSH
               00465         extern _TOSU
               00466         extern _sprintf
               00467         extern _ultoa
               00468         extern _strlen
               00469         extern _LCDInit
               00470         extern _LCDUpdate
               00471 ;--------------------------------------------------------
               00472 ;       Equates to used internal registers
               00473 ;--------------------------------------------------------
  00000FD8     00474 STATUS  equ     0xfd8
  00000FF9     00475 PCL     equ     0xff9
  00000FFA     00476 PCLATH  equ     0xffa
  00000FFB     00477 PCLATU  equ     0xffb
  00000FE8     00478 WREG    equ     0xfe8
  00000FE0     00479 BSR     equ     0xfe0
  00000FE9     00480 FSR0L   equ     0xfe9
  00000FEA     00481 FSR0H   equ     0xfea
  00000FE1     00482 FSR1L   equ     0xfe1
  00000FD9     00483 FSR2L   equ     0xfd9
  00000FEF     00484 INDF0   equ     0xfef
  00000FE5     00485 POSTDEC1        equ     0xfe5
  00000FE4     00486 PREINC1 equ     0xfe4
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
  00000FDB     00487 PLUSW2  equ     0xfdb
  00000FF3     00488 PRODL   equ     0xff3
  00000FF4     00489 PRODH   equ     0xff4
               00490 
               00491 
               00492 ; Internal registers
               00493 .registers      udata_ovr       0x0000
               00494 r0x00   res     1
               00495 r0x01   res     1
               00496 r0x02   res     1
               00497 r0x03   res     1
               00498 r0x04   res     1
               00499 r0x05   res     1
               00500 r0x06   res     1
               00501 r0x07   res     1
               00502 r0x08   res     1
               00503 r0x09   res     1
               00504 r0x0a   res     1
               00505 r0x0b   res     1
               00506 r0x0c   res     1
               00507 r0x0d   res     1
               00508 r0x0e   res     1
               00509 r0x0f   res     1
               00510 r0x10   res     1
               00511 r0x11   res     1
               00512 r0x12   res     1
               00513 r0x13   res     1
               00514 r0x14   res     1
               00515 r0x15   res     1
               00516 
               00517 udata_test_0    udata
               00518 _stateMenu      res     2
               00519 
               00520 udata_test_1    udata
               00521 _hours  res     2
               00522 
               00523 udata_test_2    udata
               00524 _minutes        res     2
               00525 
               00526 udata_test_3    udata
               00527 _seconds        res     2
               00528 
               00529 udata_test_4    udata
               00530 _alarmHours     res     2
               00531 
               00532 udata_test_5    udata
               00533 _alarmMinutes   res     2
               00534 
               00535 udata_test_6    udata
               00536 _alarmStatus    res     2
               00537 
               00538 udata_test_7    udata
               00539 _h      res     3
               00540 
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00541 udata_test_8    udata
               00542 _m      res     3
               00543 
               00544 udata_test_9    udata
               00545 _s      res     3
               00546 
               00547 udata_test_10   udata
               00548 _alarmState     res     3
               00549 
               00550 udata_test_11   udata
               00551 _LCDPrint       res     32
               00552 
               00553 udata_test_12   udata
               00554 _DisplayWORD_WDigit_1_1 res     6
               00555 
               00556 ;--------------------------------------------------------
               00557 ; interrupt vector 
               00558 ;--------------------------------------------------------
               00559 
               00560 ;--------------------------------------------------------
               00561 ; global & static initialisations
               00562 ;--------------------------------------------------------
               00563 ; ; Starting pCode block for absolute section
               00564 ; ;-----------------------------------------
               00565 S_test_ivec_0x1_HighPriorityInterrupt   code    0X000008
0008 00566 ivec_0x1_HighPriorityInterrupt:
0008 EF00 F000 00567         GOTO    _HighPriorityInterrupt
               00568 
               00569 ; ; Starting pCode block for absolute section
               00570 ; ;-----------------------------------------
               00571 S_test_ivec_0x2_LowPriorityInterrupt    code    0X000018
0018 00572 ivec_0x2_LowPriorityInterrupt:
0018 EF00 F000 00573         GOTO    _LowPriorityInterrupt
               00574 
               00575 ; I code from now on!
               00576 ; ; Starting pCode block
               00577 S_test__main    code
0000 00578 _main:
0000 0000      00579         BANKSEL _stateMenu
               00580 ;       .line   65; test.c      stateMenu = STANDARD_STATE;
0002 6B00      00581         CLRF    _stateMenu, B
0004 0000      00582         BANKSEL (_stateMenu + 1)
0006 6B00      00583         CLRF    (_stateMenu + 1), B
               00584 ;       .line   66; test.c      INTCONbits.GIE = 1; // Activation générale des interruptions
0008 8E00      00585         BSF     _INTCONbits, 7
               00586 ;       .line   67; test.c      RCONbits.IPEN = 1; //interrupts priority enable
000A 8E00      00587         BSF     _RCONbits, 7
               00588 ;       .line   68; test.c      LCDInit(); // initialisation du LCD
000C EC00 F000 00589         CALL    _LCDInit
0010 0000      00590         BANKSEL _hours
               00591 ;       .line   69; test.c      hours = 0;
0012 6B00      00592         CLRF    _hours, B
0014 0000      00593         BANKSEL (_hours + 1)
0016 6B00      00594         CLRF    (_hours + 1), B
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0018 0000      00595         BANKSEL _minutes
               00596 ;       .line   70; test.c      minutes = 0;
001A 6B00      00597         CLRF    _minutes, B
001C 0000      00598         BANKSEL (_minutes + 1)
001E 6B00      00599         CLRF    (_minutes + 1), B
0020 0000      00600         BANKSEL _seconds
               00601 ;       .line   71; test.c      seconds = 0;
0022 6B00      00602         CLRF    _seconds, B
0024 0000      00603         BANKSEL (_seconds + 1)
0026 6B00      00604         CLRF    (_seconds + 1), B
0028 0000      00605         BANKSEL _alarmHours
               00606 ;       .line   72; test.c      alarmHours = 0;
002A 6B00      00607         CLRF    _alarmHours, B
002C 0000      00608         BANKSEL (_alarmHours + 1)
002E 6B00      00609         CLRF    (_alarmHours + 1), B
0030 0000      00610         BANKSEL _alarmMinutes
               00611 ;       .line   73; test.c      alarmMinutes = 0;
0032 6B00      00612         CLRF    _alarmMinutes, B
0034 0000      00613         BANKSEL (_alarmMinutes + 1)
0036 6B00      00614         CLRF    (_alarmMinutes + 1), B
0038 0000      00615         BANKSEL _alarmStatus
               00616 ;       .line   74; test.c      alarmStatus = 0;
003A 6B00      00617         CLRF    _alarmStatus, B
003C 0000      00618         BANKSEL (_alarmStatus + 1)
003E 6B00      00619         CLRF    (_alarmStatus + 1), B
               00620 ;       .line   75; test.c      ConfigTimer0();
0040 EC00 F000 00621         CALL    _ConfigTimer0
               00622 ;       .line   76; test.c      ConfigButtons();
0044 EC00 F000 00623         CALL    _ConfigButtons
               00624 ;       .line   77; test.c      ConfigLed();
0048 EC00 F000 00625         CALL    _ConfigLed
004C 00626 _00108_DS_:
               00627 ;       .line   81; test.c      UpdateTime();
004C EC00 F000 00628         CALL    _UpdateTime
               00629 ;       .line   82; test.c      IsItTime();
0050 EC00 F000 00630         CALL    _IsItTime
               00631 ;       .line   83; test.c      UpdateLCD();
0054 EC00 F000 00632         CALL    _UpdateLCD
0058 0000      00633         BANKSEL _stateMenu
               00634 ;       .line   84; test.c      if(stateMenu == RINGING) ledAlarm();
005A 5100      00635         MOVF    _stateMenu, W, B
005C 0A07      00636         XORLW   0x07
005E E100      00637         BNZ     _00114_DS_
0060 0000      00638         BANKSEL (_stateMenu + 1)
0062 5100      00639         MOVF    (_stateMenu + 1), W, B
0064 E000      00640         BZ      _00115_DS_
0066 00641 _00114_DS_:
0066 D000      00642         BRA     _00108_DS_
0068 00643 _00115_DS_:
0068 EC00 F000 00644         CALL    _ledAlarm
006C D000      00645         BRA     _00108_DS_
006E 0012      00646         RETURN  
               00647 
               00648 ; ; Starting pCode block
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00649 S_test__strlcpy code
0000 00650 _strlcpy:
               00651 ;       .line   542; test.c     strlcpy(char *dst, const char *src, size_t siz)
0000 CFD9 FFE5 00652         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 00653         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 00654         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 00655         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 00656         MOVFF   r0x02, POSTDEC1
0014 C000 FFE5 00657         MOVFF   r0x03, POSTDEC1
0018 C000 FFE5 00658         MOVFF   r0x04, POSTDEC1
001C C000 FFE5 00659         MOVFF   r0x05, POSTDEC1
0020 C000 FFE5 00660         MOVFF   r0x06, POSTDEC1
0024 C000 FFE5 00661         MOVFF   r0x07, POSTDEC1
0028 C000 FFE5 00662         MOVFF   r0x08, POSTDEC1
002C C000 FFE5 00663         MOVFF   r0x09, POSTDEC1
0030 C000 FFE5 00664         MOVFF   r0x0a, POSTDEC1
0034 C000 FFE5 00665         MOVFF   r0x0b, POSTDEC1
0038 C000 FFE5 00666         MOVFF   r0x0c, POSTDEC1
003C C000 FFE5 00667         MOVFF   r0x0d, POSTDEC1
0040 C000 FFE5 00668         MOVFF   r0x0e, POSTDEC1
0044 C000 FFE5 00669         MOVFF   r0x0f, POSTDEC1
0048 C000 FFE5 00670         MOVFF   r0x10, POSTDEC1
004C C000 FFE5 00671         MOVFF   r0x11, POSTDEC1
0050 C000 FFE5 00672         MOVFF   r0x12, POSTDEC1
0054 C000 FFE5 00673         MOVFF   r0x13, POSTDEC1
0058 C000 FFE5 00674         MOVFF   r0x14, POSTDEC1
005C C000 FFE5 00675         MOVFF   r0x15, POSTDEC1
0060 0E02      00676         MOVLW   0x02
0062 CFDB F000 00677         MOVFF   PLUSW2, r0x00
0066 0E03      00678         MOVLW   0x03
0068 CFDB F000 00679         MOVFF   PLUSW2, r0x01
006C 0E04      00680         MOVLW   0x04
006E CFDB F000 00681         MOVFF   PLUSW2, r0x02
0072 0E05      00682         MOVLW   0x05
0074 CFDB F000 00683         MOVFF   PLUSW2, r0x03
0078 0E06      00684         MOVLW   0x06
007A CFDB F000 00685         MOVFF   PLUSW2, r0x04
007E 0E07      00686         MOVLW   0x07
0080 CFDB F000 00687         MOVFF   PLUSW2, r0x05
0084 0E08      00688         MOVLW   0x08
0086 CFDB F000 00689         MOVFF   PLUSW2, r0x06
008A 0E09      00690         MOVLW   0x09
008C CFDB F000 00691         MOVFF   PLUSW2, r0x07
               00692 ;       .line   544; test.c     char       *d = dst;
0090 C000 F000 00693         MOVFF   r0x00, r0x08
0094 C000 F000 00694         MOVFF   r0x01, r0x09
0098 C000 F000 00695         MOVFF   r0x02, r0x0a
               00696 ;       .line   545; test.c     const char *s = src;
009C C000 F000 00697         MOVFF   r0x03, r0x0b
00A0 C000 F000 00698         MOVFF   r0x04, r0x0c
00A4 C000 F000 00699         MOVFF   r0x05, r0x0d
               00700 ;       .line   546; test.c     size_t      n = siz;
00A8 C000 F000 00701         MOVFF   r0x06, r0x0e
00AC C000 F000 00702         MOVFF   r0x07, r0x0f
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00703 ;       .line   549; test.c     if (n != 0)
00B0 5000      00704         MOVF    r0x06, W
00B2 1000      00705         IORWF   r0x07, W
00B4 B4D8      00706         BTFSC   STATUS, 2
00B6 D000      00707         BRA     _00286_DS_
               00708 ;       .line   551; test.c     while (--n != 0)
00B8 C000 F000 00709         MOVFF   r0x03, r0x10
00BC C000 F000 00710         MOVFF   r0x04, r0x11
00C0 C000 F000 00711         MOVFF   r0x05, r0x12
00C4 C000 F000 00712         MOVFF   r0x06, r0x13
00C8 C000 F000 00713         MOVFF   r0x07, r0x14
00CC 00714 _00282_DS_:
00CC 0EFF      00715         MOVLW   0xff
00CE 2600      00716         ADDWF   r0x13, F
00D0 A0D8      00717         BTFSS   STATUS, 0
00D2 0600      00718         DECF    r0x14, F
00D4 5000      00719         MOVF    r0x13, W
00D6 1000      00720         IORWF   r0x14, W
00D8 E000      00721         BZ      _00301_DS_
               00722 ;       .line   553; test.c     if ((*d++ = *s++) == '\0')
00DA C000 FFE9 00723         MOVFF   r0x10, FSR0L
00DE C000 FFF3 00724         MOVFF   r0x11, PRODL
00E2 5000      00725         MOVF    r0x12, W
00E4 EC00 F000 00726         CALL    __gptrget1
00E8 6E00      00727         MOVWF   r0x15
00EA 2A00      00728         INCF    r0x10, F
00EC B0D8      00729         BTFSC   STATUS, 0
00EE 2A00      00730         INCF    r0x11, F
00F0 B0D8      00731         BTFSC   STATUS, 0
00F2 2A00      00732         INCF    r0x12, F
00F4 C000 FFE5 00733         MOVFF   r0x15, POSTDEC1
00F8 C000 FFE9 00734         MOVFF   r0x00, FSR0L
00FC C000 FFF3 00735         MOVFF   r0x01, PRODL
0100 5000      00736         MOVF    r0x02, W
0102 EC00 F000 00737         CALL    __gptrput1
0106 2A00      00738         INCF    r0x00, F
0108 B0D8      00739         BTFSC   STATUS, 0
010A 2A00      00740         INCF    r0x01, F
010C B0D8      00741         BTFSC   STATUS, 0
010E 2A00      00742         INCF    r0x02, F
0110 5000      00743         MOVF    r0x15, W
0112 E100      00744         BNZ     _00282_DS_
0114 00745 _00301_DS_:
               00746 ;       .line   554; test.c     break;
0114 C000 F000 00747         MOVFF   r0x10, r0x0b
0118 C000 F000 00748         MOVFF   r0x11, r0x0c
011C C000 F000 00749         MOVFF   r0x12, r0x0d
0120 C000 F000 00750         MOVFF   r0x00, r0x08
0124 C000 F000 00751         MOVFF   r0x01, r0x09
0128 C000 F000 00752         MOVFF   r0x02, r0x0a
012C C000 F000 00753         MOVFF   r0x13, r0x0e
0130 C000 F000 00754         MOVFF   r0x14, r0x0f
0134 00755 _00286_DS_:
               00756 ;       .line   559; test.c     if (n == 0)
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0134 5000      00757         MOVF    r0x0e, W
0136 1000      00758         IORWF   r0x0f, W
0138 E100      00759         BNZ     _00293_DS_
               00760 ;       .line   561; test.c     if (siz != 0)
013A 5000      00761         MOVF    r0x06, W
013C 1000      00762         IORWF   r0x07, W
013E E000      00763         BZ      _00300_DS_
               00764 ;       .line   562; test.c     *d = '\0';          /* NUL-terminate dst */
0140 0E00      00765         MOVLW   0x00
0142 6EE5      00766         MOVWF   POSTDEC1
0144 C000 FFE9 00767         MOVFF   r0x08, FSR0L
0148 C000 FFF3 00768         MOVFF   r0x09, PRODL
014C 5000      00769         MOVF    r0x0a, W
014E EC00 F000 00770         CALL    __gptrput1
0152 00771 _00300_DS_:
               00772 ;       .line   563; test.c     while (*s++)
0152 C000 F000 00773         MOVFF   r0x0b, r0x00
0156 C000 F000 00774         MOVFF   r0x0c, r0x01
015A C000 F000 00775         MOVFF   r0x0d, r0x02
015E 00776 _00289_DS_:
015E C000 FFE9 00777         MOVFF   r0x00, FSR0L
0162 C000 FFF3 00778         MOVFF   r0x01, PRODL
0166 5000      00779         MOVF    r0x02, W
0168 EC00 F000 00780         CALL    __gptrget1
016C 6E00      00781         MOVWF   r0x06
016E 2A00      00782         INCF    r0x00, F
0170 B0D8      00783         BTFSC   STATUS, 0
0172 2A00      00784         INCF    r0x01, F
0174 B0D8      00785         BTFSC   STATUS, 0
0176 2A00      00786         INCF    r0x02, F
0178 5000      00787         MOVF    r0x06, W
017A E100      00788         BNZ     _00289_DS_
017C C000 F000 00789         MOVFF   r0x00, r0x0b
0180 C000 F000 00790         MOVFF   r0x01, r0x0c
0184 C000 F000 00791         MOVFF   r0x02, r0x0d
0188 00792 _00293_DS_:
               00793 ;       .line   567; test.c     return (s - src - 1);       /* count does not include NUL */
0188 5000      00794         MOVF    r0x03, W
018A 5C00      00795         SUBWF   r0x0b, W
018C 6E00      00796         MOVWF   r0x03
018E 5000      00797         MOVF    r0x04, W
0190 5800      00798         SUBWFB  r0x0c, W
0192 6E00      00799         MOVWF   r0x04
0194 0EFF      00800         MOVLW   0xff
0196 2600      00801         ADDWF   r0x03, F
0198 A0D8      00802         BTFSS   STATUS, 0
019A 0600      00803         DECF    r0x04, F
019C C000 FFF3 00804         MOVFF   r0x04, PRODL
01A0 5000      00805         MOVF    r0x03, W
01A2 CFE4 F000 00806         MOVFF   PREINC1, r0x15
01A6 CFE4 F000 00807         MOVFF   PREINC1, r0x14
01AA CFE4 F000 00808         MOVFF   PREINC1, r0x13
01AE CFE4 F000 00809         MOVFF   PREINC1, r0x12
01B2 CFE4 F000 00810         MOVFF   PREINC1, r0x11
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
01B6 CFE4 F000 00811         MOVFF   PREINC1, r0x10
01BA CFE4 F000 00812         MOVFF   PREINC1, r0x0f
01BE CFE4 F000 00813         MOVFF   PREINC1, r0x0e
01C2 CFE4 F000 00814         MOVFF   PREINC1, r0x0d
01C6 CFE4 F000 00815         MOVFF   PREINC1, r0x0c
01CA CFE4 F000 00816         MOVFF   PREINC1, r0x0b
01CE CFE4 F000 00817         MOVFF   PREINC1, r0x0a
01D2 CFE4 F000 00818         MOVFF   PREINC1, r0x09
01D6 CFE4 F000 00819         MOVFF   PREINC1, r0x08
01DA CFE4 F000 00820         MOVFF   PREINC1, r0x07
01DE CFE4 F000 00821         MOVFF   PREINC1, r0x06
01E2 CFE4 F000 00822         MOVFF   PREINC1, r0x05
01E6 CFE4 F000 00823         MOVFF   PREINC1, r0x04
01EA CFE4 F000 00824         MOVFF   PREINC1, r0x03
01EE CFE4 F000 00825         MOVFF   PREINC1, r0x02
01F2 CFE4 F000 00826         MOVFF   PREINC1, r0x01
01F6 CFE4 F000 00827         MOVFF   PREINC1, r0x00
01FA CFE4 FFD9 00828         MOVFF   PREINC1, FSR2L
01FE 0012      00829         RETURN  
               00830 
               00831 ; ; Starting pCode block
               00832 S_test__DisplayString   code
0000 00833 _DisplayString:
               00834 ;       .line   496; test.c     void DisplayString(BYTE pos, char* text)
0000 CFD9 FFE5 00835         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 00836         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 00837         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 00838         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 00839         MOVFF   r0x02, POSTDEC1
0014 C000 FFE5 00840         MOVFF   r0x03, POSTDEC1
0018 C000 FFE5 00841         MOVFF   r0x04, POSTDEC1
001C C000 FFE5 00842         MOVFF   r0x05, POSTDEC1
0020 C000 FFE5 00843         MOVFF   r0x06, POSTDEC1
0024 C000 FFE5 00844         MOVFF   r0x07, POSTDEC1
0028 0E02      00845         MOVLW   0x02
002A CFDB F000 00846         MOVFF   PLUSW2, r0x00
002E 0E03      00847         MOVLW   0x03
0030 CFDB F000 00848         MOVFF   PLUSW2, r0x01
0034 0E04      00849         MOVLW   0x04
0036 CFDB F000 00850         MOVFF   PLUSW2, r0x02
003A 0E05      00851         MOVLW   0x05
003C CFDB F000 00852         MOVFF   PLUSW2, r0x03
               00853 ;       .line   498; test.c     BYTE l= strlen(text)+1;
0040 5000      00854         MOVF    r0x03, W
0042 6EE5      00855         MOVWF   POSTDEC1
0044 5000      00856         MOVF    r0x02, W
0046 6EE5      00857         MOVWF   POSTDEC1
0048 5000      00858         MOVF    r0x01, W
004A 6EE5      00859         MOVWF   POSTDEC1
004C EC00 F000 00860         CALL    _strlen
0050 6E00      00861         MOVWF   r0x04
0052 CFF3 F000 00862         MOVFF   PRODL, r0x05
0056 0E03      00863         MOVLW   0x03
0058 26E1      00864         ADDWF   FSR1L, F
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
005A 2A00      00865         INCF    r0x04, F
               00866 ;       .line   499; test.c     BYTE max= 32-pos;
005C 5000      00867         MOVF    r0x00, W
005E 0820      00868         SUBLW   0x20
0060 6E00      00869         MOVWF   r0x05
               00870 ;       .line   500; test.c     strlcpy((char*)&LCDText[pos], text,(l<max)?l:max );
0062 6A00      00871         CLRF    r0x06
0064 0E00      00872         MOVLW   LOW(_LCDText)
0066 2600      00873         ADDWF   r0x00, F
0068 0E00      00874         MOVLW   HIGH(_LCDText)
006A 2200      00875         ADDWFC  r0x06, F
006C 5000      00876         MOVF    r0x06, W
006E 6E00      00877         MOVWF   r0x06
0070 5000      00878         MOVF    r0x00, W
0072 6E00      00879         MOVWF   r0x00
0074 0E80      00880         MOVLW   0x80
0076 6E00      00881         MOVWF   r0x07
0078 5000      00882         MOVF    r0x05, W
007A 5C00      00883         SUBWF   r0x04, W
007C E300      00884         BNC     _00273_DS_
007E C000 F000 00885         MOVFF   r0x05, r0x04
0082 00886 _00273_DS_:
0082 6A00      00887         CLRF    r0x05
0084 5000      00888         MOVF    r0x05, W
0086 6EE5      00889         MOVWF   POSTDEC1
0088 5000      00890         MOVF    r0x04, W
008A 6EE5      00891         MOVWF   POSTDEC1
008C 5000      00892         MOVF    r0x03, W
008E 6EE5      00893         MOVWF   POSTDEC1
0090 5000      00894         MOVF    r0x02, W
0092 6EE5      00895         MOVWF   POSTDEC1
0094 5000      00896         MOVF    r0x01, W
0096 6EE5      00897         MOVWF   POSTDEC1
0098 5000      00898         MOVF    r0x07, W
009A 6EE5      00899         MOVWF   POSTDEC1
009C 5000      00900         MOVF    r0x06, W
009E 6EE5      00901         MOVWF   POSTDEC1
00A0 5000      00902         MOVF    r0x00, W
00A2 6EE5      00903         MOVWF   POSTDEC1
00A4 EC00 F000 00904         CALL    _strlcpy
00A8 0E08      00905         MOVLW   0x08
00AA 26E1      00906         ADDWF   FSR1L, F
               00907 ;       .line   501; test.c     LCDUpdate();
00AC EC00 F000 00908         CALL    _LCDUpdate
00B0 CFE4 F000 00909         MOVFF   PREINC1, r0x07
00B4 CFE4 F000 00910         MOVFF   PREINC1, r0x06
00B8 CFE4 F000 00911         MOVFF   PREINC1, r0x05
00BC CFE4 F000 00912         MOVFF   PREINC1, r0x04
00C0 CFE4 F000 00913         MOVFF   PREINC1, r0x03
00C4 CFE4 F000 00914         MOVFF   PREINC1, r0x02
00C8 CFE4 F000 00915         MOVFF   PREINC1, r0x01
00CC CFE4 F000 00916         MOVFF   PREINC1, r0x00
00D0 CFE4 FFD9 00917         MOVFF   PREINC1, FSR2L
00D4 0012      00918         RETURN  
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00919 
               00920 ; ; Starting pCode block
               00921 S_test__DisplayWORD     code
0000 00922 _DisplayWORD:
               00923 ;       .line   474; test.c     void DisplayWORD(BYTE pos, WORD w) //WORD is a 16 bits unsigned
0000 CFD9 FFE5 00924         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 00925         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 00926         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 00927         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 00928         MOVFF   r0x02, POSTDEC1
0014 C000 FFE5 00929         MOVFF   r0x03, POSTDEC1
0018 C000 FFE5 00930         MOVFF   r0x04, POSTDEC1
001C C000 FFE5 00931         MOVFF   r0x05, POSTDEC1
0020 0E02      00932         MOVLW   0x02
0022 CFDB F000 00933         MOVFF   PLUSW2, r0x00
0026 0E03      00934         MOVLW   0x03
0028 CFDB F000 00935         MOVFF   PLUSW2, r0x01
002C 0E04      00936         MOVLW   0x04
002E CFDB F000 00937         MOVFF   PLUSW2, r0x02
               00938 ;       .line   482; test.c     ultoa(w, WDigit, radix);      
0032 6A00      00939         CLRF    r0x03
0034 6A00      00940         CLRF    r0x04
0036 0E0A      00941         MOVLW   0x0a
0038 6EE5      00942         MOVWF   POSTDEC1
003A 0E00      00943         MOVLW   HIGH(_DisplayWORD_WDigit_1_1)
003C 6EE5      00944         MOVWF   POSTDEC1
003E 0E00      00945         MOVLW   LOW(_DisplayWORD_WDigit_1_1)
0040 6EE5      00946         MOVWF   POSTDEC1
0042 5000      00947         MOVF    r0x04, W
0044 6EE5      00948         MOVWF   POSTDEC1
0046 5000      00949         MOVF    r0x03, W
0048 6EE5      00950         MOVWF   POSTDEC1
004A 5000      00951         MOVF    r0x02, W
004C 6EE5      00952         MOVWF   POSTDEC1
004E 5000      00953         MOVF    r0x01, W
0050 6EE5      00954         MOVWF   POSTDEC1
0052 EC00 F000 00955         CALL    _ultoa
0056 0E07      00956         MOVLW   0x07
0058 26E1      00957         ADDWF   FSR1L, F
               00958 ;       .line   483; test.c     for(j = 0; j < strlen((char*)WDigit); j++)
005A 6A00      00959         CLRF    r0x01
005C 00960 _00254_DS_:
005C 0E00      00961         MOVLW   HIGH(_DisplayWORD_WDigit_1_1)
005E 6E00      00962         MOVWF   r0x03
0060 0E00      00963         MOVLW   LOW(_DisplayWORD_WDigit_1_1)
0062 6E00      00964         MOVWF   r0x02
0064 0E80      00965         MOVLW   0x80
0066 6E00      00966         MOVWF   r0x04
0068 5000      00967         MOVF    r0x04, W
006A 6EE5      00968         MOVWF   POSTDEC1
006C 5000      00969         MOVF    r0x03, W
006E 6EE5      00970         MOVWF   POSTDEC1
0070 5000      00971         MOVF    r0x02, W
0072 6EE5      00972         MOVWF   POSTDEC1
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0074 EC00 F000 00973         CALL    _strlen
0078 6E00      00974         MOVWF   r0x02
007A CFF3 F000 00975         MOVFF   PRODL, r0x03
007E 0E03      00976         MOVLW   0x03
0080 26E1      00977         ADDWF   FSR1L, F
0082 C000 F000 00978         MOVFF   r0x01, r0x04
0086 6A00      00979         CLRF    r0x05
0088 5000      00980         MOVF    r0x05, W
008A 0F80      00981         ADDLW   0x80
008C 6EF3      00982         MOVWF   PRODL
008E 5000      00983         MOVF    r0x03, W
0090 0F80      00984         ADDLW   0x80
0092 5CF3      00985         SUBWF   PRODL, W
0094 E100      00986         BNZ     _00264_DS_
0096 5000      00987         MOVF    r0x02, W
0098 5C00      00988         SUBWF   r0x04, W
009A 00989 _00264_DS_:
009A E200      00990         BC      _00257_DS_
               00991 ;       .line   485; test.c     LCDText[LCDPos++] = WDigit[j];
009C C000 F000 00992         MOVFF   r0x00, r0x02
00A0 2A00      00993         INCF    r0x00, F
00A2 6A00      00994         CLRF    r0x03
00A4 0E00      00995         MOVLW   LOW(_LCDText)
00A6 2600      00996         ADDWF   r0x02, F
00A8 0E00      00997         MOVLW   HIGH(_LCDText)
00AA 2200      00998         ADDWFC  r0x03, F
00AC 0E00      00999         MOVLW   LOW(_DisplayWORD_WDigit_1_1)
00AE 2400      01000         ADDWF   r0x01, W
00B0 6E00      01001         MOVWF   r0x04
00B2 6A00      01002         CLRF    r0x05
00B4 0E00      01003         MOVLW   HIGH(_DisplayWORD_WDigit_1_1)
00B6 2200      01004         ADDWFC  r0x05, F
00B8 C000 FFE9 01005         MOVFF   r0x04, FSR0L
00BC C000 FFEA 01006         MOVFF   r0x05, FSR0H
00C0 CFEF F000 01007         MOVFF   INDF0, r0x04
00C4 C000 FFE9 01008         MOVFF   r0x02, FSR0L
00C8 C000 FFEA 01009         MOVFF   r0x03, FSR0H
00CC C000 FFEF 01010         MOVFF   r0x04, INDF0
               01011 ;       .line   483; test.c     for(j = 0; j < strlen((char*)WDigit); j++)
00D0 2A00      01012         INCF    r0x01, F
00D2 D000      01013         BRA     _00254_DS_
00D4 01014 _00257_DS_:
               01015 ;       .line   487; test.c     if(LCDPos < 32u)
00D4 C000 F000 01016         MOVFF   r0x00, r0x01
00D8 6A00      01017         CLRF    r0x02
00DA 0E00      01018         MOVLW   0x00
00DC 5C00      01019         SUBWF   r0x02, W
00DE E100      01020         BNZ     _00265_DS_
00E0 0E20      01021         MOVLW   0x20
00E2 5C00      01022         SUBWF   r0x01, W
00E4 01023 _00265_DS_:
00E4 E200      01024         BC      _00253_DS_
               01025 ;       .line   488; test.c     LCDText[LCDPos] = 0;
00E6 6A00      01026         CLRF    r0x01
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00E8 0E00      01027         MOVLW   LOW(_LCDText)
00EA 2600      01028         ADDWF   r0x00, F
00EC 0E00      01029         MOVLW   HIGH(_LCDText)
00EE 2200      01030         ADDWFC  r0x01, F
00F0 C000 FFE9 01031         MOVFF   r0x00, FSR0L
00F4 C000 FFEA 01032         MOVFF   r0x01, FSR0H
00F8 0E00      01033         MOVLW   0x00
00FA 6EEF      01034         MOVWF   INDF0
00FC 01035 _00253_DS_:
               01036 ;       .line   489; test.c     LCDUpdate();
00FC EC00 F000 01037         CALL    _LCDUpdate
0100 CFE4 F000 01038         MOVFF   PREINC1, r0x05
0104 CFE4 F000 01039         MOVFF   PREINC1, r0x04
0108 CFE4 F000 01040         MOVFF   PREINC1, r0x03
010C CFE4 F000 01041         MOVFF   PREINC1, r0x02
0110 CFE4 F000 01042         MOVFF   PREINC1, r0x01
0114 CFE4 F000 01043         MOVFF   PREINC1, r0x00
0118 CFE4 FFD9 01044         MOVFF   PREINC1, FSR2L
011C 0012      01045         RETURN  
               01046 
               01047 ; ; Starting pCode block
               01048 S_test__LowPriorityInterrupt    code
0000 01049 _LowPriorityInterrupt:
               01050 ;       .line   371; test.c     void LowPriorityInterrupt(void) __interrupt (2)
0000 CFE8 FFE5 01051         MOVFF   WREG, POSTDEC1
0004 CFD8 FFE5 01052         MOVFF   STATUS, POSTDEC1
0008 CFE0 FFE5 01053         MOVFF   BSR, POSTDEC1
000C CFF3 FFE5 01054         MOVFF   PRODL, POSTDEC1
0010 CFF4 FFE5 01055         MOVFF   PRODH, POSTDEC1
0014 CFE9 FFE5 01056         MOVFF   FSR0L, POSTDEC1
0018 CFEA FFE5 01057         MOVFF   FSR0H, POSTDEC1
001C CFFA FFE5 01058         MOVFF   PCLATH, POSTDEC1
0020 CFFB FFE5 01059         MOVFF   PCLATU, POSTDEC1
0024 CFD9 FFE5 01060         MOVFF   FSR2L, POSTDEC1
0028 CFE1 FFD9 01061         MOVFF   FSR1L, FSR2L
               01062 ;       .line   460; test.c     }
002C CFE4 FFD9 01063         MOVFF   PREINC1, FSR2L
0030 CFE4 FFFB 01064         MOVFF   PREINC1, PCLATU
0034 CFE4 FFFA 01065         MOVFF   PREINC1, PCLATH
0038 CFE4 FFEA 01066         MOVFF   PREINC1, FSR0H
003C CFE4 FFE9 01067         MOVFF   PREINC1, FSR0L
0040 CFE4 FFF4 01068         MOVFF   PREINC1, PRODH
0044 CFE4 FFF3 01069         MOVFF   PREINC1, PRODL
0048 CFE4 FFE0 01070         MOVFF   PREINC1, BSR
004C CFE4 FFD8 01071         MOVFF   PREINC1, STATUS
0050 CFE4 FFE8 01072         MOVFF   PREINC1, WREG
0054 0010      01073         RETFIE  
               01074 
               01075 ; ; Starting pCode block
               01076 S_test__HighPriorityInterrupt   code
0000 01077 _HighPriorityInterrupt:
               01078 ;       .line   280; test.c     void HighPriorityInterrupt(void) __interrupt (1)
0000 CFE8 FFE5 01079         MOVFF   WREG, POSTDEC1
0004 CFD8 FFE5 01080         MOVFF   STATUS, POSTDEC1
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0008 CFE0 FFE5 01081         MOVFF   BSR, POSTDEC1
000C CFF3 FFE5 01082         MOVFF   PRODL, POSTDEC1
0010 CFF4 FFE5 01083         MOVFF   PRODH, POSTDEC1
0014 CFE9 FFE5 01084         MOVFF   FSR0L, POSTDEC1
0018 CFEA FFE5 01085         MOVFF   FSR0H, POSTDEC1
001C CFFA FFE5 01086         MOVFF   PCLATH, POSTDEC1
0020 CFFB FFE5 01087         MOVFF   PCLATU, POSTDEC1
0024 CFD9 FFE5 01088         MOVFF   FSR2L, POSTDEC1
0028 CFE1 FFD9 01089         MOVFF   FSR1L, FSR2L
002C C000 FFE5 01090         MOVFF   r0x00, POSTDEC1
               01091 ;       .line   282; test.c     if (INTCONbits.TMR0IF)
0030 A400      01092         BTFSS   _INTCONbits, 2
0032 D000      01093         BRA     _00207_DS_
               01094 ;       .line   286; test.c     TMR0H = 0xA0; 
0034 0EA0      01095         MOVLW   0xa0
0036 6E00      01096         MOVWF   _TMR0H
               01097 ;       .line   287; test.c     TMR0L = 0xA2;
0038 0EA2      01098         MOVLW   0xa2
003A 6E00      01099         MOVWF   _TMR0L
               01100 ;       .line   288; test.c     INTCONbits.TMR0IF = 0; // OBLIGATOIRE: Remettre le bit d'interruption à zéro
003C 9400      01101         BCF     _INTCONbits, 2
003E 0000      01102         BANKSEL _seconds
               01103 ;       .line   289; test.c     seconds++;
0040 2B00      01104         INCF    _seconds, F, B
0042 E300      01105         BNC     _10280_DS_
0044 0000      01106         BANKSEL (_seconds + 1)
0046 2B00      01107         INCF    (_seconds + 1), F, B
0048 01108 _10280_DS_:
0048 01109 _00207_DS_:
               01110 ;       .line   291; test.c     if (INTCON3bits.INT3F){ //Interupt Flag BUT1
0048 A400      01111         BTFSS   _INTCON3bits, 2
004A D000      01112         BRA     _00218_DS_
               01113 ;       .line   292; test.c     switch(stateMenu){
004C 0E00      01114         MOVLW   0x00
004E 0000      01115         BANKSEL (_stateMenu + 1)
0050 5D00      01116         SUBWF   (_stateMenu + 1), W, B
0052 E100      01117         BNZ     _00237_DS_
0054 0E08      01118         MOVLW   0x08
0056 0000      01119         BANKSEL _stateMenu
0058 5D00      01120         SUBWF   _stateMenu, W, B
005A 01121 _00237_DS_:
005A B0D8      01122         BTFSC   STATUS, 0
005C D000      01123         BRA     _00216_DS_
005E C000 FFE5 01124         MOVFF   r0x01, POSTDEC1
0062 C000 FFE5 01125         MOVFF   r0x02, POSTDEC1
0066 6A00      01126         CLRF    r0x02
0068 0000      01127         BANKSEL _stateMenu
006A 3500      01128         RLCF    _stateMenu, W, B
006C 3600      01129         RLCF    r0x02, F
006E 34E8      01130         RLCF    WREG, W
0070 3600      01131         RLCF    r0x02, F
0072 0BFC      01132         ANDLW   0xfc
0074 6E00      01133         MOVWF   r0x01
0076 0E00      01134         MOVLW   UPPER(_00238_DS_)
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0078 6EFB      01135         MOVWF   PCLATU
007A 0E00      01136         MOVLW   HIGH(_00238_DS_)
007C 6EFA      01137         MOVWF   PCLATH
007E 0E00      01138         MOVLW   LOW(_00238_DS_)
0080 2600      01139         ADDWF   r0x01, F
0082 5000      01140         MOVF    r0x02, W
0084 22FA      01141         ADDWFC  PCLATH, F
0086 B0D8      01142         BTFSC   STATUS, 0
0088 2AFB      01143         INCF    PCLATU, F
008A 5000      01144         MOVF    r0x01, W
008C CFE4 F000 01145         MOVFF   PREINC1, r0x02
0090 CFE4 F000 01146         MOVFF   PREINC1, r0x01
0094 6EF9      01147         MOVWF   PCL
0096 01148 _00238_DS_:
0096 EF00 F000 01149         GOTO    _00208_DS_
009A EF00 F000 01150         GOTO    _00209_DS_
009E EF00 F000 01151         GOTO    _00210_DS_
00A2 EF00 F000 01152         GOTO    _00211_DS_
00A6 EF00 F000 01153         GOTO    _00212_DS_
00AA EF00 F000 01154         GOTO    _00213_DS_
00AE EF00 F000 01155         GOTO    _00214_DS_
00B2 EF00 F000 01156         GOTO    _00215_DS_
00B6 01157 _00208_DS_:
               01158 ;       .line   294; test.c     alarmStatus ^=1; // Enable/disable alarm
00B6 0E01      01159         MOVLW   0x01
00B8 0000      01160         BANKSEL _alarmStatus
00BA 1B00      01161         XORWF   _alarmStatus, F, B
               01162 ;       .line   295; test.c     LED0_IO ^= 1;
00BC 6A00      01163         CLRF    r0x00
00BE B000      01164         BTFSC   _LATJbits, 0
00C0 2A00      01165         INCF    r0x00, F
00C2 0E01      01166         MOVLW   0x01
00C4 1A00      01167         XORWF   r0x00, F
00C6 5000      01168         MOVF    r0x00, W
00C8 0B01      01169         ANDLW   0x01
00CA 6EF4      01170         MOVWF   PRODH
00CC 5000      01171         MOVF    _LATJbits, W
00CE 0BFE      01172         ANDLW   0xfe
00D0 10F4      01173         IORWF   PRODH, W
00D2 6E00      01174         MOVWF   _LATJbits
               01175 ;       .line   296; test.c     break; // ADD SMTHNG TO STOP ALARM :)
00D4 D000      01176         BRA     _00216_DS_
00D6 01177 _00209_DS_:
               01178 ;       .line   298; test.c     stateMenu = SET_TIME_MINUTES;
00D6 0E02      01179         MOVLW   0x02
00D8 0000      01180         BANKSEL _stateMenu
00DA 6F00      01181         MOVWF   _stateMenu, B
00DC 0000      01182         BANKSEL (_stateMenu + 1)
00DE 6B00      01183         CLRF    (_stateMenu + 1), B
               01184 ;       .line   299; test.c     break;
00E0 D000      01185         BRA     _00216_DS_
00E2 01186 _00210_DS_:
00E2 0000      01187         BANKSEL _minutes
               01188 ;       .line   301; test.c     minutes++;
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00E4 2B00      01189         INCF    _minutes, F, B
00E6 E300      01190         BNC     _20281_DS_
00E8 0000      01191         BANKSEL (_minutes + 1)
00EA 2B00      01192         INCF    (_minutes + 1), F, B
00EC 01193 _20281_DS_:
               01194 ;       .line   302; test.c     break;
00EC D000      01195         BRA     _00216_DS_
00EE 01196 _00211_DS_:
00EE 0000      01197         BANKSEL _hours
               01198 ;       .line   304; test.c     hours++;
00F0 2B00      01199         INCF    _hours, F, B
00F2 E300      01200         BNC     _30282_DS_
00F4 0000      01201         BANKSEL (_hours + 1)
00F6 2B00      01202         INCF    (_hours + 1), F, B
00F8 01203 _30282_DS_:
               01204 ;       .line   305; test.c     break;
00F8 D000      01205         BRA     _00216_DS_
00FA 01206 _00212_DS_:
               01207 ;       .line   307; test.c     stateMenu = SET_ALARMCLOCK_MINUTES;
00FA 0E05      01208         MOVLW   0x05
00FC 0000      01209         BANKSEL _stateMenu
00FE 6F00      01210         MOVWF   _stateMenu, B
0100 0000      01211         BANKSEL (_stateMenu + 1)
0102 6B00      01212         CLRF    (_stateMenu + 1), B
               01213 ;       .line   308; test.c     break;
0104 D000      01214         BRA     _00216_DS_
0106 01215 _00213_DS_:
0106 0000      01216         BANKSEL _alarmMinutes
               01217 ;       .line   310; test.c     alarmMinutes++;
0108 2B00      01218         INCF    _alarmMinutes, F, B
010A E300      01219         BNC     _40283_DS_
010C 0000      01220         BANKSEL (_alarmMinutes + 1)
010E 2B00      01221         INCF    (_alarmMinutes + 1), F, B
0110 01222 _40283_DS_:
               01223 ;       .line   311; test.c     break;
0110 D000      01224         BRA     _00216_DS_
0112 01225 _00214_DS_:
0112 0000      01226         BANKSEL _alarmHours
               01227 ;       .line   313; test.c     alarmHours++;
0114 2B00      01228         INCF    _alarmHours, F, B
0116 E300      01229         BNC     _50284_DS_
0118 0000      01230         BANKSEL (_alarmHours + 1)
011A 2B00      01231         INCF    (_alarmHours + 1), F, B
011C 01232 _50284_DS_:
               01233 ;       .line   314; test.c     break;
011C D000      01234         BRA     _00216_DS_
011E 01235 _00215_DS_:
011E 0000      01236         BANKSEL _stateMenu
               01237 ;       .line   316; test.c     stateMenu = STANDARD_STATE;
0120 6B00      01238         CLRF    _stateMenu, B
0122 0000      01239         BANKSEL (_stateMenu + 1)
0124 6B00      01240         CLRF    (_stateMenu + 1), B
0126 0000      01241         BANKSEL _alarmStatus
               01242 ;       .line   317; test.c     alarmStatus = 0;
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0128 6B00      01243         CLRF    _alarmStatus, B
012A 0000      01244         BANKSEL (_alarmStatus + 1)
012C 6B00      01245         CLRF    (_alarmStatus + 1), B
               01246 ;       .line   318; test.c     LED0_IO = 0;
012E 9000      01247         BCF     _LATJbits, 0
               01248 ;       .line   319; test.c     LED1_IO = 0;
0130 9200      01249         BCF     _LATJbits, 1
               01250 ;       .line   320; test.c     LED2_IO = 0;
0132 9400      01251         BCF     _LATJbits, 2
0134 01252 _00216_DS_:
               01253 ;       .line   326; test.c     INTCON3bits.INT3F = 0; // clear flag
0134 9400      01254         BCF     _INTCON3bits, 2
0136 01255 _00218_DS_:
               01256 ;       .line   329; test.c     if (INTCON3bits.INT1F){ //Interupt Flag BUT2
0136 A000      01257         BTFSS   _INTCON3bits, 0
0138 D000      01258         BRA     _00230_DS_
               01259 ;       .line   330; test.c     switch(stateMenu){
013A 0E00      01260         MOVLW   0x00
013C 0000      01261         BANKSEL (_stateMenu + 1)
013E 5D00      01262         SUBWF   (_stateMenu + 1), W, B
0140 E100      01263         BNZ     _00241_DS_
0142 0E08      01264         MOVLW   0x08
0144 0000      01265         BANKSEL _stateMenu
0146 5D00      01266         SUBWF   _stateMenu, W, B
0148 01267 _00241_DS_:
0148 B0D8      01268         BTFSC   STATUS, 0
014A D000      01269         BRA     _00227_DS_
014C C000 FFE5 01270         MOVFF   r0x01, POSTDEC1
0150 C000 FFE5 01271         MOVFF   r0x02, POSTDEC1
0154 6A00      01272         CLRF    r0x02
0156 0000      01273         BANKSEL _stateMenu
0158 3500      01274         RLCF    _stateMenu, W, B
015A 3600      01275         RLCF    r0x02, F
015C 34E8      01276         RLCF    WREG, W
015E 3600      01277         RLCF    r0x02, F
0160 0BFC      01278         ANDLW   0xfc
0162 6E00      01279         MOVWF   r0x01
0164 0E00      01280         MOVLW   UPPER(_00242_DS_)
0166 6EFB      01281         MOVWF   PCLATU
0168 0E00      01282         MOVLW   HIGH(_00242_DS_)
016A 6EFA      01283         MOVWF   PCLATH
016C 0E00      01284         MOVLW   LOW(_00242_DS_)
016E 2600      01285         ADDWF   r0x01, F
0170 5000      01286         MOVF    r0x02, W
0172 22FA      01287         ADDWFC  PCLATH, F
0174 B0D8      01288         BTFSC   STATUS, 0
0176 2AFB      01289         INCF    PCLATU, F
0178 5000      01290         MOVF    r0x01, W
017A CFE4 F000 01291         MOVFF   PREINC1, r0x02
017E CFE4 F000 01292         MOVFF   PREINC1, r0x01
0182 6EF9      01293         MOVWF   PCL
0184 01294 _00242_DS_:
0184 EF00 F000 01295         GOTO    _00219_DS_
0188 EF00 F000 01296         GOTO    _00220_DS_
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
018C EF00 F000 01297         GOTO    _00221_DS_
0190 EF00 F000 01298         GOTO    _00222_DS_
0194 EF00 F000 01299         GOTO    _00223_DS_
0198 EF00 F000 01300         GOTO    _00224_DS_
019C EF00 F000 01301         GOTO    _00225_DS_
01A0 EF00 F000 01302         GOTO    _00226_DS_
01A4 01303 _00219_DS_:
               01304 ;       .line   332; test.c     stateMenu = SET_TIME_MENU;
01A4 0E01      01305         MOVLW   0x01
01A6 0000      01306         BANKSEL _stateMenu
01A8 6F00      01307         MOVWF   _stateMenu, B
01AA 0000      01308         BANKSEL (_stateMenu + 1)
01AC 6B00      01309         CLRF    (_stateMenu + 1), B
               01310 ;       .line   333; test.c     break; // ADD SMTHNG TO STOP ALARM :)
01AE D000      01311         BRA     _00227_DS_
01B0 01312 _00220_DS_:
               01313 ;       .line   335; test.c     stateMenu = SET_ALARMCLOCK_MENU;
01B0 0E04      01314         MOVLW   0x04
01B2 0000      01315         BANKSEL _stateMenu
01B4 6F00      01316         MOVWF   _stateMenu, B
01B6 0000      01317         BANKSEL (_stateMenu + 1)
01B8 6B00      01318         CLRF    (_stateMenu + 1), B
               01319 ;       .line   336; test.c     break;
01BA D000      01320         BRA     _00227_DS_
01BC 01321 _00221_DS_:
               01322 ;       .line   338; test.c     stateMenu = SET_TIME_HOURS;
01BC 0E03      01323         MOVLW   0x03
01BE 0000      01324         BANKSEL _stateMenu
01C0 6F00      01325         MOVWF   _stateMenu, B
01C2 0000      01326         BANKSEL (_stateMenu + 1)
01C4 6B00      01327         CLRF    (_stateMenu + 1), B
               01328 ;       .line   339; test.c     break;
01C6 D000      01329         BRA     _00227_DS_
01C8 01330 _00222_DS_:
01C8 0000      01331         BANKSEL _stateMenu
               01332 ;       .line   341; test.c     stateMenu = STANDARD_STATE;
01CA 6B00      01333         CLRF    _stateMenu, B
01CC 0000      01334         BANKSEL (_stateMenu + 1)
01CE 6B00      01335         CLRF    (_stateMenu + 1), B
               01336 ;       .line   342; test.c     break;
01D0 D000      01337         BRA     _00227_DS_
01D2 01338 _00223_DS_:
01D2 0000      01339         BANKSEL _stateMenu
               01340 ;       .line   344; test.c     stateMenu = STANDARD_STATE;
01D4 6B00      01341         CLRF    _stateMenu, B
01D6 0000      01342         BANKSEL (_stateMenu + 1)
01D8 6B00      01343         CLRF    (_stateMenu + 1), B
               01344 ;       .line   345; test.c     break;
01DA D000      01345         BRA     _00227_DS_
01DC 01346 _00224_DS_:
               01347 ;       .line   347; test.c     stateMenu = SET_ALARMCLOCK_HOURS;
01DC 0E06      01348         MOVLW   0x06
01DE 0000      01349         BANKSEL _stateMenu
01E0 6F00      01350         MOVWF   _stateMenu, B
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
01E2 0000      01351         BANKSEL (_stateMenu + 1)
01E4 6B00      01352         CLRF    (_stateMenu + 1), B
               01353 ;       .line   348; test.c     break;
01E6 D000      01354         BRA     _00227_DS_
01E8 01355 _00225_DS_:
01E8 0000      01356         BANKSEL _stateMenu
               01357 ;       .line   350; test.c     stateMenu = STANDARD_STATE;
01EA 6B00      01358         CLRF    _stateMenu, B
01EC 0000      01359         BANKSEL (_stateMenu + 1)
01EE 6B00      01360         CLRF    (_stateMenu + 1), B
               01361 ;       .line   351; test.c     break;
01F0 D000      01362         BRA     _00227_DS_
01F2 01363 _00226_DS_:
01F2 0000      01364         BANKSEL _stateMenu
               01365 ;       .line   353; test.c     stateMenu = STANDARD_STATE;
01F4 6B00      01366         CLRF    _stateMenu, B
01F6 0000      01367         BANKSEL (_stateMenu + 1)
01F8 6B00      01368         CLRF    (_stateMenu + 1), B
01FA 0000      01369         BANKSEL _alarmStatus
               01370 ;       .line   354; test.c     alarmStatus = 0;
01FC 6B00      01371         CLRF    _alarmStatus, B
01FE 0000      01372         BANKSEL (_alarmStatus + 1)
0200 6B00      01373         CLRF    (_alarmStatus + 1), B
               01374 ;       .line   355; test.c     LED0_IO = 0;
0202 9000      01375         BCF     _LATJbits, 0
               01376 ;       .line   356; test.c     LED1_IO = 0;
0204 9200      01377         BCF     _LATJbits, 1
               01378 ;       .line   357; test.c     LED2_IO = 0;
0206 9400      01379         BCF     _LATJbits, 2
0208 01380 _00227_DS_:
               01381 ;       .line   362; test.c     INTCON3bits.INT1F = 0; // clear flag
0208 9000      01382         BCF     _INTCON3bits, 0
020A 01383 _00230_DS_:
020A CFE4 F000 01384         MOVFF   PREINC1, r0x00
020E CFE4 FFD9 01385         MOVFF   PREINC1, FSR2L
0212 CFE4 FFFB 01386         MOVFF   PREINC1, PCLATU
0216 CFE4 FFFA 01387         MOVFF   PREINC1, PCLATH
021A CFE4 FFEA 01388         MOVFF   PREINC1, FSR0H
021E CFE4 FFE9 01389         MOVFF   PREINC1, FSR0L
0222 CFE4 FFF4 01390         MOVFF   PREINC1, PRODH
0226 CFE4 FFF3 01391         MOVFF   PREINC1, PRODL
022A CFE4 FFE0 01392         MOVFF   PREINC1, BSR
022E CFE4 FFD8 01393         MOVFF   PREINC1, STATUS
0232 CFE4 FFE8 01394         MOVFF   PREINC1, WREG
0236 0010      01395         RETFIE  
               01396 
               01397 ; ; Starting pCode block
               01398 S_test__ConvertTime     code
0000 01399 _ConvertTime:
               01400 ;       .line   248; test.c     void ConvertTime(short time, char* str){
0000 CFD9 FFE5 01401         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 01402         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 01403         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 01404         MOVFF   r0x01, POSTDEC1
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0010 C000 FFE5 01405         MOVFF   r0x02, POSTDEC1
0014 C000 FFE5 01406         MOVFF   r0x03, POSTDEC1
0018 C000 FFE5 01407         MOVFF   r0x04, POSTDEC1
001C 0E02      01408         MOVLW   0x02
001E CFDB F000 01409         MOVFF   PLUSW2, r0x00
0022 0E03      01410         MOVLW   0x03
0024 CFDB F000 01411         MOVFF   PLUSW2, r0x01
0028 0E04      01412         MOVLW   0x04
002A CFDB F000 01413         MOVFF   PLUSW2, r0x02
002E 0E05      01414         MOVLW   0x05
0030 CFDB F000 01415         MOVFF   PLUSW2, r0x03
0034 0E06      01416         MOVLW   0x06
0036 CFDB F000 01417         MOVFF   PLUSW2, r0x04
               01418 ;       .line   249; test.c     if(time<10){
003A 5000      01419         MOVF    r0x01, W
003C 0F80      01420         ADDLW   0x80
003E 0F80      01421         ADDLW   0x80
0040 E100      01422         BNZ     _00201_DS_
0042 0E0A      01423         MOVLW   0x0a
0044 5C00      01424         SUBWF   r0x00, W
0046 01425 _00201_DS_:
0046 E200      01426         BC      _00196_DS_
               01427 ;       .line   250; test.c     sprintf(str,"0%u\0",time);
0048 5000      01428         MOVF    r0x01, W
004A 6EE5      01429         MOVWF   POSTDEC1
004C 5000      01430         MOVF    r0x00, W
004E 6EE5      01431         MOVWF   POSTDEC1
0050 0E00      01432         MOVLW   UPPER(__str_10)
0052 6EE5      01433         MOVWF   POSTDEC1
0054 0E00      01434         MOVLW   HIGH(__str_10)
0056 6EE5      01435         MOVWF   POSTDEC1
0058 0E00      01436         MOVLW   LOW(__str_10)
005A 6EE5      01437         MOVWF   POSTDEC1
005C 5000      01438         MOVF    r0x04, W
005E 6EE5      01439         MOVWF   POSTDEC1
0060 5000      01440         MOVF    r0x03, W
0062 6EE5      01441         MOVWF   POSTDEC1
0064 5000      01442         MOVF    r0x02, W
0066 6EE5      01443         MOVWF   POSTDEC1
0068 EC00 F000 01444         CALL    _sprintf
006C 0E08      01445         MOVLW   0x08
006E 26E1      01446         ADDWF   FSR1L, F
0070 D000      01447         BRA     _00198_DS_
0072 01448 _00196_DS_:
               01449 ;       .line   252; test.c     sprintf(str,"%u\0",time);
0072 5000      01450         MOVF    r0x01, W
0074 6EE5      01451         MOVWF   POSTDEC1
0076 5000      01452         MOVF    r0x00, W
0078 6EE5      01453         MOVWF   POSTDEC1
007A 0E00      01454         MOVLW   UPPER(__str_11)
007C 6EE5      01455         MOVWF   POSTDEC1
007E 0E00      01456         MOVLW   HIGH(__str_11)
0080 6EE5      01457         MOVWF   POSTDEC1
0082 0E00      01458         MOVLW   LOW(__str_11)
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0084 6EE5      01459         MOVWF   POSTDEC1
0086 5000      01460         MOVF    r0x04, W
0088 6EE5      01461         MOVWF   POSTDEC1
008A 5000      01462         MOVF    r0x03, W
008C 6EE5      01463         MOVWF   POSTDEC1
008E 5000      01464         MOVF    r0x02, W
0090 6EE5      01465         MOVWF   POSTDEC1
0092 EC00 F000 01466         CALL    _sprintf
0096 0E08      01467         MOVLW   0x08
0098 26E1      01468         ADDWF   FSR1L, F
009A 01469 _00198_DS_:
009A CFE4 F000 01470         MOVFF   PREINC1, r0x04
009E CFE4 F000 01471         MOVFF   PREINC1, r0x03
00A2 CFE4 F000 01472         MOVFF   PREINC1, r0x02
00A6 CFE4 F000 01473         MOVFF   PREINC1, r0x01
00AA CFE4 F000 01474         MOVFF   PREINC1, r0x00
00AE CFE4 FFD9 01475         MOVFF   PREINC1, FSR2L
00B2 0012      01476         RETURN  
               01477 
               01478 ; ; Starting pCode block
               01479 S_test__ledAlarm        code
0000 01480 _ledAlarm:
               01481 ;       .line   240; test.c     void ledAlarm(){
0000 CFD9 FFE5 01482         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 01483         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 01484         MOVFF   r0x00, POSTDEC1
               01485 ;       .line   241; test.c     LED1_IO ^= 1;
000C 6A00      01486         CLRF    r0x00
000E B200      01487         BTFSC   _LATJbits, 1
0010 2A00      01488         INCF    r0x00, F
0012 0E01      01489         MOVLW   0x01
0014 1A00      01490         XORWF   r0x00, F
0016 5000      01491         MOVF    r0x00, W
0018 0B01      01492         ANDLW   0x01
001A 44E8      01493         RLNCF   WREG, W
001C 6EF4      01494         MOVWF   PRODH
001E 5000      01495         MOVF    _LATJbits, W
0020 0BFD      01496         ANDLW   0xfd
0022 10F4      01497         IORWF   PRODH, W
0024 6E00      01498         MOVWF   _LATJbits
               01499 ;       .line   242; test.c     LED2_IO ^= 1;
0026 6A00      01500         CLRF    r0x00
0028 B400      01501         BTFSC   _LATJbits, 2
002A 2A00      01502         INCF    r0x00, F
002C 0E01      01503         MOVLW   0x01
002E 1A00      01504         XORWF   r0x00, F
0030 5000      01505         MOVF    r0x00, W
0032 0B01      01506         ANDLW   0x01
0034 44E8      01507         RLNCF   WREG, W
0036 44E8      01508         RLNCF   WREG, W
0038 6EF4      01509         MOVWF   PRODH
003A 5000      01510         MOVF    _LATJbits, W
003C 0BFB      01511         ANDLW   0xfb
003E 10F4      01512         IORWF   PRODH, W
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0040 6E00      01513         MOVWF   _LATJbits
0042 CFE4 F000 01514         MOVFF   PREINC1, r0x00
0046 CFE4 FFD9 01515         MOVFF   PREINC1, FSR2L
004A 0012      01516         RETURN  
               01517 
               01518 ; ; Starting pCode block
               01519 S_test__UpdateLCD       code
0000 01520 _UpdateLCD:
               01521 ;       .line   179; test.c     void UpdateLCD(){
0000 CFD9 FFE5 01522         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 01523         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 01524         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 01525         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 01526         MOVFF   r0x02, POSTDEC1
0014 C000 FFE5 01527         MOVFF   r0x03, POSTDEC1
0018 C000 FFE5 01528         MOVFF   r0x04, POSTDEC1
001C C000 FFE5 01529         MOVFF   r0x05, POSTDEC1
0020 C000 FFE5 01530         MOVFF   r0x06, POSTDEC1
0024 C000 FFE5 01531         MOVFF   r0x07, POSTDEC1
0028 C000 FFE5 01532         MOVFF   r0x08, POSTDEC1
002C C000 FFE5 01533         MOVFF   r0x09, POSTDEC1
0030 C000 FFE5 01534         MOVFF   r0x0a, POSTDEC1
0034 C000 FFE5 01535         MOVFF   r0x0b, POSTDEC1
0038 C000 FFE5 01536         MOVFF   r0x0c, POSTDEC1
003C C000 FFE5 01537         MOVFF   r0x0d, POSTDEC1
0040 C000 FFE5 01538         MOVFF   r0x0e, POSTDEC1
               01539 ;       .line   180; test.c     switch(stateMenu){
0044 0E00      01540         MOVLW   0x00
0046 0000      01541         BANKSEL (_stateMenu + 1)
0048 5D00      01542         SUBWF   (_stateMenu + 1), W, B
004A E100      01543         BNZ     _00184_DS_
004C 0E08      01544         MOVLW   0x08
004E 0000      01545         BANKSEL _stateMenu
0050 5D00      01546         SUBWF   _stateMenu, W, B
0052 01547 _00184_DS_:
0052 B0D8      01548         BTFSC   STATUS, 0
0054 EF00 F000 01549         GOTO    _00179_DS_
0058 C000 FFE5 01550         MOVFF   r0x0f, POSTDEC1
005C C000 FFE5 01551         MOVFF   r0x10, POSTDEC1
0060 6A00      01552         CLRF    r0x10
0062 0000      01553         BANKSEL _stateMenu
0064 3500      01554         RLCF    _stateMenu, W, B
0066 3600      01555         RLCF    r0x10, F
0068 34E8      01556         RLCF    WREG, W
006A 3600      01557         RLCF    r0x10, F
006C 0BFC      01558         ANDLW   0xfc
006E 6E00      01559         MOVWF   r0x0f
0070 0E00      01560         MOVLW   UPPER(_00185_DS_)
0072 6EFB      01561         MOVWF   PCLATU
0074 0E00      01562         MOVLW   HIGH(_00185_DS_)
0076 6EFA      01563         MOVWF   PCLATH
0078 0E00      01564         MOVLW   LOW(_00185_DS_)
007A 2600      01565         ADDWF   r0x0f, F
007C 5000      01566         MOVF    r0x10, W
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
007E 22FA      01567         ADDWFC  PCLATH, F
0080 B0D8      01568         BTFSC   STATUS, 0
0082 2AFB      01569         INCF    PCLATU, F
0084 5000      01570         MOVF    r0x0f, W
0086 CFE4 F000 01571         MOVFF   PREINC1, r0x10
008A CFE4 F000 01572         MOVFF   PREINC1, r0x0f
008E 6EF9      01573         MOVWF   PCL
0090 01574 _00185_DS_:
0090 EF00 F000 01575         GOTO    _00168_DS_
0094 EF00 F000 01576         GOTO    _00172_DS_
0098 EF00 F000 01577         GOTO    _00173_DS_
009C EF00 F000 01578         GOTO    _00174_DS_
00A0 EF00 F000 01579         GOTO    _00175_DS_
00A4 EF00 F000 01580         GOTO    _00176_DS_
00A8 EF00 F000 01581         GOTO    _00177_DS_
00AC EF00 F000 01582         GOTO    _00178_DS_
00B0 01583 _00168_DS_:
               01584 ;       .line   182; test.c     ConvertTime(hours, h);
00B0 C000 F000 01585         MOVFF   _hours, r0x00
00B4 C000 F000 01586         MOVFF   (_hours + 1), r0x01
00B8 0E00      01587         MOVLW   HIGH(_h)
00BA 6E00      01588         MOVWF   r0x03
00BC 0E00      01589         MOVLW   LOW(_h)
00BE 6E00      01590         MOVWF   r0x02
00C0 0E80      01591         MOVLW   0x80
00C2 6E00      01592         MOVWF   r0x04
00C4 5000      01593         MOVF    r0x04, W
00C6 6EE5      01594         MOVWF   POSTDEC1
00C8 5000      01595         MOVF    r0x03, W
00CA 6EE5      01596         MOVWF   POSTDEC1
00CC 5000      01597         MOVF    r0x02, W
00CE 6EE5      01598         MOVWF   POSTDEC1
00D0 5000      01599         MOVF    r0x01, W
00D2 6EE5      01600         MOVWF   POSTDEC1
00D4 5000      01601         MOVF    r0x00, W
00D6 6EE5      01602         MOVWF   POSTDEC1
00D8 EC00 F000 01603         CALL    _ConvertTime
00DC 0E05      01604         MOVLW   0x05
00DE 26E1      01605         ADDWF   FSR1L, F
               01606 ;       .line   183; test.c     ConvertTime(minutes, m);
00E0 C000 F000 01607         MOVFF   _minutes, r0x00
00E4 C000 F000 01608         MOVFF   (_minutes + 1), r0x01
00E8 0E00      01609         MOVLW   HIGH(_m)
00EA 6E00      01610         MOVWF   r0x03
00EC 0E00      01611         MOVLW   LOW(_m)
00EE 6E00      01612         MOVWF   r0x02
00F0 0E80      01613         MOVLW   0x80
00F2 6E00      01614         MOVWF   r0x04
00F4 5000      01615         MOVF    r0x04, W
00F6 6EE5      01616         MOVWF   POSTDEC1
00F8 5000      01617         MOVF    r0x03, W
00FA 6EE5      01618         MOVWF   POSTDEC1
00FC 5000      01619         MOVF    r0x02, W
00FE 6EE5      01620         MOVWF   POSTDEC1
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0100 5000      01621         MOVF    r0x01, W
0102 6EE5      01622         MOVWF   POSTDEC1
0104 5000      01623         MOVF    r0x00, W
0106 6EE5      01624         MOVWF   POSTDEC1
0108 EC00 F000 01625         CALL    _ConvertTime
010C 0E05      01626         MOVLW   0x05
010E 26E1      01627         ADDWF   FSR1L, F
               01628 ;       .line   184; test.c     ConvertTime(seconds, s);
0110 C000 F000 01629         MOVFF   _seconds, r0x00
0114 C000 F000 01630         MOVFF   (_seconds + 1), r0x01
0118 0E00      01631         MOVLW   HIGH(_s)
011A 6E00      01632         MOVWF   r0x03
011C 0E00      01633         MOVLW   LOW(_s)
011E 6E00      01634         MOVWF   r0x02
0120 0E80      01635         MOVLW   0x80
0122 6E00      01636         MOVWF   r0x04
0124 5000      01637         MOVF    r0x04, W
0126 6EE5      01638         MOVWF   POSTDEC1
0128 5000      01639         MOVF    r0x03, W
012A 6EE5      01640         MOVWF   POSTDEC1
012C 5000      01641         MOVF    r0x02, W
012E 6EE5      01642         MOVWF   POSTDEC1
0130 5000      01643         MOVF    r0x01, W
0132 6EE5      01644         MOVWF   POSTDEC1
0134 5000      01645         MOVF    r0x00, W
0136 6EE5      01646         MOVWF   POSTDEC1
0138 EC00 F000 01647         CALL    _ConvertTime
013C 0E05      01648         MOVLW   0x05
013E 26E1      01649         ADDWF   FSR1L, F
0140 0000      01650         BANKSEL _alarmStatus
               01651 ;       .line   186; test.c     if(alarmStatus){
0142 5100      01652         MOVF    _alarmStatus, W, B
0144 0000      01653         BANKSEL (_alarmStatus + 1)
0146 1100      01654         IORWF   (_alarmStatus + 1), W, B
0148 E000      01655         BZ      _00170_DS_
               01656 ;       .line   187; test.c     sprintf(alarmState,"ON ");
014A 0E00      01657         MOVLW   HIGH(_alarmState)
014C 6E00      01658         MOVWF   r0x01
014E 0E00      01659         MOVLW   LOW(_alarmState)
0150 6E00      01660         MOVWF   r0x00
0152 0E80      01661         MOVLW   0x80
0154 6E00      01662         MOVWF   r0x02
0156 0E00      01663         MOVLW   UPPER(__str_0)
0158 6EE5      01664         MOVWF   POSTDEC1
015A 0E00      01665         MOVLW   HIGH(__str_0)
015C 6EE5      01666         MOVWF   POSTDEC1
015E 0E00      01667         MOVLW   LOW(__str_0)
0160 6EE5      01668         MOVWF   POSTDEC1
0162 5000      01669         MOVF    r0x02, W
0164 6EE5      01670         MOVWF   POSTDEC1
0166 5000      01671         MOVF    r0x01, W
0168 6EE5      01672         MOVWF   POSTDEC1
016A 5000      01673         MOVF    r0x00, W
016C 6EE5      01674         MOVWF   POSTDEC1
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
016E EC00 F000 01675         CALL    _sprintf
0172 0E06      01676         MOVLW   0x06
0174 26E1      01677         ADDWF   FSR1L, F
0176 D000      01678         BRA     _00171_DS_
0178 01679 _00170_DS_:
               01680 ;       .line   189; test.c     sprintf(alarmState,"OFF");
0178 0E00      01681         MOVLW   HIGH(_alarmState)
017A 6E00      01682         MOVWF   r0x01
017C 0E00      01683         MOVLW   LOW(_alarmState)
017E 6E00      01684         MOVWF   r0x00
0180 0E80      01685         MOVLW   0x80
0182 6E00      01686         MOVWF   r0x02
0184 0E00      01687         MOVLW   UPPER(__str_1)
0186 6EE5      01688         MOVWF   POSTDEC1
0188 0E00      01689         MOVLW   HIGH(__str_1)
018A 6EE5      01690         MOVWF   POSTDEC1
018C 0E00      01691         MOVLW   LOW(__str_1)
018E 6EE5      01692         MOVWF   POSTDEC1
0190 5000      01693         MOVF    r0x02, W
0192 6EE5      01694         MOVWF   POSTDEC1
0194 5000      01695         MOVF    r0x01, W
0196 6EE5      01696         MOVWF   POSTDEC1
0198 5000      01697         MOVF    r0x00, W
019A 6EE5      01698         MOVWF   POSTDEC1
019C EC00 F000 01699         CALL    _sprintf
01A0 0E06      01700         MOVLW   0x06
01A2 26E1      01701         ADDWF   FSR1L, F
01A4 01702 _00171_DS_:
               01703 ;       .line   191; test.c     sprintf(LCDPrint,"    %s:%s:%s    Alarm %s",h,m,s,alarmState);
01A4 0E00      01704         MOVLW   HIGH(_alarmState)
01A6 6E00      01705         MOVWF   r0x01
01A8 0E00      01706         MOVLW   LOW(_alarmState)
01AA 6E00      01707         MOVWF   r0x00
01AC 0E80      01708         MOVLW   0x80
01AE 6E00      01709         MOVWF   r0x02
01B0 0E00      01710         MOVLW   HIGH(_s)
01B2 6E00      01711         MOVWF   r0x04
01B4 0E00      01712         MOVLW   LOW(_s)
01B6 6E00      01713         MOVWF   r0x03
01B8 0E80      01714         MOVLW   0x80
01BA 6E00      01715         MOVWF   r0x05
01BC 0E00      01716         MOVLW   HIGH(_m)
01BE 6E00      01717         MOVWF   r0x07
01C0 0E00      01718         MOVLW   LOW(_m)
01C2 6E00      01719         MOVWF   r0x06
01C4 0E80      01720         MOVLW   0x80
01C6 6E00      01721         MOVWF   r0x08
01C8 0E00      01722         MOVLW   HIGH(_h)
01CA 6E00      01723         MOVWF   r0x0a
01CC 0E00      01724         MOVLW   LOW(_h)
01CE 6E00      01725         MOVWF   r0x09
01D0 0E80      01726         MOVLW   0x80
01D2 6E00      01727         MOVWF   r0x0b
01D4 0E00      01728         MOVLW   HIGH(_LCDPrint)
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
01D6 6E00      01729         MOVWF   r0x0d
01D8 0E00      01730         MOVLW   LOW(_LCDPrint)
01DA 6E00      01731         MOVWF   r0x0c
01DC 0E80      01732         MOVLW   0x80
01DE 6E00      01733         MOVWF   r0x0e
01E0 5000      01734         MOVF    r0x02, W
01E2 6EE5      01735         MOVWF   POSTDEC1
01E4 5000      01736         MOVF    r0x01, W
01E6 6EE5      01737         MOVWF   POSTDEC1
01E8 5000      01738         MOVF    r0x00, W
01EA 6EE5      01739         MOVWF   POSTDEC1
01EC 5000      01740         MOVF    r0x05, W
01EE 6EE5      01741         MOVWF   POSTDEC1
01F0 5000      01742         MOVF    r0x04, W
01F2 6EE5      01743         MOVWF   POSTDEC1
01F4 5000      01744         MOVF    r0x03, W
01F6 6EE5      01745         MOVWF   POSTDEC1
01F8 5000      01746         MOVF    r0x08, W
01FA 6EE5      01747         MOVWF   POSTDEC1
01FC 5000      01748         MOVF    r0x07, W
01FE 6EE5      01749         MOVWF   POSTDEC1
0200 5000      01750         MOVF    r0x06, W
0202 6EE5      01751         MOVWF   POSTDEC1
0204 5000      01752         MOVF    r0x0b, W
0206 6EE5      01753         MOVWF   POSTDEC1
0208 5000      01754         MOVF    r0x0a, W
020A 6EE5      01755         MOVWF   POSTDEC1
020C 5000      01756         MOVF    r0x09, W
020E 6EE5      01757         MOVWF   POSTDEC1
0210 0E00      01758         MOVLW   UPPER(__str_2)
0212 6EE5      01759         MOVWF   POSTDEC1
0214 0E00      01760         MOVLW   HIGH(__str_2)
0216 6EE5      01761         MOVWF   POSTDEC1
0218 0E00      01762         MOVLW   LOW(__str_2)
021A 6EE5      01763         MOVWF   POSTDEC1
021C 5000      01764         MOVF    r0x0e, W
021E 6EE5      01765         MOVWF   POSTDEC1
0220 5000      01766         MOVF    r0x0d, W
0222 6EE5      01767         MOVWF   POSTDEC1
0224 5000      01768         MOVF    r0x0c, W
0226 6EE5      01769         MOVWF   POSTDEC1
0228 EC00 F000 01770         CALL    _sprintf
022C 0E12      01771         MOVLW   0x12
022E 26E1      01772         ADDWF   FSR1L, F
               01773 ;       .line   192; test.c     break;
0230 EF00 F000 01774         GOTO    _00179_DS_
0234 01775 _00172_DS_:
               01776 ;       .line   194; test.c     sprintf(LCDPrint, "      MENU        Set time ?");
0234 0E00      01777         MOVLW   HIGH(_LCDPrint)
0236 6E00      01778         MOVWF   r0x01
0238 0E00      01779         MOVLW   LOW(_LCDPrint)
023A 6E00      01780         MOVWF   r0x00
023C 0E80      01781         MOVLW   0x80
023E 6E00      01782         MOVWF   r0x02
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0240 0E00      01783         MOVLW   UPPER(__str_3)
0242 6EE5      01784         MOVWF   POSTDEC1
0244 0E00      01785         MOVLW   HIGH(__str_3)
0246 6EE5      01786         MOVWF   POSTDEC1
0248 0E00      01787         MOVLW   LOW(__str_3)
024A 6EE5      01788         MOVWF   POSTDEC1
024C 5000      01789         MOVF    r0x02, W
024E 6EE5      01790         MOVWF   POSTDEC1
0250 5000      01791         MOVF    r0x01, W
0252 6EE5      01792         MOVWF   POSTDEC1
0254 5000      01793         MOVF    r0x00, W
0256 6EE5      01794         MOVWF   POSTDEC1
0258 EC00 F000 01795         CALL    _sprintf
025C 0E06      01796         MOVLW   0x06
025E 26E1      01797         ADDWF   FSR1L, F
               01798 ;       .line   195; test.c     break;
0260 EF00 F000 01799         GOTO    _00179_DS_
0264 01800 _00173_DS_:
               01801 ;       .line   197; test.c     ConvertTime(hours, h);
0264 C000 F000 01802         MOVFF   _hours, r0x00
0268 C000 F000 01803         MOVFF   (_hours + 1), r0x01
026C 0E00      01804         MOVLW   HIGH(_h)
026E 6E00      01805         MOVWF   r0x03
0270 0E00      01806         MOVLW   LOW(_h)
0272 6E00      01807         MOVWF   r0x02
0274 0E80      01808         MOVLW   0x80
0276 6E00      01809         MOVWF   r0x04
0278 5000      01810         MOVF    r0x04, W
027A 6EE5      01811         MOVWF   POSTDEC1
027C 5000      01812         MOVF    r0x03, W
027E 6EE5      01813         MOVWF   POSTDEC1
0280 5000      01814         MOVF    r0x02, W
0282 6EE5      01815         MOVWF   POSTDEC1
0284 5000      01816         MOVF    r0x01, W
0286 6EE5      01817         MOVWF   POSTDEC1
0288 5000      01818         MOVF    r0x00, W
028A 6EE5      01819         MOVWF   POSTDEC1
028C EC00 F000 01820         CALL    _ConvertTime
0290 0E05      01821         MOVLW   0x05
0292 26E1      01822         ADDWF   FSR1L, F
               01823 ;       .line   198; test.c     ConvertTime(minutes, m);
0294 C000 F000 01824         MOVFF   _minutes, r0x00
0298 C000 F000 01825         MOVFF   (_minutes + 1), r0x01
029C 0E00      01826         MOVLW   HIGH(_m)
029E 6E00      01827         MOVWF   r0x03
02A0 0E00      01828         MOVLW   LOW(_m)
02A2 6E00      01829         MOVWF   r0x02
02A4 0E80      01830         MOVLW   0x80
02A6 6E00      01831         MOVWF   r0x04
02A8 5000      01832         MOVF    r0x04, W
02AA 6EE5      01833         MOVWF   POSTDEC1
02AC 5000      01834         MOVF    r0x03, W
02AE 6EE5      01835         MOVWF   POSTDEC1
02B0 5000      01836         MOVF    r0x02, W
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
02B2 6EE5      01837         MOVWF   POSTDEC1
02B4 5000      01838         MOVF    r0x01, W
02B6 6EE5      01839         MOVWF   POSTDEC1
02B8 5000      01840         MOVF    r0x00, W
02BA 6EE5      01841         MOVWF   POSTDEC1
02BC EC00 F000 01842         CALL    _ConvertTime
02C0 0E05      01843         MOVLW   0x05
02C2 26E1      01844         ADDWF   FSR1L, F
               01845 ;       .line   199; test.c     ConvertTime(seconds, s);
02C4 C000 F000 01846         MOVFF   _seconds, r0x00
02C8 C000 F000 01847         MOVFF   (_seconds + 1), r0x01
02CC 0E00      01848         MOVLW   HIGH(_s)
02CE 6E00      01849         MOVWF   r0x03
02D0 0E00      01850         MOVLW   LOW(_s)
02D2 6E00      01851         MOVWF   r0x02
02D4 0E80      01852         MOVLW   0x80
02D6 6E00      01853         MOVWF   r0x04
02D8 5000      01854         MOVF    r0x04, W
02DA 6EE5      01855         MOVWF   POSTDEC1
02DC 5000      01856         MOVF    r0x03, W
02DE 6EE5      01857         MOVWF   POSTDEC1
02E0 5000      01858         MOVF    r0x02, W
02E2 6EE5      01859         MOVWF   POSTDEC1
02E4 5000      01860         MOVF    r0x01, W
02E6 6EE5      01861         MOVWF   POSTDEC1
02E8 5000      01862         MOVF    r0x00, W
02EA 6EE5      01863         MOVWF   POSTDEC1
02EC EC00 F000 01864         CALL    _ConvertTime
02F0 0E05      01865         MOVLW   0x05
02F2 26E1      01866         ADDWF   FSR1L, F
               01867 ;       .line   201; test.c     sprintf(LCDPrint,"Set Minutes     %s:[%s]:%s",h,m,s);
02F4 0E00      01868         MOVLW   HIGH(_s)
02F6 6E00      01869         MOVWF   r0x01
02F8 0E00      01870         MOVLW   LOW(_s)
02FA 6E00      01871         MOVWF   r0x00
02FC 0E80      01872         MOVLW   0x80
02FE 6E00      01873         MOVWF   r0x02
0300 0E00      01874         MOVLW   HIGH(_m)
0302 6E00      01875         MOVWF   r0x04
0304 0E00      01876         MOVLW   LOW(_m)
0306 6E00      01877         MOVWF   r0x03
0308 0E80      01878         MOVLW   0x80
030A 6E00      01879         MOVWF   r0x05
030C 0E00      01880         MOVLW   HIGH(_h)
030E 6E00      01881         MOVWF   r0x07
0310 0E00      01882         MOVLW   LOW(_h)
0312 6E00      01883         MOVWF   r0x06
0314 0E80      01884         MOVLW   0x80
0316 6E00      01885         MOVWF   r0x08
0318 0E00      01886         MOVLW   HIGH(_LCDPrint)
031A 6E00      01887         MOVWF   r0x0a
031C 0E00      01888         MOVLW   LOW(_LCDPrint)
031E 6E00      01889         MOVWF   r0x09
0320 0E80      01890         MOVLW   0x80
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0322 6E00      01891         MOVWF   r0x0b
0324 5000      01892         MOVF    r0x02, W
0326 6EE5      01893         MOVWF   POSTDEC1
0328 5000      01894         MOVF    r0x01, W
032A 6EE5      01895         MOVWF   POSTDEC1
032C 5000      01896         MOVF    r0x00, W
032E 6EE5      01897         MOVWF   POSTDEC1
0330 5000      01898         MOVF    r0x05, W
0332 6EE5      01899         MOVWF   POSTDEC1
0334 5000      01900         MOVF    r0x04, W
0336 6EE5      01901         MOVWF   POSTDEC1
0338 5000      01902         MOVF    r0x03, W
033A 6EE5      01903         MOVWF   POSTDEC1
033C 5000      01904         MOVF    r0x08, W
033E 6EE5      01905         MOVWF   POSTDEC1
0340 5000      01906         MOVF    r0x07, W
0342 6EE5      01907         MOVWF   POSTDEC1
0344 5000      01908         MOVF    r0x06, W
0346 6EE5      01909         MOVWF   POSTDEC1
0348 0E00      01910         MOVLW   UPPER(__str_4)
034A 6EE5      01911         MOVWF   POSTDEC1
034C 0E00      01912         MOVLW   HIGH(__str_4)
034E 6EE5      01913         MOVWF   POSTDEC1
0350 0E00      01914         MOVLW   LOW(__str_4)
0352 6EE5      01915         MOVWF   POSTDEC1
0354 5000      01916         MOVF    r0x0b, W
0356 6EE5      01917         MOVWF   POSTDEC1
0358 5000      01918         MOVF    r0x0a, W
035A 6EE5      01919         MOVWF   POSTDEC1
035C 5000      01920         MOVF    r0x09, W
035E 6EE5      01921         MOVWF   POSTDEC1
0360 EC00 F000 01922         CALL    _sprintf
0364 0E0F      01923         MOVLW   0x0f
0366 26E1      01924         ADDWF   FSR1L, F
               01925 ;       .line   202; test.c     break;
0368 D000      01926         BRA     _00179_DS_
036A 01927 _00174_DS_:
               01928 ;       .line   204; test.c     ConvertTime(hours, h);
036A C000 F000 01929         MOVFF   _hours, r0x00
036E C000 F000 01930         MOVFF   (_hours + 1), r0x01
0372 0E00      01931         MOVLW   HIGH(_h)
0374 6E00      01932         MOVWF   r0x03
0376 0E00      01933         MOVLW   LOW(_h)
0378 6E00      01934         MOVWF   r0x02
037A 0E80      01935         MOVLW   0x80
037C 6E00      01936         MOVWF   r0x04
037E 5000      01937         MOVF    r0x04, W
0380 6EE5      01938         MOVWF   POSTDEC1
0382 5000      01939         MOVF    r0x03, W
0384 6EE5      01940         MOVWF   POSTDEC1
0386 5000      01941         MOVF    r0x02, W
0388 6EE5      01942         MOVWF   POSTDEC1
038A 5000      01943         MOVF    r0x01, W
038C 6EE5      01944         MOVWF   POSTDEC1
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
038E 5000      01945         MOVF    r0x00, W
0390 6EE5      01946         MOVWF   POSTDEC1
0392 EC00 F000 01947         CALL    _ConvertTime
0396 0E05      01948         MOVLW   0x05
0398 26E1      01949         ADDWF   FSR1L, F
               01950 ;       .line   205; test.c     ConvertTime(minutes, m);
039A C000 F000 01951         MOVFF   _minutes, r0x00
039E C000 F000 01952         MOVFF   (_minutes + 1), r0x01
03A2 0E00      01953         MOVLW   HIGH(_m)
03A4 6E00      01954         MOVWF   r0x03
03A6 0E00      01955         MOVLW   LOW(_m)
03A8 6E00      01956         MOVWF   r0x02
03AA 0E80      01957         MOVLW   0x80
03AC 6E00      01958         MOVWF   r0x04
03AE 5000      01959         MOVF    r0x04, W
03B0 6EE5      01960         MOVWF   POSTDEC1
03B2 5000      01961         MOVF    r0x03, W
03B4 6EE5      01962         MOVWF   POSTDEC1
03B6 5000      01963         MOVF    r0x02, W
03B8 6EE5      01964         MOVWF   POSTDEC1
03BA 5000      01965         MOVF    r0x01, W
03BC 6EE5      01966         MOVWF   POSTDEC1
03BE 5000      01967         MOVF    r0x00, W
03C0 6EE5      01968         MOVWF   POSTDEC1
03C2 EC00 F000 01969         CALL    _ConvertTime
03C6 0E05      01970         MOVLW   0x05
03C8 26E1      01971         ADDWF   FSR1L, F
               01972 ;       .line   206; test.c     ConvertTime(seconds, s);
03CA C000 F000 01973         MOVFF   _seconds, r0x00
03CE C000 F000 01974         MOVFF   (_seconds + 1), r0x01
03D2 0E00      01975         MOVLW   HIGH(_s)
03D4 6E00      01976         MOVWF   r0x03
03D6 0E00      01977         MOVLW   LOW(_s)
03D8 6E00      01978         MOVWF   r0x02
03DA 0E80      01979         MOVLW   0x80
03DC 6E00      01980         MOVWF   r0x04
03DE 5000      01981         MOVF    r0x04, W
03E0 6EE5      01982         MOVWF   POSTDEC1
03E2 5000      01983         MOVF    r0x03, W
03E4 6EE5      01984         MOVWF   POSTDEC1
03E6 5000      01985         MOVF    r0x02, W
03E8 6EE5      01986         MOVWF   POSTDEC1
03EA 5000      01987         MOVF    r0x01, W
03EC 6EE5      01988         MOVWF   POSTDEC1
03EE 5000      01989         MOVF    r0x00, W
03F0 6EE5      01990         MOVWF   POSTDEC1
03F2 EC00 F000 01991         CALL    _ConvertTime
03F6 0E05      01992         MOVLW   0x05
03F8 26E1      01993         ADDWF   FSR1L, F
               01994 ;       .line   208; test.c     sprintf(LCDPrint,"Set Hours       [%s]:%s:%s",h,m,s);
03FA 0E00      01995         MOVLW   HIGH(_s)
03FC 6E00      01996         MOVWF   r0x01
03FE 0E00      01997         MOVLW   LOW(_s)
0400 6E00      01998         MOVWF   r0x00
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0402 0E80      01999         MOVLW   0x80
0404 6E00      02000         MOVWF   r0x02
0406 0E00      02001         MOVLW   HIGH(_m)
0408 6E00      02002         MOVWF   r0x04
040A 0E00      02003         MOVLW   LOW(_m)
040C 6E00      02004         MOVWF   r0x03
040E 0E80      02005         MOVLW   0x80
0410 6E00      02006         MOVWF   r0x05
0412 0E00      02007         MOVLW   HIGH(_h)
0414 6E00      02008         MOVWF   r0x07
0416 0E00      02009         MOVLW   LOW(_h)
0418 6E00      02010         MOVWF   r0x06
041A 0E80      02011         MOVLW   0x80
041C 6E00      02012         MOVWF   r0x08
041E 0E00      02013         MOVLW   HIGH(_LCDPrint)
0420 6E00      02014         MOVWF   r0x0a
0422 0E00      02015         MOVLW   LOW(_LCDPrint)
0424 6E00      02016         MOVWF   r0x09
0426 0E80      02017         MOVLW   0x80
0428 6E00      02018         MOVWF   r0x0b
042A 5000      02019         MOVF    r0x02, W
042C 6EE5      02020         MOVWF   POSTDEC1
042E 5000      02021         MOVF    r0x01, W
0430 6EE5      02022         MOVWF   POSTDEC1
0432 5000      02023         MOVF    r0x00, W
0434 6EE5      02024         MOVWF   POSTDEC1
0436 5000      02025         MOVF    r0x05, W
0438 6EE5      02026         MOVWF   POSTDEC1
043A 5000      02027         MOVF    r0x04, W
043C 6EE5      02028         MOVWF   POSTDEC1
043E 5000      02029         MOVF    r0x03, W
0440 6EE5      02030         MOVWF   POSTDEC1
0442 5000      02031         MOVF    r0x08, W
0444 6EE5      02032         MOVWF   POSTDEC1
0446 5000      02033         MOVF    r0x07, W
0448 6EE5      02034         MOVWF   POSTDEC1
044A 5000      02035         MOVF    r0x06, W
044C 6EE5      02036         MOVWF   POSTDEC1
044E 0E00      02037         MOVLW   UPPER(__str_5)
0450 6EE5      02038         MOVWF   POSTDEC1
0452 0E00      02039         MOVLW   HIGH(__str_5)
0454 6EE5      02040         MOVWF   POSTDEC1
0456 0E00      02041         MOVLW   LOW(__str_5)
0458 6EE5      02042         MOVWF   POSTDEC1
045A 5000      02043         MOVF    r0x0b, W
045C 6EE5      02044         MOVWF   POSTDEC1
045E 5000      02045         MOVF    r0x0a, W
0460 6EE5      02046         MOVWF   POSTDEC1
0462 5000      02047         MOVF    r0x09, W
0464 6EE5      02048         MOVWF   POSTDEC1
0466 EC00 F000 02049         CALL    _sprintf
046A 0E0F      02050         MOVLW   0x0f
046C 26E1      02051         ADDWF   FSR1L, F
               02052 ;       .line   209; test.c     break;
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
046E D000      02053         BRA     _00179_DS_
0470 02054 _00175_DS_:
               02055 ;       .line   211; test.c     sprintf(LCDPrint, "      MENU      Set Alarmclock?");
0470 0E00      02056         MOVLW   HIGH(_LCDPrint)
0472 6E00      02057         MOVWF   r0x01
0474 0E00      02058         MOVLW   LOW(_LCDPrint)
0476 6E00      02059         MOVWF   r0x00
0478 0E80      02060         MOVLW   0x80
047A 6E00      02061         MOVWF   r0x02
047C 0E00      02062         MOVLW   UPPER(__str_6)
047E 6EE5      02063         MOVWF   POSTDEC1
0480 0E00      02064         MOVLW   HIGH(__str_6)
0482 6EE5      02065         MOVWF   POSTDEC1
0484 0E00      02066         MOVLW   LOW(__str_6)
0486 6EE5      02067         MOVWF   POSTDEC1
0488 5000      02068         MOVF    r0x02, W
048A 6EE5      02069         MOVWF   POSTDEC1
048C 5000      02070         MOVF    r0x01, W
048E 6EE5      02071         MOVWF   POSTDEC1
0490 5000      02072         MOVF    r0x00, W
0492 6EE5      02073         MOVWF   POSTDEC1
0494 EC00 F000 02074         CALL    _sprintf
0498 0E06      02075         MOVLW   0x06
049A 26E1      02076         ADDWF   FSR1L, F
               02077 ;       .line   212; test.c     break;
049C D000      02078         BRA     _00179_DS_
049E 02079 _00176_DS_:
               02080 ;       .line   214; test.c     ConvertTime(alarmHours, h);
049E C000 F000 02081         MOVFF   _alarmHours, r0x00
04A2 C000 F000 02082         MOVFF   (_alarmHours + 1), r0x01
04A6 0E00      02083         MOVLW   HIGH(_h)
04A8 6E00      02084         MOVWF   r0x03
04AA 0E00      02085         MOVLW   LOW(_h)
04AC 6E00      02086         MOVWF   r0x02
04AE 0E80      02087         MOVLW   0x80
04B0 6E00      02088         MOVWF   r0x04
04B2 5000      02089         MOVF    r0x04, W
04B4 6EE5      02090         MOVWF   POSTDEC1
04B6 5000      02091         MOVF    r0x03, W
04B8 6EE5      02092         MOVWF   POSTDEC1
04BA 5000      02093         MOVF    r0x02, W
04BC 6EE5      02094         MOVWF   POSTDEC1
04BE 5000      02095         MOVF    r0x01, W
04C0 6EE5      02096         MOVWF   POSTDEC1
04C2 5000      02097         MOVF    r0x00, W
04C4 6EE5      02098         MOVWF   POSTDEC1
04C6 EC00 F000 02099         CALL    _ConvertTime
04CA 0E05      02100         MOVLW   0x05
04CC 26E1      02101         ADDWF   FSR1L, F
               02102 ;       .line   215; test.c     ConvertTime(alarmMinutes, m);
04CE C000 F000 02103         MOVFF   _alarmMinutes, r0x00
04D2 C000 F000 02104         MOVFF   (_alarmMinutes + 1), r0x01
04D6 0E00      02105         MOVLW   HIGH(_m)
04D8 6E00      02106         MOVWF   r0x03
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
04DA 0E00      02107         MOVLW   LOW(_m)
04DC 6E00      02108         MOVWF   r0x02
04DE 0E80      02109         MOVLW   0x80
04E0 6E00      02110         MOVWF   r0x04
04E2 5000      02111         MOVF    r0x04, W
04E4 6EE5      02112         MOVWF   POSTDEC1
04E6 5000      02113         MOVF    r0x03, W
04E8 6EE5      02114         MOVWF   POSTDEC1
04EA 5000      02115         MOVF    r0x02, W
04EC 6EE5      02116         MOVWF   POSTDEC1
04EE 5000      02117         MOVF    r0x01, W
04F0 6EE5      02118         MOVWF   POSTDEC1
04F2 5000      02119         MOVF    r0x00, W
04F4 6EE5      02120         MOVWF   POSTDEC1
04F6 EC00 F000 02121         CALL    _ConvertTime
04FA 0E05      02122         MOVLW   0x05
04FC 26E1      02123         ADDWF   FSR1L, F
               02124 ;       .line   216; test.c     sprintf(LCDPrint,"Set Alarm Min    %s:[%s]",h,m);
04FE 0E00      02125         MOVLW   HIGH(_m)
0500 6E00      02126         MOVWF   r0x01
0502 0E00      02127         MOVLW   LOW(_m)
0504 6E00      02128         MOVWF   r0x00
0506 0E80      02129         MOVLW   0x80
0508 6E00      02130         MOVWF   r0x02
050A 0E00      02131         MOVLW   HIGH(_h)
050C 6E00      02132         MOVWF   r0x04
050E 0E00      02133         MOVLW   LOW(_h)
0510 6E00      02134         MOVWF   r0x03
0512 0E80      02135         MOVLW   0x80
0514 6E00      02136         MOVWF   r0x05
0516 0E00      02137         MOVLW   HIGH(_LCDPrint)
0518 6E00      02138         MOVWF   r0x07
051A 0E00      02139         MOVLW   LOW(_LCDPrint)
051C 6E00      02140         MOVWF   r0x06
051E 0E80      02141         MOVLW   0x80
0520 6E00      02142         MOVWF   r0x08
0522 5000      02143         MOVF    r0x02, W
0524 6EE5      02144         MOVWF   POSTDEC1
0526 5000      02145         MOVF    r0x01, W
0528 6EE5      02146         MOVWF   POSTDEC1
052A 5000      02147         MOVF    r0x00, W
052C 6EE5      02148         MOVWF   POSTDEC1
052E 5000      02149         MOVF    r0x05, W
0530 6EE5      02150         MOVWF   POSTDEC1
0532 5000      02151         MOVF    r0x04, W
0534 6EE5      02152         MOVWF   POSTDEC1
0536 5000      02153         MOVF    r0x03, W
0538 6EE5      02154         MOVWF   POSTDEC1
053A 0E00      02155         MOVLW   UPPER(__str_7)
053C 6EE5      02156         MOVWF   POSTDEC1
053E 0E00      02157         MOVLW   HIGH(__str_7)
0540 6EE5      02158         MOVWF   POSTDEC1
0542 0E00      02159         MOVLW   LOW(__str_7)
0544 6EE5      02160         MOVWF   POSTDEC1
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0546 5000      02161         MOVF    r0x08, W
0548 6EE5      02162         MOVWF   POSTDEC1
054A 5000      02163         MOVF    r0x07, W
054C 6EE5      02164         MOVWF   POSTDEC1
054E 5000      02165         MOVF    r0x06, W
0550 6EE5      02166         MOVWF   POSTDEC1
0552 EC00 F000 02167         CALL    _sprintf
0556 0E0C      02168         MOVLW   0x0c
0558 26E1      02169         ADDWF   FSR1L, F
               02170 ;       .line   217; test.c     break;
055A D000      02171         BRA     _00179_DS_
055C 02172 _00177_DS_:
               02173 ;       .line   219; test.c     ConvertTime(alarmHours, h);
055C C000 F000 02174         MOVFF   _alarmHours, r0x00
0560 C000 F000 02175         MOVFF   (_alarmHours + 1), r0x01
0564 0E00      02176         MOVLW   HIGH(_h)
0566 6E00      02177         MOVWF   r0x03
0568 0E00      02178         MOVLW   LOW(_h)
056A 6E00      02179         MOVWF   r0x02
056C 0E80      02180         MOVLW   0x80
056E 6E00      02181         MOVWF   r0x04
0570 5000      02182         MOVF    r0x04, W
0572 6EE5      02183         MOVWF   POSTDEC1
0574 5000      02184         MOVF    r0x03, W
0576 6EE5      02185         MOVWF   POSTDEC1
0578 5000      02186         MOVF    r0x02, W
057A 6EE5      02187         MOVWF   POSTDEC1
057C 5000      02188         MOVF    r0x01, W
057E 6EE5      02189         MOVWF   POSTDEC1
0580 5000      02190         MOVF    r0x00, W
0582 6EE5      02191         MOVWF   POSTDEC1
0584 EC00 F000 02192         CALL    _ConvertTime
0588 0E05      02193         MOVLW   0x05
058A 26E1      02194         ADDWF   FSR1L, F
               02195 ;       .line   220; test.c     ConvertTime(alarmMinutes, m);
058C C000 F000 02196         MOVFF   _alarmMinutes, r0x00
0590 C000 F000 02197         MOVFF   (_alarmMinutes + 1), r0x01
0594 0E00      02198         MOVLW   HIGH(_m)
0596 6E00      02199         MOVWF   r0x03
0598 0E00      02200         MOVLW   LOW(_m)
059A 6E00      02201         MOVWF   r0x02
059C 0E80      02202         MOVLW   0x80
059E 6E00      02203         MOVWF   r0x04
05A0 5000      02204         MOVF    r0x04, W
05A2 6EE5      02205         MOVWF   POSTDEC1
05A4 5000      02206         MOVF    r0x03, W
05A6 6EE5      02207         MOVWF   POSTDEC1
05A8 5000      02208         MOVF    r0x02, W
05AA 6EE5      02209         MOVWF   POSTDEC1
05AC 5000      02210         MOVF    r0x01, W
05AE 6EE5      02211         MOVWF   POSTDEC1
05B0 5000      02212         MOVF    r0x00, W
05B2 6EE5      02213         MOVWF   POSTDEC1
05B4 EC00 F000 02214         CALL    _ConvertTime
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
05B8 0E05      02215         MOVLW   0x05
05BA 26E1      02216         ADDWF   FSR1L, F
               02217 ;       .line   221; test.c     sprintf(LCDPrint,"Set Alarm Hours  [%s]:%s",h,m);
05BC 0E00      02218         MOVLW   HIGH(_m)
05BE 6E00      02219         MOVWF   r0x01
05C0 0E00      02220         MOVLW   LOW(_m)
05C2 6E00      02221         MOVWF   r0x00
05C4 0E80      02222         MOVLW   0x80
05C6 6E00      02223         MOVWF   r0x02
05C8 0E00      02224         MOVLW   HIGH(_h)
05CA 6E00      02225         MOVWF   r0x04
05CC 0E00      02226         MOVLW   LOW(_h)
05CE 6E00      02227         MOVWF   r0x03
05D0 0E80      02228         MOVLW   0x80
05D2 6E00      02229         MOVWF   r0x05
05D4 0E00      02230         MOVLW   HIGH(_LCDPrint)
05D6 6E00      02231         MOVWF   r0x07
05D8 0E00      02232         MOVLW   LOW(_LCDPrint)
05DA 6E00      02233         MOVWF   r0x06
05DC 0E80      02234         MOVLW   0x80
05DE 6E00      02235         MOVWF   r0x08
05E0 5000      02236         MOVF    r0x02, W
05E2 6EE5      02237         MOVWF   POSTDEC1
05E4 5000      02238         MOVF    r0x01, W
05E6 6EE5      02239         MOVWF   POSTDEC1
05E8 5000      02240         MOVF    r0x00, W
05EA 6EE5      02241         MOVWF   POSTDEC1
05EC 5000      02242         MOVF    r0x05, W
05EE 6EE5      02243         MOVWF   POSTDEC1
05F0 5000      02244         MOVF    r0x04, W
05F2 6EE5      02245         MOVWF   POSTDEC1
05F4 5000      02246         MOVF    r0x03, W
05F6 6EE5      02247         MOVWF   POSTDEC1
05F8 0E00      02248         MOVLW   UPPER(__str_8)
05FA 6EE5      02249         MOVWF   POSTDEC1
05FC 0E00      02250         MOVLW   HIGH(__str_8)
05FE 6EE5      02251         MOVWF   POSTDEC1
0600 0E00      02252         MOVLW   LOW(__str_8)
0602 6EE5      02253         MOVWF   POSTDEC1
0604 5000      02254         MOVF    r0x08, W
0606 6EE5      02255         MOVWF   POSTDEC1
0608 5000      02256         MOVF    r0x07, W
060A 6EE5      02257         MOVWF   POSTDEC1
060C 5000      02258         MOVF    r0x06, W
060E 6EE5      02259         MOVWF   POSTDEC1
0610 EC00 F000 02260         CALL    _sprintf
0614 0E0C      02261         MOVLW   0x0c
0616 26E1      02262         ADDWF   FSR1L, F
               02263 ;       .line   222; test.c     break;
0618 D000      02264         BRA     _00179_DS_
061A 02265 _00178_DS_:
               02266 ;       .line   224; test.c     ConvertTime(hours, h);
061A C000 F000 02267         MOVFF   _hours, r0x00
061E C000 F000 02268         MOVFF   (_hours + 1), r0x01
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0622 0E00      02269         MOVLW   HIGH(_h)
0624 6E00      02270         MOVWF   r0x03
0626 0E00      02271         MOVLW   LOW(_h)
0628 6E00      02272         MOVWF   r0x02
062A 0E80      02273         MOVLW   0x80
062C 6E00      02274         MOVWF   r0x04
062E 5000      02275         MOVF    r0x04, W
0630 6EE5      02276         MOVWF   POSTDEC1
0632 5000      02277         MOVF    r0x03, W
0634 6EE5      02278         MOVWF   POSTDEC1
0636 5000      02279         MOVF    r0x02, W
0638 6EE5      02280         MOVWF   POSTDEC1
063A 5000      02281         MOVF    r0x01, W
063C 6EE5      02282         MOVWF   POSTDEC1
063E 5000      02283         MOVF    r0x00, W
0640 6EE5      02284         MOVWF   POSTDEC1
0642 EC00 F000 02285         CALL    _ConvertTime
0646 0E05      02286         MOVLW   0x05
0648 26E1      02287         ADDWF   FSR1L, F
               02288 ;       .line   225; test.c     ConvertTime(minutes, m);
064A C000 F000 02289         MOVFF   _minutes, r0x00
064E C000 F000 02290         MOVFF   (_minutes + 1), r0x01
0652 0E00      02291         MOVLW   HIGH(_m)
0654 6E00      02292         MOVWF   r0x03
0656 0E00      02293         MOVLW   LOW(_m)
0658 6E00      02294         MOVWF   r0x02
065A 0E80      02295         MOVLW   0x80
065C 6E00      02296         MOVWF   r0x04
065E 5000      02297         MOVF    r0x04, W
0660 6EE5      02298         MOVWF   POSTDEC1
0662 5000      02299         MOVF    r0x03, W
0664 6EE5      02300         MOVWF   POSTDEC1
0666 5000      02301         MOVF    r0x02, W
0668 6EE5      02302         MOVWF   POSTDEC1
066A 5000      02303         MOVF    r0x01, W
066C 6EE5      02304         MOVWF   POSTDEC1
066E 5000      02305         MOVF    r0x00, W
0670 6EE5      02306         MOVWF   POSTDEC1
0672 EC00 F000 02307         CALL    _ConvertTime
0676 0E05      02308         MOVLW   0x05
0678 26E1      02309         ADDWF   FSR1L, F
               02310 ;       .line   226; test.c     ConvertTime(seconds, s);
067A C000 F000 02311         MOVFF   _seconds, r0x00
067E C000 F000 02312         MOVFF   (_seconds + 1), r0x01
0682 0E00      02313         MOVLW   HIGH(_s)
0684 6E00      02314         MOVWF   r0x03
0686 0E00      02315         MOVLW   LOW(_s)
0688 6E00      02316         MOVWF   r0x02
068A 0E80      02317         MOVLW   0x80
068C 6E00      02318         MOVWF   r0x04
068E 5000      02319         MOVF    r0x04, W
0690 6EE5      02320         MOVWF   POSTDEC1
0692 5000      02321         MOVF    r0x03, W
0694 6EE5      02322         MOVWF   POSTDEC1
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0696 5000      02323         MOVF    r0x02, W
0698 6EE5      02324         MOVWF   POSTDEC1
069A 5000      02325         MOVF    r0x01, W
069C 6EE5      02326         MOVWF   POSTDEC1
069E 5000      02327         MOVF    r0x00, W
06A0 6EE5      02328         MOVWF   POSTDEC1
06A2 EC00 F000 02329         CALL    _ConvertTime
06A6 0E05      02330         MOVLW   0x05
06A8 26E1      02331         ADDWF   FSR1L, F
               02332 ;       .line   228; test.c     sprintf(LCDPrint, "   It's Time !      %s:%s:%s",h,m,s);
06AA 0E00      02333         MOVLW   HIGH(_s)
06AC 6E00      02334         MOVWF   r0x01
06AE 0E00      02335         MOVLW   LOW(_s)
06B0 6E00      02336         MOVWF   r0x00
06B2 0E80      02337         MOVLW   0x80
06B4 6E00      02338         MOVWF   r0x02
06B6 0E00      02339         MOVLW   HIGH(_m)
06B8 6E00      02340         MOVWF   r0x04
06BA 0E00      02341         MOVLW   LOW(_m)
06BC 6E00      02342         MOVWF   r0x03
06BE 0E80      02343         MOVLW   0x80
06C0 6E00      02344         MOVWF   r0x05
06C2 0E00      02345         MOVLW   HIGH(_h)
06C4 6E00      02346         MOVWF   r0x07
06C6 0E00      02347         MOVLW   LOW(_h)
06C8 6E00      02348         MOVWF   r0x06
06CA 0E80      02349         MOVLW   0x80
06CC 6E00      02350         MOVWF   r0x08
06CE 0E00      02351         MOVLW   HIGH(_LCDPrint)
06D0 6E00      02352         MOVWF   r0x0a
06D2 0E00      02353         MOVLW   LOW(_LCDPrint)
06D4 6E00      02354         MOVWF   r0x09
06D6 0E80      02355         MOVLW   0x80
06D8 6E00      02356         MOVWF   r0x0b
06DA 5000      02357         MOVF    r0x02, W
06DC 6EE5      02358         MOVWF   POSTDEC1
06DE 5000      02359         MOVF    r0x01, W
06E0 6EE5      02360         MOVWF   POSTDEC1
06E2 5000      02361         MOVF    r0x00, W
06E4 6EE5      02362         MOVWF   POSTDEC1
06E6 5000      02363         MOVF    r0x05, W
06E8 6EE5      02364         MOVWF   POSTDEC1
06EA 5000      02365         MOVF    r0x04, W
06EC 6EE5      02366         MOVWF   POSTDEC1
06EE 5000      02367         MOVF    r0x03, W
06F0 6EE5      02368         MOVWF   POSTDEC1
06F2 5000      02369         MOVF    r0x08, W
06F4 6EE5      02370         MOVWF   POSTDEC1
06F6 5000      02371         MOVF    r0x07, W
06F8 6EE5      02372         MOVWF   POSTDEC1
06FA 5000      02373         MOVF    r0x06, W
06FC 6EE5      02374         MOVWF   POSTDEC1
06FE 0E00      02375         MOVLW   UPPER(__str_9)
0700 6EE5      02376         MOVWF   POSTDEC1
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0702 0E00      02377         MOVLW   HIGH(__str_9)
0704 6EE5      02378         MOVWF   POSTDEC1
0706 0E00      02379         MOVLW   LOW(__str_9)
0708 6EE5      02380         MOVWF   POSTDEC1
070A 5000      02381         MOVF    r0x0b, W
070C 6EE5      02382         MOVWF   POSTDEC1
070E 5000      02383         MOVF    r0x0a, W
0710 6EE5      02384         MOVWF   POSTDEC1
0712 5000      02385         MOVF    r0x09, W
0714 6EE5      02386         MOVWF   POSTDEC1
0716 EC00 F000 02387         CALL    _sprintf
071A 0E0F      02388         MOVLW   0x0f
071C 26E1      02389         ADDWF   FSR1L, F
071E 02390 _00179_DS_:
               02391 ;       .line   231; test.c     DisplayString(0, LCDPrint);
071E 0E00      02392         MOVLW   HIGH(_LCDPrint)
0720 6E00      02393         MOVWF   r0x01
0722 0E00      02394         MOVLW   LOW(_LCDPrint)
0724 6E00      02395         MOVWF   r0x00
0726 0E80      02396         MOVLW   0x80
0728 6E00      02397         MOVWF   r0x02
072A 5000      02398         MOVF    r0x02, W
072C 6EE5      02399         MOVWF   POSTDEC1
072E 5000      02400         MOVF    r0x01, W
0730 6EE5      02401         MOVWF   POSTDEC1
0732 5000      02402         MOVF    r0x00, W
0734 6EE5      02403         MOVWF   POSTDEC1
0736 0E00      02404         MOVLW   0x00
0738 6EE5      02405         MOVWF   POSTDEC1
073A EC00 F000 02406         CALL    _DisplayString
073E 0E04      02407         MOVLW   0x04
0740 26E1      02408         ADDWF   FSR1L, F
0742 CFE4 F000 02409         MOVFF   PREINC1, r0x0e
0746 CFE4 F000 02410         MOVFF   PREINC1, r0x0d
074A CFE4 F000 02411         MOVFF   PREINC1, r0x0c
074E CFE4 F000 02412         MOVFF   PREINC1, r0x0b
0752 CFE4 F000 02413         MOVFF   PREINC1, r0x0a
0756 CFE4 F000 02414         MOVFF   PREINC1, r0x09
075A CFE4 F000 02415         MOVFF   PREINC1, r0x08
075E CFE4 F000 02416         MOVFF   PREINC1, r0x07
0762 CFE4 F000 02417         MOVFF   PREINC1, r0x06
0766 CFE4 F000 02418         MOVFF   PREINC1, r0x05
076A CFE4 F000 02419         MOVFF   PREINC1, r0x04
076E CFE4 F000 02420         MOVFF   PREINC1, r0x03
0772 CFE4 F000 02421         MOVFF   PREINC1, r0x02
0776 CFE4 F000 02422         MOVFF   PREINC1, r0x01
077A CFE4 F000 02423         MOVFF   PREINC1, r0x00
077E CFE4 FFD9 02424         MOVFF   PREINC1, FSR2L
0782 0012      02425         RETURN  
               02426 
               02427 ; ; Starting pCode block
               02428 S_test__IsItTime        code
0000 02429 _IsItTime:
               02430 ;       .line   169; test.c     void IsItTime(){
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0000 CFD9 FFE5 02431         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 02432         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 02433         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 02434         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 02435         MOVFF   r0x02, POSTDEC1
0014 C000 FFE5 02436         MOVFF   r0x03, POSTDEC1
               02437 ;       .line   171; test.c     if(alarmStatus & (hours == alarmHours) & (minutes == alarmMinutes)){
0018 6A00      02438         CLRF    r0x00
001A 0000      02439         BANKSEL _hours
001C 5100      02440         MOVF    _hours, W, B
001E 0000      02441         BANKSEL _alarmHours
0020 1900      02442         XORWF   _alarmHours, W, B
0022 E100      02443         BNZ     _00160_DS_
0024 0000      02444         BANKSEL (_hours + 1)
0026 5100      02445         MOVF    (_hours + 1), W, B
0028 0000      02446         BANKSEL (_alarmHours + 1)
002A 1900      02447         XORWF   (_alarmHours + 1), W, B
002C E100      02448         BNZ     _00160_DS_
002E 2A00      02449         INCF    r0x00, F
0030 02450 _00160_DS_:
0030 6A00      02451         CLRF    r0x01
0032 BE00      02452         BTFSC   r0x00, 7
0034 6800      02453         SETF    r0x01
0036 0000      02454         BANKSEL _alarmStatus
0038 5100      02455         MOVF    _alarmStatus, W, B
003A 1600      02456         ANDWF   r0x00, F
003C 0000      02457         BANKSEL (_alarmStatus + 1)
003E 5100      02458         MOVF    (_alarmStatus + 1), W, B
0040 1600      02459         ANDWF   r0x01, F
0042 6A00      02460         CLRF    r0x02
0044 0000      02461         BANKSEL _minutes
0046 5100      02462         MOVF    _minutes, W, B
0048 0000      02463         BANKSEL _alarmMinutes
004A 1900      02464         XORWF   _alarmMinutes, W, B
004C E100      02465         BNZ     _00163_DS_
004E 0000      02466         BANKSEL (_minutes + 1)
0050 5100      02467         MOVF    (_minutes + 1), W, B
0052 0000      02468         BANKSEL (_alarmMinutes + 1)
0054 1900      02469         XORWF   (_alarmMinutes + 1), W, B
0056 E100      02470         BNZ     _00163_DS_
0058 2A00      02471         INCF    r0x02, F
005A 02472 _00163_DS_:
005A 6A00      02473         CLRF    r0x03
005C BE00      02474         BTFSC   r0x02, 7
005E 6800      02475         SETF    r0x03
0060 5000      02476         MOVF    r0x02, W
0062 1600      02477         ANDWF   r0x00, F
0064 5000      02478         MOVF    r0x03, W
0066 1600      02479         ANDWF   r0x01, F
0068 5000      02480         MOVF    r0x00, W
006A 1000      02481         IORWF   r0x01, W
006C E000      02482         BZ      _00156_DS_
               02483 ;       .line   172; test.c     stateMenu = RINGING;
006E 0E07      02484         MOVLW   0x07
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0070 0000      02485         BANKSEL _stateMenu
0072 6F00      02486         MOVWF   _stateMenu, B
0074 0000      02487         BANKSEL (_stateMenu + 1)
0076 6B00      02488         CLRF    (_stateMenu + 1), B
0078 02489 _00156_DS_:
0078 CFE4 F000 02490         MOVFF   PREINC1, r0x03
007C CFE4 F000 02491         MOVFF   PREINC1, r0x02
0080 CFE4 F000 02492         MOVFF   PREINC1, r0x01
0084 CFE4 F000 02493         MOVFF   PREINC1, r0x00
0088 CFE4 FFD9 02494         MOVFF   PREINC1, FSR2L
008C 0012      02495         RETURN  
               02496 
               02497 ; ; Starting pCode block
               02498 S_test__UpdateTime      code
0000 02499 _UpdateTime:
               02500 ;       .line   154; test.c     void UpdateTime(){
0000 CFD9 FFE5 02501         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 02502         MOVFF   FSR1L, FSR2L
               02503 ;       .line   155; test.c     if(seconds>=60)
0008 0E00      02504         MOVLW   0x00
000A 0000      02505         BANKSEL (_seconds + 1)
000C 5D00      02506         SUBWF   (_seconds + 1), W, B
000E E100      02507         BNZ     _00146_DS_
0010 0E3C      02508         MOVLW   0x3c
0012 0000      02509         BANKSEL _seconds
0014 5D00      02510         SUBWF   _seconds, W, B
0016 02511 _00146_DS_:
0016 E300      02512         BNC     _00136_DS_
               02513 ;       .line   157; test.c     seconds = seconds - 60; // si une interruption a empêché l'update pendant + d'une seconde.
0018 0EC4      02514         MOVLW   0xc4
001A 0000      02515         BANKSEL _seconds
001C 2700      02516         ADDWF   _seconds, F, B
001E E200      02517         BC      _60285_DS_
0020 0000      02518         BANKSEL (_seconds + 1)
0022 0700      02519         DECF    (_seconds + 1), F, B
0024 02520 _60285_DS_:
0024 0000      02521         BANKSEL _minutes
               02522 ;       .line   158; test.c     minutes++;
0026 2B00      02523         INCF    _minutes, F, B
0028 E300      02524         BNC     _70286_DS_
002A 0000      02525         BANKSEL (_minutes + 1)
002C 2B00      02526         INCF    (_minutes + 1), F, B
002E 02527 _70286_DS_:
002E 02528 _00136_DS_:
002E 0000      02529         BANKSEL _minutes
               02530 ;       .line   160; test.c     if(minutes == 60){
0030 5100      02531         MOVF    _minutes, W, B
0032 0A3C      02532         XORLW   0x3c
0034 E100      02533         BNZ     _00147_DS_
0036 0000      02534         BANKSEL (_minutes + 1)
0038 5100      02535         MOVF    (_minutes + 1), W, B
003A E000      02536         BZ      _00148_DS_
003C 02537 _00147_DS_:
003C D000      02538         BRA     _00138_DS_
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
003E 02539 _00148_DS_:
003E 0000      02540         BANKSEL _minutes
               02541 ;       .line   161; test.c     minutes = 0;
0040 6B00      02542         CLRF    _minutes, B
0042 0000      02543         BANKSEL (_minutes + 1)
0044 6B00      02544         CLRF    (_minutes + 1), B
0046 0000      02545         BANKSEL _hours
               02546 ;       .line   162; test.c     hours++;
0048 2B00      02547         INCF    _hours, F, B
004A E300      02548         BNC     _80287_DS_
004C 0000      02549         BANKSEL (_hours + 1)
004E 2B00      02550         INCF    (_hours + 1), F, B
0050 02551 _80287_DS_:
0050 02552 _00138_DS_:
               02553 ;       .line   164; test.c     if(hours > 23){
0050 0E00      02554         MOVLW   0x00
0052 0000      02555         BANKSEL (_hours + 1)
0054 5D00      02556         SUBWF   (_hours + 1), W, B
0056 E100      02557         BNZ     _00149_DS_
0058 0E18      02558         MOVLW   0x18
005A 0000      02559         BANKSEL _hours
005C 5D00      02560         SUBWF   _hours, W, B
005E 02561 _00149_DS_:
005E E300      02562         BNC     _00141_DS_
0060 0000      02563         BANKSEL _hours
               02564 ;       .line   165; test.c     hours = 0;
0062 6B00      02565         CLRF    _hours, B
0064 0000      02566         BANKSEL (_hours + 1)
0066 6B00      02567         CLRF    (_hours + 1), B
0068 02568 _00141_DS_:
0068 CFE4 FFD9 02569         MOVFF   PREINC1, FSR2L
006C 0012      02570         RETURN  
               02571 
               02572 ; ; Starting pCode block
               02573 S_test__ConfigLed       code
0000 02574 _ConfigLed:
               02575 ;       .line   140; test.c     void ConfigLed(){
0000 CFD9 FFE5 02576         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 02577         MOVFF   FSR1L, FSR2L
               02578 ;       .line   142; test.c     LED0_TRIS = 0;
0008 9000      02579         BCF     _TRISJbits, 0
               02580 ;       .line   143; test.c     LED1_TRIS = 0;
000A 9200      02581         BCF     _TRISJbits, 1
               02582 ;       .line   144; test.c     LED2_TRIS = 0;
000C 9400      02583         BCF     _TRISJbits, 2
               02584 ;       .line   146; test.c     LED0_IO = 0;
000E 9000      02585         BCF     _LATJbits, 0
               02586 ;       .line   147; test.c     LED1_IO = 0;
0010 9200      02587         BCF     _LATJbits, 1
               02588 ;       .line   148; test.c     LED2_IO = 0;
0012 9400      02589         BCF     _LATJbits, 2
0014 CFE4 FFD9 02590         MOVFF   PREINC1, FSR2L
0018 0012      02591         RETURN  
               02592 
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02593 ; ; Starting pCode block
               02594 S_test__ConfigButtons   code
0000 02595 _ConfigButtons:
               02596 ;       .line   128; test.c     void ConfigButtons(){
0000 CFD9 FFE5 02597         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 02598         MOVFF   FSR1L, FSR2L
               02599 ;       .line   131; test.c     INTCON2bits.INTEDG1 = 0; // Interrupt on falling edge
0008 9A00      02600         BCF     _INTCON2bits, 5
               02601 ;       .line   132; test.c     INTCON2bits.INTEDG3 = 0; // Interrupt on falling edge
000A 9600      02602         BCF     _INTCON2bits, 3
               02603 ;       .line   133; test.c     INTCON3bits.INT3F = 0; // clear flag
000C 9400      02604         BCF     _INTCON3bits, 2
               02605 ;       .line   134; test.c     INTCON3bits.INT1F = 0; // clear flag    
000E 9000      02606         BCF     _INTCON3bits, 0
               02607 ;       .line   135; test.c     INTCON3bits.INT1E = 1; // Up button interrupt enable
0010 8600      02608         BSF     _INTCON3bits, 3
               02609 ;       .line   136; test.c     INTCON3bits.INT3E = 1; // Down button interrupt enable
0012 8A00      02610         BSF     _INTCON3bits, 5
0014 CFE4 FFD9 02611         MOVFF   PREINC1, FSR2L
0018 0012      02612         RETURN  
               02613 
               02614 ; ; Starting pCode block
               02615 S_test__ConfigTimer0    code
0000 02616 _ConfigTimer0:
               02617 ;       .line   96; test.c      void ConfigTimer0(void){
0000 CFD9 FFE5 02618         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 02619         MOVFF   FSR1L, FSR2L
               02620 ;       .line   98; test.c      INTCON2bits.TMR0IP = 1; // Priorité Haute
0008 8400      02621         BSF     _INTCON2bits, 2
               02622 ;       .line   99; test.c      INTCONbits.TMR0IE = 1;  // Activation interruption Timer 0
000A 8A00      02623         BSF     _INTCONbits, 5
               02624 ;       .line   100; test.c     INTCONbits.TMR0IF = 0; // clear timer0 flag
000C 9400      02625         BCF     _INTCONbits, 2
               02626 ;       .line   104; test.c     T0CONbits.T08BIT = 0;           
000E 9C00      02627         BCF     _T0CONbits, 6
               02628 ;       .line   106; test.c     T0CONbits.T0CS = 0;     
0010 9A00      02629         BCF     _T0CONbits, 5
               02630 ;       .line   112; test.c     T0CONbits.PSA = 0;
0012 9600      02631         BCF     _T0CONbits, 3
               02632 ;       .line   113; test.c     T0CONbits.T0PS0 = 1; // diviseur par 256 
0014 8000      02633         BSF     _T0CONbits, 0
               02634 ;       .line   114; test.c     T0CONbits.T0PS1 = 1;
0016 8200      02635         BSF     _T0CONbits, 1
               02636 ;       .line   115; test.c     T0CONbits.T0PS2 = 1;
0018 8400      02637         BSF     _T0CONbits, 2
               02638 ;       .line   117; test.c     TMR0H = 0xA0;
001A 0EA0      02639         MOVLW   0xa0
001C 6E00      02640         MOVWF   _TMR0H
               02641 ;       .line   118; test.c     TMR0L = 0xA2;
001E 0EA2      02642         MOVLW   0xa2
0020 6E00      02643         MOVWF   _TMR0L
               02644 ;       .line   120; test.c     T0CONbits.TMR0ON = 1;
0022 8E00      02645         BSF     _T0CONbits, 7
0024 CFE4 FFD9 02646         MOVFF   PREINC1, FSR2L
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0028 0012      02647         RETURN  
               02648 
               02649 ; ; Starting pCode block
002A 02650 __str_0:
002A 4E4F 0020 02651         DB      0x4f, 0x4e, 0x20, 0x00
               02652 ; ; Starting pCode block
002E 02653 __str_1:
002E 464F 0046 02654         DB      0x4f, 0x46, 0x46, 0x00
               02655 ; ; Starting pCode block
0032 02656 __str_2:
0032 2020 2020 02657         DB      0x20, 0x20, 0x20, 0x20, 0x25, 0x73, 0x3a, 0x25, 0x73, 0x3a, 0x25, 0x73
     7325 253A 
     3A73 7325 
003E 2020 2020 02658         DB      0x20, 0x20, 0x20, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x25, 0x73
     6C41 7261 
     206D 7325 
004A 0000      02659         DB      0x00
               02660 ; ; Starting pCode block
004C 02661 __str_3:
004C 2020 2020 02662         DB      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x4d, 0x45, 0x4e, 0x55, 0x20, 0x20
     2020 454D 
     554E 2020 
0058 2020 2020 02663         DB      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x53, 0x65, 0x74, 0x20, 0x74, 0x69
     2020 6553 
     2074 6974 
0064 656D 3F20 02664         DB      0x6d, 0x65, 0x20, 0x3f, 0x00
     0000      
               02665 ; ; Starting pCode block
006A 02666 __str_4:
006A 6553 2074 02667         DB      0x53, 0x65, 0x74, 0x20, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x20
     694D 756E 
     6574 2073 
0076 2020 2020 02668         DB      0x20, 0x20, 0x20, 0x20, 0x25, 0x73, 0x3a, 0x5b, 0x25, 0x73, 0x5d, 0x3a
     7325 5B3A 
     7325 3A5D 
0082 7325 0000 02669         DB      0x25, 0x73, 0x00
               02670 ; ; Starting pCode block
0086 02671 __str_5:
0086 6553 2074 02672         DB      0x53, 0x65, 0x74, 0x20, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x20, 0x20, 0x20
     6F48 7275 
     2073 2020 
0092 2020 2020 02673         DB      0x20, 0x20, 0x20, 0x20, 0x5b, 0x25, 0x73, 0x5d, 0x3a, 0x25, 0x73, 0x3a
     255B 5D73 
     253A 3A73 
009E 7325 0000 02674         DB      0x25, 0x73, 0x00
               02675 ; ; Starting pCode block
00A2 02676 __str_6:
00A2 2020 2020 02677         DB      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x4d, 0x45, 0x4e, 0x55, 0x20, 0x20
     2020 454D 
     554E 2020 
00AE 2020 2020 02678         DB      0x20, 0x20, 0x20, 0x20, 0x53, 0x65, 0x74, 0x20, 0x41, 0x6c, 0x61, 0x72
     6553 2074 
     6C41 7261 
00BA 636D 6F6C 02679         DB      0x6d, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x3f, 0x00
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     6B63 003F 
               02680 ; ; Starting pCode block
00C2 02681 __str_7:
00C2 6553 2074 02682         DB      0x53, 0x65, 0x74, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x4d, 0x69
     6C41 7261 
     206D 694D 
00CE 206E 2020 02683         DB      0x6e, 0x20, 0x20, 0x20, 0x20, 0x25, 0x73, 0x3a, 0x5b, 0x25, 0x73, 0x5d
     2520 3A73 
     255B 5D73 
00DA 0000      02684         DB      0x00
               02685 ; ; Starting pCode block
00DC 02686 __str_8:
00DC 6553 2074 02687         DB      0x53, 0x65, 0x74, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x48, 0x6f
     6C41 7261 
     206D 6F48 
00E8 7275 2073 02688         DB      0x75, 0x72, 0x73, 0x20, 0x20, 0x5b, 0x25, 0x73, 0x5d, 0x3a, 0x25, 0x73
     5B20 7325 
     3A5D 7325 
00F4 0000      02689         DB      0x00
               02690 ; ; Starting pCode block
00F6 02691 __str_9:
00F6 2020 4920 02692         DB      0x20, 0x20, 0x20, 0x49, 0x74, 0x27, 0x73, 0x20, 0x54, 0x69, 0x6d, 0x65
     2774 2073 
     6954 656D 
0102 2120 2020 02693         DB      0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x73, 0x3a, 0x25
     2020 2020 
     7325 253A 
010E 3A73 7325 02694         DB      0x73, 0x3a, 0x25, 0x73, 0x00
     0000      
               02695 ; ; Starting pCode block
0114 02696 __str_10:
0114 2530 0075 02697         DB      0x30, 0x25, 0x75, 0x00, 0x00
     0000      
               02698 ; ; Starting pCode block
011A 02699 __str_11:
011A 7525 0000 02700         DB      0x25, 0x75, 0x00, 0x00
               02701 
               02702 
               02703 ; Statistics:
               02704 ; code size:     4364 (0x110c) bytes ( 3.33%)
               02705 ;                2182 (0x0886) words
               02706 ; udata size:      64 (0x0040) bytes ( 1.67%)
               02707 ; access size:     22 (0x0016) bytes
               02708 
               02709 
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 52


SYMBOL TABLE
  LABEL                             VALUE 

BSR                               00000FE0
FSR0H                             00000FEA
FSR0L                             00000FE9
FSR1L                             00000FE1
FSR2L                             00000FD9
INDF0                             00000FEF
PCL                               00000FF9
PCLATH                            00000FFA
PCLATU                            00000FFB
PLUSW2                            00000FDB
POSTDEC1                          00000FE5
PREINC1                           00000FE4
PRODH                             00000FF4
PRODL                             00000FF3
STATUS                            00000FD8
WREG                              00000FE8
_00108_DS_                        0000004C
_00114_DS_                        00000066
_00115_DS_                        00000068
_00136_DS_                        0000002E
_00138_DS_                        00000050
_00141_DS_                        00000068
_00146_DS_                        00000016
_00147_DS_                        0000003C
_00148_DS_                        0000003E
_00149_DS_                        0000005E
_00156_DS_                        00000078
_00160_DS_                        00000030
_00163_DS_                        0000005A
_00168_DS_                        000000B0
_00170_DS_                        00000178
_00171_DS_                        000001A4
_00172_DS_                        00000234
_00173_DS_                        00000264
_00174_DS_                        0000036A
_00175_DS_                        00000470
_00176_DS_                        0000049E
_00177_DS_                        0000055C
_00178_DS_                        0000061A
_00179_DS_                        0000071E
_00184_DS_                        00000052
_00185_DS_                        00000090
_00196_DS_                        00000072
_00198_DS_                        0000009A
_00201_DS_                        00000046
_00207_DS_                        00000048
_00208_DS_                        000000B6
_00209_DS_                        000000D6
_00210_DS_                        000000E2
_00211_DS_                        000000EE
_00212_DS_                        000000FA
_00213_DS_                        00000106
_00214_DS_                        00000112
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 53


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_00215_DS_                        0000011E
_00216_DS_                        00000134
_00218_DS_                        00000136
_00219_DS_                        000001A4
_00220_DS_                        000001B0
_00221_DS_                        000001BC
_00222_DS_                        000001C8
_00223_DS_                        000001D2
_00224_DS_                        000001DC
_00225_DS_                        000001E8
_00226_DS_                        000001F2
_00227_DS_                        00000208
_00230_DS_                        0000020A
_00237_DS_                        0000005A
_00238_DS_                        00000096
_00241_DS_                        00000148
_00242_DS_                        00000184
_00253_DS_                        000000FC
_00254_DS_                        0000005C
_00257_DS_                        000000D4
_00264_DS_                        0000009A
_00265_DS_                        000000E4
_00273_DS_                        00000082
_00282_DS_                        000000CC
_00286_DS_                        00000134
_00289_DS_                        0000015E
_00293_DS_                        00000188
_00300_DS_                        00000152
_00301_DS_                        00000114
_10280_DS_                        00000048
_20281_DS_                        000000EC
_30282_DS_                        000000F8
_40283_DS_                        00000110
_50284_DS_                        0000011C
_60285_DS_                        00000024
_70286_DS_                        0000002E
_80287_DS_                        00000050
_ADCON0                           00000000
_ADCON0bits                       00000000
_ADCON1                           00000000
_ADCON1bits                       00000000
_ADCON2                           00000000
_ADCON2bits                       00000000
_ADRES                            00000000
_ADRESH                           00000000
_ADRESL                           00000000
_BAUDCON                          00000000
_BAUDCON1                         00000000
_BAUDCON1bits                     00000000
_BAUDCON2                         00000000
_BAUDCON2bits                     00000000
_BAUDCONbits                      00000000
_BAUDCTL                          00000000
_BAUDCTL1                         00000000
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 54


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_BAUDCTL1bits                     00000000
_BAUDCTL2                         00000000
_BAUDCTL2bits                     00000000
_BAUDCTLbits                      00000000
_BSR                              00000000
_CCP1CON                          00000000
_CCP1CONbits                      00000000
_CCP2CON                          00000000
_CCP2CONbits                      00000000
_CCP3CON                          00000000
_CCP3CONbits                      00000000
_CCP4CON                          00000000
_CCP4CONbits                      00000000
_CCP5CON                          00000000
_CCP5CONbits                      00000000
_CCPR1                            00000000
_CCPR1H                           00000000
_CCPR1L                           00000000
_CCPR2                            00000000
_CCPR2H                           00000000
_CCPR2L                           00000000
_CCPR3                            00000000
_CCPR3H                           00000000
_CCPR3L                           00000000
_CCPR4                            00000000
_CCPR4H                           00000000
_CCPR4L                           00000000
_CCPR5                            00000000
_CCPR5H                           00000000
_CCPR5L                           00000000
_CMCON                            00000000
_CMCONbits                        00000000
_CVRCON                           00000000
_CVRCONbits                       00000000
_ConfigButtons                    00000000
_ConfigLed                        00000000
_ConfigTimer0                     00000000
_ConvertTime                      00000000
_DDRA                             00000000
_DDRAbits                         00000000
_DDRB                             00000000
_DDRBbits                         00000000
_DDRC                             00000000
_DDRCbits                         00000000
_DDRD                             00000000
_DDRDbits                         00000000
_DDRE                             00000000
_DDREbits                         00000000
_DDRF                             00000000
_DDRFbits                         00000000
_DDRG                             00000000
_DDRGbits                         00000000
_DDRH                             00000000
_DDRHbits                         00000000
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 55


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_DDRJ                             00000000
_DDRJbits                         00000000
_DisplayString                    00000000
_DisplayWORD                      00000000
_DisplayWORD_WDigit_1_1           00000000
_EBSTCON                          00000000
_EBSTCONbits                      00000000
_EBSTCS                           00000000
_EBSTCSH                          00000000
_EBSTCSL                          00000000
_EBSTSD                           00000000
_ECCP1AS                          00000000
_ECCP1ASbits                      00000000
_ECCP1CON                         00000000
_ECCP1CONbits                     00000000
_ECCP1DEL                         00000000
_ECCP1DELbits                     00000000
_ECCP2AS                          00000000
_ECCP2ASbits                      00000000
_ECCP2CON                         00000000
_ECCP2CONbits                     00000000
_ECCP2DEL                         00000000
_ECCP2DELbits                     00000000
_ECCP3AS                          00000000
_ECCP3ASbits                      00000000
_ECCP3CON                         00000000
_ECCP3CONbits                     00000000
_ECCP3DEL                         00000000
_ECCP3DELbits                     00000000
_ECON1                            00000000
_ECON1bits                        00000000
_ECON2                            00000000
_ECON2bits                        00000000
_EDATA                            00000000
_EDATAbits                        00000000
_EDMACS                           00000000
_EDMACSH                          00000000
_EDMACSL                          00000000
_EDMADST                          00000000
_EDMADSTH                         00000000
_EDMADSTL                         00000000
_EDMAND                           00000000
_EDMANDH                          00000000
_EDMANDL                          00000000
_EDMAST                           00000000
_EDMASTH                          00000000
_EDMASTL                          00000000
_EECON1                           00000000
_EECON1bits                       00000000
_EECON2                           00000000
_EFLOCON                          00000000
_EFLOCONbits                      00000000
_EHT0                             00000000
_EHT1                             00000000
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 56


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_EHT2                             00000000
_EHT3                             00000000
_EHT4                             00000000
_EHT5                             00000000
_EHT6                             00000000
_EHT7                             00000000
_EIE                              00000000
_EIEbits                          00000000
_EIR                              00000000
_EIRbits                          00000000
_EPAUS                            00000000
_EPAUSH                           00000000
_EPAUSL                           00000000
_EPKTCNT                          00000000
_EPMCS                            00000000
_EPMCSH                           00000000
_EPMCSL                           00000000
_EPMM0                            00000000
_EPMM1                            00000000
_EPMM2                            00000000
_EPMM3                            00000000
_EPMM4                            00000000
_EPMM5                            00000000
_EPMM6                            00000000
_EPMM7                            00000000
_EPMO                             00000000
_EPMOH                            00000000
_EPMOL                            00000000
_ERDPT                            00000000
_ERDPTH                           00000000
_ERDPTL                           00000000
_ERXFCON                          00000000
_ERXFCONbits                      00000000
_ERXND                            00000000
_ERXNDH                           00000000
_ERXNDL                           00000000
_ERXRDPT                          00000000
_ERXRDPTH                         00000000
_ERXRDPTL                         00000000
_ERXST                            00000000
_ERXSTH                           00000000
_ERXSTL                           00000000
_ERXWRPT                          00000000
_ERXWRPTH                         00000000
_ERXWRPTL                         00000000
_ESTAT                            00000000
_ESTATbits                        00000000
_ETXND                            00000000
_ETXNDH                           00000000
_ETXNDL                           00000000
_ETXST                            00000000
_ETXSTH                           00000000
_ETXSTL                           00000000
_EWOLIE                           00000000
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 57


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_EWOLIEbits                       00000000
_EWOLIR                           00000000
_EWOLIRbits                       00000000
_EWRPT                            00000000
_EWRPTH                           00000000
_EWRPTL                           00000000
_FSR0H                            00000000
_FSR0L                            00000000
_FSR1H                            00000000
_FSR1L                            00000000
_FSR2H                            00000000
_FSR2L                            00000000
_HighPriorityInterrupt            00000000
_INDF0                            00000000
_INDF1                            00000000
_INDF2                            00000000
_INTCON                           00000000
_INTCON2                          00000000
_INTCON2bits                      00000000
_INTCON3                          00000000
_INTCON3bits                      00000000
_INTCONbits                       00000000
_IPR1                             00000000
_IPR1bits                         00000000
_IPR2                             00000000
_IPR2bits                         00000000
_IPR3                             00000000
_IPR3bits                         00000000
_IsItTime                         00000000
_LATA                             00000000
_LATAbits                         00000000
_LATB                             00000000
_LATBbits                         00000000
_LATC                             00000000
_LATCbits                         00000000
_LATD                             00000000
_LATDbits                         00000000
_LATE                             00000000
_LATEbits                         00000000
_LATF                             00000000
_LATFbits                         00000000
_LATG                             00000000
_LATGbits                         00000000
_LATH                             00000000
_LATHbits                         00000000
_LATJ                             00000000
_LATJbits                         00000000
_LCDInit                          00000000
_LCDPrint                         00000000
_LCDText                          00000000
_LCDUpdate                        00000000
_LowPriorityInterrupt             00000000
_MAADR1                           00000000
_MAADR2                           00000000
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 58


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_MAADR3                           00000000
_MAADR4                           00000000
_MAADR5                           00000000
_MAADR6                           00000000
_MABBIPG                          00000000
_MACLCON1                         00000000
_MACLCON1bits                     00000000
_MACLCON2                         00000000
_MACLCON2bits                     00000000
_MACON1                           00000000
_MACON1bits                       00000000
_MACON2                           00000000
_MACON2bits                       00000000
_MACON3                           00000000
_MACON3bits                       00000000
_MACON4                           00000000
_MACON4bits                       00000000
_MAIPG                            00000000
_MAIPGH                           00000000
_MAIPGL                           00000000
_MAMXFL                           00000000
_MAMXFLH                          00000000
_MAMXFLL                          00000000
_MEMCON                           00000000
_MEMCONbits                       00000000
_MICMD                            00000000
_MICMDbits                        00000000
_MICON                            00000000
_MICONbits                        00000000
_MIRD                             00000000
_MIRDH                            00000000
_MIRDL                            00000000
_MIREGADR                         00000000
_MISTAT                           00000000
_MISTATbits                       00000000
_MIWR                             00000000
_MIWRH                            00000000
_MIWRL                            00000000
_OSCCON                           00000000
_OSCCONbits                       00000000
_OSCTUNE                          00000000
_OSCTUNEbits                      00000000
_PC                               00000000
_PCL                              00000000
_PCLATH                           00000000
_PCLATU                           00000000
_PIE1                             00000000
_PIE1bits                         00000000
_PIE2                             00000000
_PIE2bits                         00000000
_PIE3                             00000000
_PIE3bits                         00000000
_PIR1                             00000000
_PIR1bits                         00000000
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 59


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_PIR2                             00000000
_PIR2bits                         00000000
_PIR3                             00000000
_PIR3bits                         00000000
_PLUSW0                           00000000
_PLUSW1                           00000000
_PLUSW2                           00000000
_PORTA                            00000000
_PORTAbits                        00000000
_PORTB                            00000000
_PORTBbits                        00000000
_PORTC                            00000000
_PORTCbits                        00000000
_PORTD                            00000000
_PORTDbits                        00000000
_PORTE                            00000000
_PORTEbits                        00000000
_PORTF                            00000000
_PORTFbits                        00000000
_PORTG                            00000000
_PORTGbits                        00000000
_PORTH                            00000000
_PORTHbits                        00000000
_PORTJ                            00000000
_PORTJbits                        00000000
_POSTDEC0                         00000000
_POSTDEC1                         00000000
_POSTDEC2                         00000000
_POSTINC0                         00000000
_POSTINC1                         00000000
_POSTINC2                         00000000
_PR2                              00000000
_PR4                              00000000
_PREINC0                          00000000
_PREINC1                          00000000
_PREINC2                          00000000
_PROD                             00000000
_PRODH                            00000000
_PRODL                            00000000
_PSPCON                           00000000
_PSPCONbits                       00000000
_RCON                             00000000
_RCONbits                         00000000
_RCREG                            00000000
_RCREG1                           00000000
_RCREG2                           00000000
_RCSTA                            00000000
_RCSTA1                           00000000
_RCSTA1bits                       00000000
_RCSTA2                           00000000
_RCSTA2bits                       00000000
_RCSTAbits                        00000000
_SPBRG                            00000000
_SPBRG1                           00000000
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 60


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_SPBRG2                           00000000
_SPBRGH                           00000000
_SPBRGH1                          00000000
_SPBRGH2                          00000000
_SSP1ADD                          00000000
_SSP1BUF                          00000000
_SSP1CON1                         00000000
_SSP1CON1bits                     00000000
_SSP1CON2                         00000000
_SSP1CON2bits                     00000000
_SSP1STAT                         00000000
_SSP1STATbits                     00000000
_SSP2ADD                          00000000
_SSP2BUF                          00000000
_SSP2CON1                         00000000
_SSP2CON1bits                     00000000
_SSP2CON2                         00000000
_SSP2CON2bits                     00000000
_SSP2STAT                         00000000
_SSP2STATbits                     00000000
_SSPADD                           00000000
_SSPBUF                           00000000
_SSPCON1                          00000000
_SSPCON1bits                      00000000
_SSPCON2                          00000000
_SSPCON2bits                      00000000
_SSPSTAT                          00000000
_SSPSTATbits                      00000000
_STATUS                           00000000
_STATUSbits                       00000000
_STKPTR                           00000000
_STKPTRbits                       00000000
_T0CON                            00000000
_T0CONbits                        00000000
_T1CON                            00000000
_T1CONbits                        00000000
_T2CON                            00000000
_T2CONbits                        00000000
_T3CON                            00000000
_T3CONbits                        00000000
_T4CON                            00000000
_T4CONbits                        00000000
_TABLAT                           00000000
_TBLPTR                           00000000
_TBLPTRH                          00000000
_TBLPTRL                          00000000
_TBLPTRU                          00000000
_TMR0H                            00000000
_TMR0L                            00000000
_TMR1H                            00000000
_TMR1L                            00000000
_TMR2                             00000000
_TMR3H                            00000000
_TMR3L                            00000000
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 61


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_TMR4                             00000000
_TOS                              00000000
_TOSH                             00000000
_TOSL                             00000000
_TOSU                             00000000
_TRISA                            00000000
_TRISAbits                        00000000
_TRISB                            00000000
_TRISBbits                        00000000
_TRISC                            00000000
_TRISCbits                        00000000
_TRISD                            00000000
_TRISDbits                        00000000
_TRISE                            00000000
_TRISEbits                        00000000
_TRISF                            00000000
_TRISFbits                        00000000
_TRISG                            00000000
_TRISGbits                        00000000
_TRISH                            00000000
_TRISHbits                        00000000
_TRISJ                            00000000
_TRISJbits                        00000000
_TXREG                            00000000
_TXREG1                           00000000
_TXREG2                           00000000
_TXSTA                            00000000
_TXSTA1                           00000000
_TXSTA1bits                       00000000
_TXSTA2                           00000000
_TXSTA2bits                       00000000
_TXSTAbits                        00000000
_UpdateLCD                        00000000
_UpdateTime                       00000000
_WDTCON                           00000000
_WDTCONbits                       00000000
_WREG                             00000000
__18F97J60                        00000001
__gptrget1                        00000000
__gptrput1                        00000000
__str_0                           0000002A
__str_1                           0000002E
__str_10                          00000114
__str_11                          0000011A
__str_2                           00000032
__str_3                           0000004C
__str_4                           0000006A
__str_5                           00000086
__str_6                           000000A2
__str_7                           000000C2
__str_8                           000000DC
__str_9                           000000F6
_alarmHours                       00000000
_alarmMinutes                     00000000
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  14:40:49          PAGE 62


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_alarmState                       00000000
_alarmStatus                      00000000
_h                                00000000
_hours                            00000000
_ledAlarm                         00000000
_m                                00000000
_main                             00000000
_minutes                          00000000
_s                                00000000
_seconds                          00000000
_sprintf                          00000000
_stateMenu                        00000000
_stdin                            00000000
_stdout                           00000000
_strlcpy                          00000000
_strlen                           00000000
_ultoa                            00000000
ivec_0x1_HighPriorityInterrupt    00000008
ivec_0x2_LowPriorityInterrupt     00000018
r0x00                             00000000
r0x01                             00000001
r0x02                             00000002
r0x03                             00000003
r0x04                             00000004
r0x05                             00000005
r0x06                             00000006
r0x07                             00000007
r0x08                             00000008
r0x09                             00000009
r0x0a                             0000000A
r0x0b                             0000000B
r0x0c                             0000000C
r0x0d                             0000000D
r0x0e                             0000000E
r0x0f                             0000000F
r0x10                             00000010
r0x11                             00000011
r0x12                             00000012
r0x13                             00000013
r0x14                             00000014
r0x15                             00000015


Errors   :       0
Warnings :       0 reported,       0 suppressed
Messages :       0 reported,       0 suppressed

