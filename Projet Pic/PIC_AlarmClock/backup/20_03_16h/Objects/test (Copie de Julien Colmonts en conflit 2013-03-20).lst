gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00001 ;--------------------------------------------------------
               00002 ; File Created by SDCC : free open source ANSI-C Compiler
               00003 ; Version 2.9.4 #5595 (Mar 16 2013) (UNIX)
               00004 ; This file was generated Wed Mar 20 11:30:04 2013
               00005 ;--------------------------------------------------------
               00006 ; PIC16 port for the Microchip 16-bit core micros
               00007 ;--------------------------------------------------------
               00008         list    p=18f97j60
               00009 
               00010         radix dec
               00011 
               00012 ;--------------------------------------------------------
               00013 ; public variables in this module
               00014 ;--------------------------------------------------------
               00015         global _ringToday
               00016         global _ConfigTimer0
               00017         global _ConfigButtons
               00018         global _UpdateTime
               00019         global _UpdateLCD
               00020         global _ConvertTime
               00021         global _StartTimer1
               00022         global _DisplayWORD
               00023         global _DisplayString
               00024         global _strlcpy
               00025         global _hours
               00026         global _minutes
               00027         global _seconds
               00028         global _alarmHours
               00029         global _alarmMinutes
               00030         global _stateMenu
               00031         global _alarmStatus
               00032         global _LCDPrint
               00033         global _h
               00034         global _m
               00035         global _s
               00036         global _alarmState
               00037         global _main
               00038         global _HighPriorityInterrupt
               00039         global _LowPriorityInterrupt
               00040 
               00041 ;--------------------------------------------------------
               00042 ; extern variables in this module
               00043 ;--------------------------------------------------------
               00044         extern __gptrget1
               00045         extern __gptrput1
               00046         extern _EBSTCONbits
               00047         extern _MISTATbits
               00048         extern _EFLOCONbits
               00049         extern _MACON1bits
               00050         extern _MACON2bits
               00051         extern _MACON3bits
               00052         extern _MACON4bits
               00053         extern _MACLCON1bits
               00054         extern _MACLCON2bits
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00055         extern _MICONbits
               00056         extern _MICMDbits
               00057         extern _EWOLIEbits
               00058         extern _EWOLIRbits
               00059         extern _ERXFCONbits
               00060         extern _EIEbits
               00061         extern _ESTATbits
               00062         extern _ECON2bits
               00063         extern _EIRbits
               00064         extern _EDATAbits
               00065         extern _SSP2CON2bits
               00066         extern _SSP2CON1bits
               00067         extern _SSP2STATbits
               00068         extern _ECCP2DELbits
               00069         extern _ECCP2ASbits
               00070         extern _ECCP3DELbits
               00071         extern _ECCP3ASbits
               00072         extern _RCSTA2bits
               00073         extern _TXSTA2bits
               00074         extern _CCP5CONbits
               00075         extern _CCP4CONbits
               00076         extern _T4CONbits
               00077         extern _ECCP1DELbits
               00078         extern _BAUDCON2bits
               00079         extern _BAUDCTL2bits
               00080         extern _BAUDCONbits
               00081         extern _BAUDCON1bits
               00082         extern _BAUDCTLbits
               00083         extern _BAUDCTL1bits
               00084         extern _PORTAbits
               00085         extern _PORTBbits
               00086         extern _PORTCbits
               00087         extern _PORTDbits
               00088         extern _PORTEbits
               00089         extern _PORTFbits
               00090         extern _PORTGbits
               00091         extern _PORTHbits
               00092         extern _PORTJbits
               00093         extern _LATAbits
               00094         extern _LATBbits
               00095         extern _LATCbits
               00096         extern _LATDbits
               00097         extern _LATEbits
               00098         extern _LATFbits
               00099         extern _LATGbits
               00100         extern _LATHbits
               00101         extern _LATJbits
               00102         extern _DDRAbits
               00103         extern _TRISAbits
               00104         extern _DDRBbits
               00105         extern _TRISBbits
               00106         extern _DDRCbits
               00107         extern _TRISCbits
               00108         extern _DDRDbits
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00109         extern _TRISDbits
               00110         extern _DDREbits
               00111         extern _TRISEbits
               00112         extern _DDRFbits
               00113         extern _TRISFbits
               00114         extern _DDRGbits
               00115         extern _TRISGbits
               00116         extern _DDRHbits
               00117         extern _TRISHbits
               00118         extern _DDRJbits
               00119         extern _TRISJbits
               00120         extern _OSCTUNEbits
               00121         extern _MEMCONbits
               00122         extern _PIE1bits
               00123         extern _PIR1bits
               00124         extern _IPR1bits
               00125         extern _PIE2bits
               00126         extern _PIR2bits
               00127         extern _IPR2bits
               00128         extern _PIE3bits
               00129         extern _PIR3bits
               00130         extern _IPR3bits
               00131         extern _EECON1bits
               00132         extern _RCSTAbits
               00133         extern _RCSTA1bits
               00134         extern _TXSTAbits
               00135         extern _TXSTA1bits
               00136         extern _PSPCONbits
               00137         extern _T3CONbits
               00138         extern _CMCONbits
               00139         extern _CVRCONbits
               00140         extern _ECCP1ASbits
               00141         extern _CCP3CONbits
               00142         extern _ECCP3CONbits
               00143         extern _CCP2CONbits
               00144         extern _ECCP2CONbits
               00145         extern _CCP1CONbits
               00146         extern _ECCP1CONbits
               00147         extern _ADCON2bits
               00148         extern _ADCON1bits
               00149         extern _ADCON0bits
               00150         extern _SSP1CON2bits
               00151         extern _SSPCON2bits
               00152         extern _SSP1CON1bits
               00153         extern _SSPCON1bits
               00154         extern _SSP1STATbits
               00155         extern _SSPSTATbits
               00156         extern _T2CONbits
               00157         extern _T1CONbits
               00158         extern _RCONbits
               00159         extern _WDTCONbits
               00160         extern _ECON1bits
               00161         extern _OSCCONbits
               00162         extern _T0CONbits
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00163         extern _STATUSbits
               00164         extern _INTCON3bits
               00165         extern _INTCON2bits
               00166         extern _INTCONbits
               00167         extern _STKPTRbits
               00168         extern _stdin
               00169         extern _stdout
               00170         extern _LCDText
               00171         extern _MAADR5
               00172         extern _MAADR6
               00173         extern _MAADR3
               00174         extern _MAADR4
               00175         extern _MAADR1
               00176         extern _MAADR2
               00177         extern _EBSTSD
               00178         extern _EBSTCON
               00179         extern _EBSTCS
               00180         extern _EBSTCSL
               00181         extern _EBSTCSH
               00182         extern _MISTAT
               00183         extern _EFLOCON
               00184         extern _EPAUS
               00185         extern _EPAUSL
               00186         extern _EPAUSH
               00187         extern _MACON1
               00188         extern _MACON2
               00189         extern _MACON3
               00190         extern _MACON4
               00191         extern _MABBIPG
               00192         extern _MAIPG
               00193         extern _MAIPGL
               00194         extern _MAIPGH
               00195         extern _MACLCON1
               00196         extern _MACLCON2
               00197         extern _MAMXFL
               00198         extern _MAMXFLL
               00199         extern _MAMXFLH
               00200         extern _MICON
               00201         extern _MICMD
               00202         extern _MIREGADR
               00203         extern _MIWR
               00204         extern _MIWRL
               00205         extern _MIWRH
               00206         extern _MIRD
               00207         extern _MIRDL
               00208         extern _MIRDH
               00209         extern _EHT0
               00210         extern _EHT1
               00211         extern _EHT2
               00212         extern _EHT3
               00213         extern _EHT4
               00214         extern _EHT5
               00215         extern _EHT6
               00216         extern _EHT7
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00217         extern _EPMM0
               00218         extern _EPMM1
               00219         extern _EPMM2
               00220         extern _EPMM3
               00221         extern _EPMM4
               00222         extern _EPMM5
               00223         extern _EPMM6
               00224         extern _EPMM7
               00225         extern _EPMCS
               00226         extern _EPMCSL
               00227         extern _EPMCSH
               00228         extern _EPMO
               00229         extern _EPMOL
               00230         extern _EPMOH
               00231         extern _EWOLIE
               00232         extern _EWOLIR
               00233         extern _ERXFCON
               00234         extern _EPKTCNT
               00235         extern _EWRPT
               00236         extern _EWRPTL
               00237         extern _EWRPTH
               00238         extern _ETXST
               00239         extern _ETXSTL
               00240         extern _ETXSTH
               00241         extern _ETXND
               00242         extern _ETXNDL
               00243         extern _ETXNDH
               00244         extern _ERXST
               00245         extern _ERXSTL
               00246         extern _ERXSTH
               00247         extern _ERXND
               00248         extern _ERXNDL
               00249         extern _ERXNDH
               00250         extern _ERXRDPT
               00251         extern _ERXRDPTL
               00252         extern _ERXRDPTH
               00253         extern _ERXWRPT
               00254         extern _ERXWRPTL
               00255         extern _ERXWRPTH
               00256         extern _EDMAST
               00257         extern _EDMASTL
               00258         extern _EDMASTH
               00259         extern _EDMAND
               00260         extern _EDMANDL
               00261         extern _EDMANDH
               00262         extern _EDMADST
               00263         extern _EDMADSTL
               00264         extern _EDMADSTH
               00265         extern _EDMACS
               00266         extern _EDMACSL
               00267         extern _EDMACSH
               00268         extern _EIE
               00269         extern _ESTAT
               00270         extern _ECON2
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00271         extern _EIR
               00272         extern _EDATA
               00273         extern _SSP2CON2
               00274         extern _SSP2CON1
               00275         extern _SSP2STAT
               00276         extern _SSP2ADD
               00277         extern _SSP2BUF
               00278         extern _ECCP2DEL
               00279         extern _ECCP2AS
               00280         extern _ECCP3DEL
               00281         extern _ECCP3AS
               00282         extern _RCSTA2
               00283         extern _TXSTA2
               00284         extern _TXREG2
               00285         extern _RCREG2
               00286         extern _SPBRG2
               00287         extern _CCP5CON
               00288         extern _CCPR5
               00289         extern _CCPR5L
               00290         extern _CCPR5H
               00291         extern _CCP4CON
               00292         extern _CCPR4
               00293         extern _CCPR4L
               00294         extern _CCPR4H
               00295         extern _T4CON
               00296         extern _PR4
               00297         extern _TMR4
               00298         extern _ECCP1DEL
               00299         extern _ERDPT
               00300         extern _ERDPTL
               00301         extern _ERDPTH
               00302         extern _BAUDCON2
               00303         extern _BAUDCTL2
               00304         extern _SPBRGH2
               00305         extern _BAUDCON
               00306         extern _BAUDCON1
               00307         extern _BAUDCTL
               00308         extern _BAUDCTL1
               00309         extern _SPBRGH
               00310         extern _SPBRGH1
               00311         extern _PORTA
               00312         extern _PORTB
               00313         extern _PORTC
               00314         extern _PORTD
               00315         extern _PORTE
               00316         extern _PORTF
               00317         extern _PORTG
               00318         extern _PORTH
               00319         extern _PORTJ
               00320         extern _LATA
               00321         extern _LATB
               00322         extern _LATC
               00323         extern _LATD
               00324         extern _LATE
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00325         extern _LATF
               00326         extern _LATG
               00327         extern _LATH
               00328         extern _LATJ
               00329         extern _DDRA
               00330         extern _TRISA
               00331         extern _DDRB
               00332         extern _TRISB
               00333         extern _DDRC
               00334         extern _TRISC
               00335         extern _DDRD
               00336         extern _TRISD
               00337         extern _DDRE
               00338         extern _TRISE
               00339         extern _DDRF
               00340         extern _TRISF
               00341         extern _DDRG
               00342         extern _TRISG
               00343         extern _DDRH
               00344         extern _TRISH
               00345         extern _DDRJ
               00346         extern _TRISJ
               00347         extern _OSCTUNE
               00348         extern _MEMCON
               00349         extern _PIE1
               00350         extern _PIR1
               00351         extern _IPR1
               00352         extern _PIE2
               00353         extern _PIR2
               00354         extern _IPR2
               00355         extern _PIE3
               00356         extern _PIR3
               00357         extern _IPR3
               00358         extern _EECON1
               00359         extern _EECON2
               00360         extern _RCSTA
               00361         extern _RCSTA1
               00362         extern _TXSTA
               00363         extern _TXSTA1
               00364         extern _TXREG
               00365         extern _TXREG1
               00366         extern _RCREG
               00367         extern _RCREG1
               00368         extern _SPBRG
               00369         extern _SPBRG1
               00370         extern _PSPCON
               00371         extern _T3CON
               00372         extern _TMR3L
               00373         extern _TMR3H
               00374         extern _CMCON
               00375         extern _CVRCON
               00376         extern _ECCP1AS
               00377         extern _CCP3CON
               00378         extern _ECCP3CON
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00379         extern _CCPR3
               00380         extern _CCPR3L
               00381         extern _CCPR3H
               00382         extern _CCP2CON
               00383         extern _ECCP2CON
               00384         extern _CCPR2
               00385         extern _CCPR2L
               00386         extern _CCPR2H
               00387         extern _CCP1CON
               00388         extern _ECCP1CON
               00389         extern _CCPR1
               00390         extern _CCPR1L
               00391         extern _CCPR1H
               00392         extern _ADCON2
               00393         extern _ADCON1
               00394         extern _ADCON0
               00395         extern _ADRES
               00396         extern _ADRESL
               00397         extern _ADRESH
               00398         extern _SSP1CON2
               00399         extern _SSPCON2
               00400         extern _SSP1CON1
               00401         extern _SSPCON1
               00402         extern _SSP1STAT
               00403         extern _SSPSTAT
               00404         extern _SSP1ADD
               00405         extern _SSPADD
               00406         extern _SSP1BUF
               00407         extern _SSPBUF
               00408         extern _T2CON
               00409         extern _PR2
               00410         extern _TMR2
               00411         extern _T1CON
               00412         extern _TMR1L
               00413         extern _TMR1H
               00414         extern _RCON
               00415         extern _WDTCON
               00416         extern _ECON1
               00417         extern _OSCCON
               00418         extern _T0CON
               00419         extern _TMR0L
               00420         extern _TMR0H
               00421         extern _STATUS
               00422         extern _FSR2L
               00423         extern _FSR2H
               00424         extern _PLUSW2
               00425         extern _PREINC2
               00426         extern _POSTDEC2
               00427         extern _POSTINC2
               00428         extern _INDF2
               00429         extern _BSR
               00430         extern _FSR1L
               00431         extern _FSR1H
               00432         extern _PLUSW1
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00433         extern _PREINC1
               00434         extern _POSTDEC1
               00435         extern _POSTINC1
               00436         extern _INDF1
               00437         extern _WREG
               00438         extern _FSR0L
               00439         extern _FSR0H
               00440         extern _PLUSW0
               00441         extern _PREINC0
               00442         extern _POSTDEC0
               00443         extern _POSTINC0
               00444         extern _INDF0
               00445         extern _INTCON3
               00446         extern _INTCON2
               00447         extern _INTCON
               00448         extern _PROD
               00449         extern _PRODL
               00450         extern _PRODH
               00451         extern _TABLAT
               00452         extern _TBLPTR
               00453         extern _TBLPTRL
               00454         extern _TBLPTRH
               00455         extern _TBLPTRU
               00456         extern _PC
               00457         extern _PCL
               00458         extern _PCLATH
               00459         extern _PCLATU
               00460         extern _STKPTR
               00461         extern _TOS
               00462         extern _TOSL
               00463         extern _TOSH
               00464         extern _TOSU
               00465         extern _sprintf
               00466         extern _ultoa
               00467         extern _strlen
               00468         extern _LCDInit
               00469         extern _LCDUpdate
               00470 ;--------------------------------------------------------
               00471 ;       Equates to used internal registers
               00472 ;--------------------------------------------------------
  00000FD8     00473 STATUS  equ     0xfd8
  00000FF9     00474 PCL     equ     0xff9
  00000FFA     00475 PCLATH  equ     0xffa
  00000FFB     00476 PCLATU  equ     0xffb
  00000FE8     00477 WREG    equ     0xfe8
  00000FE0     00478 BSR     equ     0xfe0
  00000FE9     00479 FSR0L   equ     0xfe9
  00000FEA     00480 FSR0H   equ     0xfea
  00000FE1     00481 FSR1L   equ     0xfe1
  00000FD9     00482 FSR2L   equ     0xfd9
  00000FEF     00483 INDF0   equ     0xfef
  00000FE5     00484 POSTDEC1        equ     0xfe5
  00000FE4     00485 PREINC1 equ     0xfe4
  00000FDB     00486 PLUSW2  equ     0xfdb
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
  00000FF3     00487 PRODL   equ     0xff3
  00000FF4     00488 PRODH   equ     0xff4
               00489 
               00490 
               00491 ; Internal registers
               00492 .registers      udata_ovr       0x0000
               00493 r0x00   res     1
               00494 r0x01   res     1
               00495 r0x02   res     1
               00496 r0x03   res     1
               00497 r0x04   res     1
               00498 r0x05   res     1
               00499 r0x06   res     1
               00500 r0x07   res     1
               00501 r0x08   res     1
               00502 r0x09   res     1
               00503 r0x0a   res     1
               00504 r0x0b   res     1
               00505 r0x0c   res     1
               00506 r0x0d   res     1
               00507 r0x0e   res     1
               00508 r0x0f   res     1
               00509 r0x10   res     1
               00510 r0x11   res     1
               00511 r0x12   res     1
               00512 r0x13   res     1
               00513 r0x14   res     1
               00514 r0x15   res     1
               00515 
               00516 udata_test_0    udata
               00517 _ringToday      res     2
               00518 
               00519 udata_test_1    udata
               00520 _stateMenu      res     2
               00521 
               00522 udata_test_2    udata
               00523 _hours  res     2
               00524 
               00525 udata_test_3    udata
               00526 _minutes        res     2
               00527 
               00528 udata_test_4    udata
               00529 _seconds        res     2
               00530 
               00531 udata_test_5    udata
               00532 _alarmHours     res     2
               00533 
               00534 udata_test_6    udata
               00535 _alarmMinutes   res     2
               00536 
               00537 udata_test_7    udata
               00538 _alarmStatus    res     2
               00539 
               00540 udata_test_8    udata
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00541 _h      res     3
               00542 
               00543 udata_test_9    udata
               00544 _m      res     3
               00545 
               00546 udata_test_10   udata
               00547 _s      res     3
               00548 
               00549 udata_test_11   udata
               00550 _alarmState     res     3
               00551 
               00552 udata_test_12   udata
               00553 _LCDPrint       res     32
               00554 
               00555 udata_test_13   udata
               00556 _DisplayWORD_WDigit_1_1 res     6
               00557 
               00558 ;--------------------------------------------------------
               00559 ; interrupt vector 
               00560 ;--------------------------------------------------------
               00561 
               00562 ;--------------------------------------------------------
               00563 ; global & static initialisations
               00564 ;--------------------------------------------------------
               00565 ; ; Starting pCode block for absolute section
               00566 ; ;-----------------------------------------
               00567 S_test_ivec_0x1_HighPriorityInterrupt   code    0X000008
0008 00568 ivec_0x1_HighPriorityInterrupt:
0008 EF00 F000 00569         GOTO    _HighPriorityInterrupt
               00570 
               00571 ; ; Starting pCode block for absolute section
               00572 ; ;-----------------------------------------
               00573 S_test_ivec_0x2_LowPriorityInterrupt    code    0X000018
0018 00574 ivec_0x2_LowPriorityInterrupt:
0018 EF00 F000 00575         GOTO    _LowPriorityInterrupt
               00576 
               00577 ; I code from now on!
               00578 ; ; Starting pCode block
               00579 S_test__main    code
0000 00580 _main:
0000 0000      00581         BANKSEL _stateMenu
               00582 ;       .line   52; test.c      stateMenu = STANDARD_STATE;
0002 6B00      00583         CLRF    _stateMenu, B
0004 0000      00584         BANKSEL (_stateMenu + 1)
0006 6B00      00585         CLRF    (_stateMenu + 1), B
               00586 ;       .line   53; test.c      INTCONbits.GIE = 1; // Activation générale des interruptions
0008 8E00      00587         BSF     _INTCONbits, 7
               00588 ;       .line   54; test.c      RCONbits.IPEN = 1; //interrupts priority enable
000A 8E00      00589         BSF     _RCONbits, 7
               00590 ;       .line   55; test.c      LCDInit(); // initialisation du LCD
000C EC00 F000 00591         CALL    _LCDInit
0010 0000      00592         BANKSEL _hours
               00593 ;       .line   56; test.c      hours = 0;
0012 6B00      00594         CLRF    _hours, B
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0014 0000      00595         BANKSEL (_hours + 1)
0016 6B00      00596         CLRF    (_hours + 1), B
0018 0000      00597         BANKSEL _minutes
               00598 ;       .line   57; test.c      minutes = 0;
001A 6B00      00599         CLRF    _minutes, B
001C 0000      00600         BANKSEL (_minutes + 1)
001E 6B00      00601         CLRF    (_minutes + 1), B
0020 0000      00602         BANKSEL _seconds
               00603 ;       .line   58; test.c      seconds = 0;
0022 6B00      00604         CLRF    _seconds, B
0024 0000      00605         BANKSEL (_seconds + 1)
0026 6B00      00606         CLRF    (_seconds + 1), B
0028 0000      00607         BANKSEL _alarmHours
               00608 ;       .line   59; test.c      alarmHours = 0;
002A 6B00      00609         CLRF    _alarmHours, B
002C 0000      00610         BANKSEL (_alarmHours + 1)
002E 6B00      00611         CLRF    (_alarmHours + 1), B
0030 0000      00612         BANKSEL _alarmMinutes
               00613 ;       .line   60; test.c      alarmMinutes = 0;
0032 6B00      00614         CLRF    _alarmMinutes, B
0034 0000      00615         BANKSEL (_alarmMinutes + 1)
0036 6B00      00616         CLRF    (_alarmMinutes + 1), B
0038 0000      00617         BANKSEL _alarmStatus
               00618 ;       .line   61; test.c      alarmStatus = 0;
003A 6B00      00619         CLRF    _alarmStatus, B
003C 0000      00620         BANKSEL (_alarmStatus + 1)
003E 6B00      00621         CLRF    (_alarmStatus + 1), B
               00622 ;       .line   62; test.c      ConfigTimer0();
0040 EC00 F000 00623         CALL    _ConfigTimer0
               00624 ;       .line   63; test.c      ConfigButtons();
0044 EC00 F000 00625         CALL    _ConfigButtons
0048 00626 _00106_DS_:
               00627 ;       .line   67; test.c      UpdateTime();
0048 EC00 F000 00628         CALL    _UpdateTime
               00629 ;       .line   68; test.c      UpdateLCD();
004C EC00 F000 00630         CALL    _UpdateLCD
0050 D000      00631         BRA     _00106_DS_
0052 0012      00632         RETURN  
               00633 
               00634 ; ; Starting pCode block
               00635 S_test__strlcpy code
0000 00636 _strlcpy:
               00637 ;       .line   385; test.c     strlcpy(char *dst, const char *src, size_t siz)
0000 CFD9 FFE5 00638         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 00639         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 00640         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 00641         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 00642         MOVFF   r0x02, POSTDEC1
0014 C000 FFE5 00643         MOVFF   r0x03, POSTDEC1
0018 C000 FFE5 00644         MOVFF   r0x04, POSTDEC1
001C C000 FFE5 00645         MOVFF   r0x05, POSTDEC1
0020 C000 FFE5 00646         MOVFF   r0x06, POSTDEC1
0024 C000 FFE5 00647         MOVFF   r0x07, POSTDEC1
0028 C000 FFE5 00648         MOVFF   r0x08, POSTDEC1
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
002C C000 FFE5 00649         MOVFF   r0x09, POSTDEC1
0030 C000 FFE5 00650         MOVFF   r0x0a, POSTDEC1
0034 C000 FFE5 00651         MOVFF   r0x0b, POSTDEC1
0038 C000 FFE5 00652         MOVFF   r0x0c, POSTDEC1
003C C000 FFE5 00653         MOVFF   r0x0d, POSTDEC1
0040 C000 FFE5 00654         MOVFF   r0x0e, POSTDEC1
0044 C000 FFE5 00655         MOVFF   r0x0f, POSTDEC1
0048 C000 FFE5 00656         MOVFF   r0x10, POSTDEC1
004C C000 FFE5 00657         MOVFF   r0x11, POSTDEC1
0050 C000 FFE5 00658         MOVFF   r0x12, POSTDEC1
0054 C000 FFE5 00659         MOVFF   r0x13, POSTDEC1
0058 C000 FFE5 00660         MOVFF   r0x14, POSTDEC1
005C C000 FFE5 00661         MOVFF   r0x15, POSTDEC1
0060 0E02      00662         MOVLW   0x02
0062 CFDB F000 00663         MOVFF   PLUSW2, r0x00
0066 0E03      00664         MOVLW   0x03
0068 CFDB F000 00665         MOVFF   PLUSW2, r0x01
006C 0E04      00666         MOVLW   0x04
006E CFDB F000 00667         MOVFF   PLUSW2, r0x02
0072 0E05      00668         MOVLW   0x05
0074 CFDB F000 00669         MOVFF   PLUSW2, r0x03
0078 0E06      00670         MOVLW   0x06
007A CFDB F000 00671         MOVFF   PLUSW2, r0x04
007E 0E07      00672         MOVLW   0x07
0080 CFDB F000 00673         MOVFF   PLUSW2, r0x05
0084 0E08      00674         MOVLW   0x08
0086 CFDB F000 00675         MOVFF   PLUSW2, r0x06
008A 0E09      00676         MOVLW   0x09
008C CFDB F000 00677         MOVFF   PLUSW2, r0x07
               00678 ;       .line   387; test.c     char       *d = dst;
0090 C000 F000 00679         MOVFF   r0x00, r0x08
0094 C000 F000 00680         MOVFF   r0x01, r0x09
0098 C000 F000 00681         MOVFF   r0x02, r0x0a
               00682 ;       .line   388; test.c     const char *s = src;
009C C000 F000 00683         MOVFF   r0x03, r0x0b
00A0 C000 F000 00684         MOVFF   r0x04, r0x0c
00A4 C000 F000 00685         MOVFF   r0x05, r0x0d
               00686 ;       .line   389; test.c     size_t      n = siz;
00A8 C000 F000 00687         MOVFF   r0x06, r0x0e
00AC C000 F000 00688         MOVFF   r0x07, r0x0f
               00689 ;       .line   392; test.c     if (n != 0)
00B0 5000      00690         MOVF    r0x06, W
00B2 1000      00691         IORWF   r0x07, W
00B4 B4D8      00692         BTFSC   STATUS, 2
00B6 D000      00693         BRA     _00255_DS_
               00694 ;       .line   394; test.c     while (--n != 0)
00B8 C000 F000 00695         MOVFF   r0x03, r0x10
00BC C000 F000 00696         MOVFF   r0x04, r0x11
00C0 C000 F000 00697         MOVFF   r0x05, r0x12
00C4 C000 F000 00698         MOVFF   r0x06, r0x13
00C8 C000 F000 00699         MOVFF   r0x07, r0x14
00CC 00700 _00251_DS_:
00CC 0EFF      00701         MOVLW   0xff
00CE 2600      00702         ADDWF   r0x13, F
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00D0 A0D8      00703         BTFSS   STATUS, 0
00D2 0600      00704         DECF    r0x14, F
00D4 5000      00705         MOVF    r0x13, W
00D6 1000      00706         IORWF   r0x14, W
00D8 E000      00707         BZ      _00270_DS_
               00708 ;       .line   396; test.c     if ((*d++ = *s++) == '\0')
00DA C000 FFE9 00709         MOVFF   r0x10, FSR0L
00DE C000 FFF3 00710         MOVFF   r0x11, PRODL
00E2 5000      00711         MOVF    r0x12, W
00E4 EC00 F000 00712         CALL    __gptrget1
00E8 6E00      00713         MOVWF   r0x15
00EA 2A00      00714         INCF    r0x10, F
00EC B0D8      00715         BTFSC   STATUS, 0
00EE 2A00      00716         INCF    r0x11, F
00F0 B0D8      00717         BTFSC   STATUS, 0
00F2 2A00      00718         INCF    r0x12, F
00F4 C000 FFE5 00719         MOVFF   r0x15, POSTDEC1
00F8 C000 FFE9 00720         MOVFF   r0x00, FSR0L
00FC C000 FFF3 00721         MOVFF   r0x01, PRODL
0100 5000      00722         MOVF    r0x02, W
0102 EC00 F000 00723         CALL    __gptrput1
0106 2A00      00724         INCF    r0x00, F
0108 B0D8      00725         BTFSC   STATUS, 0
010A 2A00      00726         INCF    r0x01, F
010C B0D8      00727         BTFSC   STATUS, 0
010E 2A00      00728         INCF    r0x02, F
0110 5000      00729         MOVF    r0x15, W
0112 E100      00730         BNZ     _00251_DS_
0114 00731 _00270_DS_:
               00732 ;       .line   397; test.c     break;
0114 C000 F000 00733         MOVFF   r0x10, r0x0b
0118 C000 F000 00734         MOVFF   r0x11, r0x0c
011C C000 F000 00735         MOVFF   r0x12, r0x0d
0120 C000 F000 00736         MOVFF   r0x00, r0x08
0124 C000 F000 00737         MOVFF   r0x01, r0x09
0128 C000 F000 00738         MOVFF   r0x02, r0x0a
012C C000 F000 00739         MOVFF   r0x13, r0x0e
0130 C000 F000 00740         MOVFF   r0x14, r0x0f
0134 00741 _00255_DS_:
               00742 ;       .line   402; test.c     if (n == 0)
0134 5000      00743         MOVF    r0x0e, W
0136 1000      00744         IORWF   r0x0f, W
0138 E100      00745         BNZ     _00262_DS_
               00746 ;       .line   404; test.c     if (siz != 0)
013A 5000      00747         MOVF    r0x06, W
013C 1000      00748         IORWF   r0x07, W
013E E000      00749         BZ      _00269_DS_
               00750 ;       .line   405; test.c     *d = '\0';          /* NUL-terminate dst */
0140 0E00      00751         MOVLW   0x00
0142 6EE5      00752         MOVWF   POSTDEC1
0144 C000 FFE9 00753         MOVFF   r0x08, FSR0L
0148 C000 FFF3 00754         MOVFF   r0x09, PRODL
014C 5000      00755         MOVF    r0x0a, W
014E EC00 F000 00756         CALL    __gptrput1
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0152 00757 _00269_DS_:
               00758 ;       .line   406; test.c     while (*s++)
0152 C000 F000 00759         MOVFF   r0x0b, r0x00
0156 C000 F000 00760         MOVFF   r0x0c, r0x01
015A C000 F000 00761         MOVFF   r0x0d, r0x02
015E 00762 _00258_DS_:
015E C000 FFE9 00763         MOVFF   r0x00, FSR0L
0162 C000 FFF3 00764         MOVFF   r0x01, PRODL
0166 5000      00765         MOVF    r0x02, W
0168 EC00 F000 00766         CALL    __gptrget1
016C 6E00      00767         MOVWF   r0x06
016E 2A00      00768         INCF    r0x00, F
0170 B0D8      00769         BTFSC   STATUS, 0
0172 2A00      00770         INCF    r0x01, F
0174 B0D8      00771         BTFSC   STATUS, 0
0176 2A00      00772         INCF    r0x02, F
0178 5000      00773         MOVF    r0x06, W
017A E100      00774         BNZ     _00258_DS_
017C C000 F000 00775         MOVFF   r0x00, r0x0b
0180 C000 F000 00776         MOVFF   r0x01, r0x0c
0184 C000 F000 00777         MOVFF   r0x02, r0x0d
0188 00778 _00262_DS_:
               00779 ;       .line   410; test.c     return (s - src - 1);       /* count does not include NUL */
0188 5000      00780         MOVF    r0x03, W
018A 5C00      00781         SUBWF   r0x0b, W
018C 6E00      00782         MOVWF   r0x03
018E 5000      00783         MOVF    r0x04, W
0190 5800      00784         SUBWFB  r0x0c, W
0192 6E00      00785         MOVWF   r0x04
0194 0EFF      00786         MOVLW   0xff
0196 2600      00787         ADDWF   r0x03, F
0198 A0D8      00788         BTFSS   STATUS, 0
019A 0600      00789         DECF    r0x04, F
019C C000 FFF3 00790         MOVFF   r0x04, PRODL
01A0 5000      00791         MOVF    r0x03, W
01A2 CFE4 F000 00792         MOVFF   PREINC1, r0x15
01A6 CFE4 F000 00793         MOVFF   PREINC1, r0x14
01AA CFE4 F000 00794         MOVFF   PREINC1, r0x13
01AE CFE4 F000 00795         MOVFF   PREINC1, r0x12
01B2 CFE4 F000 00796         MOVFF   PREINC1, r0x11
01B6 CFE4 F000 00797         MOVFF   PREINC1, r0x10
01BA CFE4 F000 00798         MOVFF   PREINC1, r0x0f
01BE CFE4 F000 00799         MOVFF   PREINC1, r0x0e
01C2 CFE4 F000 00800         MOVFF   PREINC1, r0x0d
01C6 CFE4 F000 00801         MOVFF   PREINC1, r0x0c
01CA CFE4 F000 00802         MOVFF   PREINC1, r0x0b
01CE CFE4 F000 00803         MOVFF   PREINC1, r0x0a
01D2 CFE4 F000 00804         MOVFF   PREINC1, r0x09
01D6 CFE4 F000 00805         MOVFF   PREINC1, r0x08
01DA CFE4 F000 00806         MOVFF   PREINC1, r0x07
01DE CFE4 F000 00807         MOVFF   PREINC1, r0x06
01E2 CFE4 F000 00808         MOVFF   PREINC1, r0x05
01E6 CFE4 F000 00809         MOVFF   PREINC1, r0x04
01EA CFE4 F000 00810         MOVFF   PREINC1, r0x03
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
01EE CFE4 F000 00811         MOVFF   PREINC1, r0x02
01F2 CFE4 F000 00812         MOVFF   PREINC1, r0x01
01F6 CFE4 F000 00813         MOVFF   PREINC1, r0x00
01FA CFE4 FFD9 00814         MOVFF   PREINC1, FSR2L
01FE 0012      00815         RETURN  
               00816 
               00817 ; ; Starting pCode block
               00818 S_test__DisplayString   code
0000 00819 _DisplayString:
               00820 ;       .line   339; test.c     void DisplayString(BYTE pos, char* text)
0000 CFD9 FFE5 00821         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 00822         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 00823         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 00824         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 00825         MOVFF   r0x02, POSTDEC1
0014 C000 FFE5 00826         MOVFF   r0x03, POSTDEC1
0018 C000 FFE5 00827         MOVFF   r0x04, POSTDEC1
001C C000 FFE5 00828         MOVFF   r0x05, POSTDEC1
0020 C000 FFE5 00829         MOVFF   r0x06, POSTDEC1
0024 C000 FFE5 00830         MOVFF   r0x07, POSTDEC1
0028 0E02      00831         MOVLW   0x02
002A CFDB F000 00832         MOVFF   PLUSW2, r0x00
002E 0E03      00833         MOVLW   0x03
0030 CFDB F000 00834         MOVFF   PLUSW2, r0x01
0034 0E04      00835         MOVLW   0x04
0036 CFDB F000 00836         MOVFF   PLUSW2, r0x02
003A 0E05      00837         MOVLW   0x05
003C CFDB F000 00838         MOVFF   PLUSW2, r0x03
               00839 ;       .line   341; test.c     BYTE l= strlen(text)+1;
0040 5000      00840         MOVF    r0x03, W
0042 6EE5      00841         MOVWF   POSTDEC1
0044 5000      00842         MOVF    r0x02, W
0046 6EE5      00843         MOVWF   POSTDEC1
0048 5000      00844         MOVF    r0x01, W
004A 6EE5      00845         MOVWF   POSTDEC1
004C EC00 F000 00846         CALL    _strlen
0050 6E00      00847         MOVWF   r0x04
0052 CFF3 F000 00848         MOVFF   PRODL, r0x05
0056 0E03      00849         MOVLW   0x03
0058 26E1      00850         ADDWF   FSR1L, F
005A 2A00      00851         INCF    r0x04, F
               00852 ;       .line   342; test.c     BYTE max= 32-pos;
005C 5000      00853         MOVF    r0x00, W
005E 0820      00854         SUBLW   0x20
0060 6E00      00855         MOVWF   r0x05
               00856 ;       .line   343; test.c     strlcpy((char*)&LCDText[pos], text,(l<max)?l:max );
0062 6A00      00857         CLRF    r0x06
0064 0E00      00858         MOVLW   LOW(_LCDText)
0066 2600      00859         ADDWF   r0x00, F
0068 0E00      00860         MOVLW   HIGH(_LCDText)
006A 2200      00861         ADDWFC  r0x06, F
006C 5000      00862         MOVF    r0x06, W
006E 6E00      00863         MOVWF   r0x06
0070 5000      00864         MOVF    r0x00, W
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0072 6E00      00865         MOVWF   r0x00
0074 0E80      00866         MOVLW   0x80
0076 6E00      00867         MOVWF   r0x07
0078 5000      00868         MOVF    r0x05, W
007A 5C00      00869         SUBWF   r0x04, W
007C E300      00870         BNC     _00242_DS_
007E C000 F000 00871         MOVFF   r0x05, r0x04
0082 00872 _00242_DS_:
0082 6A00      00873         CLRF    r0x05
0084 5000      00874         MOVF    r0x05, W
0086 6EE5      00875         MOVWF   POSTDEC1
0088 5000      00876         MOVF    r0x04, W
008A 6EE5      00877         MOVWF   POSTDEC1
008C 5000      00878         MOVF    r0x03, W
008E 6EE5      00879         MOVWF   POSTDEC1
0090 5000      00880         MOVF    r0x02, W
0092 6EE5      00881         MOVWF   POSTDEC1
0094 5000      00882         MOVF    r0x01, W
0096 6EE5      00883         MOVWF   POSTDEC1
0098 5000      00884         MOVF    r0x07, W
009A 6EE5      00885         MOVWF   POSTDEC1
009C 5000      00886         MOVF    r0x06, W
009E 6EE5      00887         MOVWF   POSTDEC1
00A0 5000      00888         MOVF    r0x00, W
00A2 6EE5      00889         MOVWF   POSTDEC1
00A4 EC00 F000 00890         CALL    _strlcpy
00A8 0E08      00891         MOVLW   0x08
00AA 26E1      00892         ADDWF   FSR1L, F
               00893 ;       .line   344; test.c     LCDUpdate();
00AC EC00 F000 00894         CALL    _LCDUpdate
00B0 CFE4 F000 00895         MOVFF   PREINC1, r0x07
00B4 CFE4 F000 00896         MOVFF   PREINC1, r0x06
00B8 CFE4 F000 00897         MOVFF   PREINC1, r0x05
00BC CFE4 F000 00898         MOVFF   PREINC1, r0x04
00C0 CFE4 F000 00899         MOVFF   PREINC1, r0x03
00C4 CFE4 F000 00900         MOVFF   PREINC1, r0x02
00C8 CFE4 F000 00901         MOVFF   PREINC1, r0x01
00CC CFE4 F000 00902         MOVFF   PREINC1, r0x00
00D0 CFE4 FFD9 00903         MOVFF   PREINC1, FSR2L
00D4 0012      00904         RETURN  
               00905 
               00906 ; ; Starting pCode block
               00907 S_test__DisplayWORD     code
0000 00908 _DisplayWORD:
               00909 ;       .line   317; test.c     void DisplayWORD(BYTE pos, WORD w) //WORD is a 16 bits unsigned
0000 CFD9 FFE5 00910         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 00911         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 00912         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 00913         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 00914         MOVFF   r0x02, POSTDEC1
0014 C000 FFE5 00915         MOVFF   r0x03, POSTDEC1
0018 C000 FFE5 00916         MOVFF   r0x04, POSTDEC1
001C C000 FFE5 00917         MOVFF   r0x05, POSTDEC1
0020 0E02      00918         MOVLW   0x02
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0022 CFDB F000 00919         MOVFF   PLUSW2, r0x00
0026 0E03      00920         MOVLW   0x03
0028 CFDB F000 00921         MOVFF   PLUSW2, r0x01
002C 0E04      00922         MOVLW   0x04
002E CFDB F000 00923         MOVFF   PLUSW2, r0x02
               00924 ;       .line   325; test.c     ultoa(w, WDigit, radix);      
0032 6A00      00925         CLRF    r0x03
0034 6A00      00926         CLRF    r0x04
0036 0E0A      00927         MOVLW   0x0a
0038 6EE5      00928         MOVWF   POSTDEC1
003A 0E00      00929         MOVLW   HIGH(_DisplayWORD_WDigit_1_1)
003C 6EE5      00930         MOVWF   POSTDEC1
003E 0E00      00931         MOVLW   LOW(_DisplayWORD_WDigit_1_1)
0040 6EE5      00932         MOVWF   POSTDEC1
0042 5000      00933         MOVF    r0x04, W
0044 6EE5      00934         MOVWF   POSTDEC1
0046 5000      00935         MOVF    r0x03, W
0048 6EE5      00936         MOVWF   POSTDEC1
004A 5000      00937         MOVF    r0x02, W
004C 6EE5      00938         MOVWF   POSTDEC1
004E 5000      00939         MOVF    r0x01, W
0050 6EE5      00940         MOVWF   POSTDEC1
0052 EC00 F000 00941         CALL    _ultoa
0056 0E07      00942         MOVLW   0x07
0058 26E1      00943         ADDWF   FSR1L, F
               00944 ;       .line   326; test.c     for(j = 0; j < strlen((char*)WDigit); j++)
005A 6A00      00945         CLRF    r0x01
005C 00946 _00223_DS_:
005C 0E00      00947         MOVLW   HIGH(_DisplayWORD_WDigit_1_1)
005E 6E00      00948         MOVWF   r0x03
0060 0E00      00949         MOVLW   LOW(_DisplayWORD_WDigit_1_1)
0062 6E00      00950         MOVWF   r0x02
0064 0E80      00951         MOVLW   0x80
0066 6E00      00952         MOVWF   r0x04
0068 5000      00953         MOVF    r0x04, W
006A 6EE5      00954         MOVWF   POSTDEC1
006C 5000      00955         MOVF    r0x03, W
006E 6EE5      00956         MOVWF   POSTDEC1
0070 5000      00957         MOVF    r0x02, W
0072 6EE5      00958         MOVWF   POSTDEC1
0074 EC00 F000 00959         CALL    _strlen
0078 6E00      00960         MOVWF   r0x02
007A CFF3 F000 00961         MOVFF   PRODL, r0x03
007E 0E03      00962         MOVLW   0x03
0080 26E1      00963         ADDWF   FSR1L, F
0082 C000 F000 00964         MOVFF   r0x01, r0x04
0086 6A00      00965         CLRF    r0x05
0088 5000      00966         MOVF    r0x05, W
008A 0F80      00967         ADDLW   0x80
008C 6EF3      00968         MOVWF   PRODL
008E 5000      00969         MOVF    r0x03, W
0090 0F80      00970         ADDLW   0x80
0092 5CF3      00971         SUBWF   PRODL, W
0094 E100      00972         BNZ     _00233_DS_
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0096 5000      00973         MOVF    r0x02, W
0098 5C00      00974         SUBWF   r0x04, W
009A 00975 _00233_DS_:
009A E200      00976         BC      _00226_DS_
               00977 ;       .line   328; test.c     LCDText[LCDPos++] = WDigit[j];
009C C000 F000 00978         MOVFF   r0x00, r0x02
00A0 2A00      00979         INCF    r0x00, F
00A2 6A00      00980         CLRF    r0x03
00A4 0E00      00981         MOVLW   LOW(_LCDText)
00A6 2600      00982         ADDWF   r0x02, F
00A8 0E00      00983         MOVLW   HIGH(_LCDText)
00AA 2200      00984         ADDWFC  r0x03, F
00AC 0E00      00985         MOVLW   LOW(_DisplayWORD_WDigit_1_1)
00AE 2400      00986         ADDWF   r0x01, W
00B0 6E00      00987         MOVWF   r0x04
00B2 6A00      00988         CLRF    r0x05
00B4 0E00      00989         MOVLW   HIGH(_DisplayWORD_WDigit_1_1)
00B6 2200      00990         ADDWFC  r0x05, F
00B8 C000 FFE9 00991         MOVFF   r0x04, FSR0L
00BC C000 FFEA 00992         MOVFF   r0x05, FSR0H
00C0 CFEF F000 00993         MOVFF   INDF0, r0x04
00C4 C000 FFE9 00994         MOVFF   r0x02, FSR0L
00C8 C000 FFEA 00995         MOVFF   r0x03, FSR0H
00CC C000 FFEF 00996         MOVFF   r0x04, INDF0
               00997 ;       .line   326; test.c     for(j = 0; j < strlen((char*)WDigit); j++)
00D0 2A00      00998         INCF    r0x01, F
00D2 D000      00999         BRA     _00223_DS_
00D4 01000 _00226_DS_:
               01001 ;       .line   330; test.c     if(LCDPos < 32u)
00D4 C000 F000 01002         MOVFF   r0x00, r0x01
00D8 6A00      01003         CLRF    r0x02
00DA 0E00      01004         MOVLW   0x00
00DC 5C00      01005         SUBWF   r0x02, W
00DE E100      01006         BNZ     _00234_DS_
00E0 0E20      01007         MOVLW   0x20
00E2 5C00      01008         SUBWF   r0x01, W
00E4 01009 _00234_DS_:
00E4 E200      01010         BC      _00222_DS_
               01011 ;       .line   331; test.c     LCDText[LCDPos] = 0;
00E6 6A00      01012         CLRF    r0x01
00E8 0E00      01013         MOVLW   LOW(_LCDText)
00EA 2600      01014         ADDWF   r0x00, F
00EC 0E00      01015         MOVLW   HIGH(_LCDText)
00EE 2200      01016         ADDWFC  r0x01, F
00F0 C000 FFE9 01017         MOVFF   r0x00, FSR0L
00F4 C000 FFEA 01018         MOVFF   r0x01, FSR0H
00F8 0E00      01019         MOVLW   0x00
00FA 6EEF      01020         MOVWF   INDF0
00FC 01021 _00222_DS_:
               01022 ;       .line   332; test.c     LCDUpdate();
00FC EC00 F000 01023         CALL    _LCDUpdate
0100 CFE4 F000 01024         MOVFF   PREINC1, r0x05
0104 CFE4 F000 01025         MOVFF   PREINC1, r0x04
0108 CFE4 F000 01026         MOVFF   PREINC1, r0x03
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
010C CFE4 F000 01027         MOVFF   PREINC1, r0x02
0110 CFE4 F000 01028         MOVFF   PREINC1, r0x01
0114 CFE4 F000 01029         MOVFF   PREINC1, r0x00
0118 CFE4 FFD9 01030         MOVFF   PREINC1, FSR2L
011C 0012      01031         RETURN  
               01032 
               01033 ; ; Starting pCode block
               01034 S_test__LowPriorityInterrupt    code
0000 01035 _LowPriorityInterrupt:
               01036 ;       .line   243; test.c     void LowPriorityInterrupt(void) __interrupt (2)
0000 CFE8 FFE5 01037         MOVFF   WREG, POSTDEC1
0004 CFD8 FFE5 01038         MOVFF   STATUS, POSTDEC1
0008 CFE0 FFE5 01039         MOVFF   BSR, POSTDEC1
000C CFF3 FFE5 01040         MOVFF   PRODL, POSTDEC1
0010 CFF4 FFE5 01041         MOVFF   PRODH, POSTDEC1
0014 CFE9 FFE5 01042         MOVFF   FSR0L, POSTDEC1
0018 CFEA FFE5 01043         MOVFF   FSR0H, POSTDEC1
001C CFFA FFE5 01044         MOVFF   PCLATH, POSTDEC1
0020 CFFB FFE5 01045         MOVFF   PCLATU, POSTDEC1
0024 CFD9 FFE5 01046         MOVFF   FSR2L, POSTDEC1
0028 CFE1 FFD9 01047         MOVFF   FSR1L, FSR2L
               01048 ;       .line   245; test.c     if (INTCON3bits.INT3F){ //Interupt Flag BUT1
002C A400      01049         BTFSS   _INTCON3bits, 2
002E D000      01050         BRA     _00195_DS_
               01051 ;       .line   246; test.c     switch(stateMenu){
0030 0E00      01052         MOVLW   0x00
0032 0000      01053         BANKSEL (_stateMenu + 1)
0034 5D00      01054         SUBWF   (_stateMenu + 1), W, B
0036 E100      01055         BNZ     _00212_DS_
0038 0E07      01056         MOVLW   0x07
003A 0000      01057         BANKSEL _stateMenu
003C 5D00      01058         SUBWF   _stateMenu, W, B
003E 01059 _00212_DS_:
003E B0D8      01060         BTFSC   STATUS, 0
0040 D000      01061         BRA     _00193_DS_
0042 C000 FFE5 01062         MOVFF   r0x00, POSTDEC1
0046 C000 FFE5 01063         MOVFF   r0x01, POSTDEC1
004A 6A00      01064         CLRF    r0x01
004C 0000      01065         BANKSEL _stateMenu
004E 3500      01066         RLCF    _stateMenu, W, B
0050 3600      01067         RLCF    r0x01, F
0052 34E8      01068         RLCF    WREG, W
0054 3600      01069         RLCF    r0x01, F
0056 0BFC      01070         ANDLW   0xfc
0058 6E00      01071         MOVWF   r0x00
005A 0E00      01072         MOVLW   UPPER(_00213_DS_)
005C 6EFB      01073         MOVWF   PCLATU
005E 0E00      01074         MOVLW   HIGH(_00213_DS_)
0060 6EFA      01075         MOVWF   PCLATH
0062 0E00      01076         MOVLW   LOW(_00213_DS_)
0064 2600      01077         ADDWF   r0x00, F
0066 5000      01078         MOVF    r0x01, W
0068 22FA      01079         ADDWFC  PCLATH, F
006A B0D8      01080         BTFSC   STATUS, 0
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
006C 2AFB      01081         INCF    PCLATU, F
006E 5000      01082         MOVF    r0x00, W
0070 CFE4 F000 01083         MOVFF   PREINC1, r0x01
0074 CFE4 F000 01084         MOVFF   PREINC1, r0x00
0078 6EF9      01085         MOVWF   PCL
007A 01086 _00213_DS_:
007A EF00 F000 01087         GOTO    _00186_DS_
007E EF00 F000 01088         GOTO    _00187_DS_
0082 EF00 F000 01089         GOTO    _00188_DS_
0086 EF00 F000 01090         GOTO    _00189_DS_
008A EF00 F000 01091         GOTO    _00190_DS_
008E EF00 F000 01092         GOTO    _00191_DS_
0092 EF00 F000 01093         GOTO    _00192_DS_
0096 01094 _00186_DS_:
               01095 ;       .line   247; test.c     case STANDARD_STATE: alarmStatus ^=1; // Enable/disable alarm
0096 0E01      01096         MOVLW   0x01
0098 0000      01097         BANKSEL _alarmStatus
009A 1B00      01098         XORWF   _alarmStatus, F, B
               01099 ;       .line   248; test.c     break; // ADD SMTHNG TO STOP ALARM :)
009C D000      01100         BRA     _00193_DS_
009E 01101 _00187_DS_:
               01102 ;       .line   249; test.c     case SET_TIME_MENU: stateMenu = SET_TIME_MINUTES;
009E 0E02      01103         MOVLW   0x02
00A0 0000      01104         BANKSEL _stateMenu
00A2 6F00      01105         MOVWF   _stateMenu, B
00A4 0000      01106         BANKSEL (_stateMenu + 1)
00A6 6B00      01107         CLRF    (_stateMenu + 1), B
               01108 ;       .line   250; test.c     break;
00A8 D000      01109         BRA     _00193_DS_
00AA 01110 _00188_DS_:
00AA 0000      01111         BANKSEL _minutes
               01112 ;       .line   251; test.c     case SET_TIME_MINUTES: minutes++;
00AC 2B00      01113         INCF    _minutes, F, B
00AE E300      01114         BNC     _10249_DS_
00B0 0000      01115         BANKSEL (_minutes + 1)
00B2 2B00      01116         INCF    (_minutes + 1), F, B
00B4 01117 _10249_DS_:
               01118 ;       .line   252; test.c     break;
00B4 D000      01119         BRA     _00193_DS_
00B6 01120 _00189_DS_:
00B6 0000      01121         BANKSEL _hours
               01122 ;       .line   253; test.c     case SET_TIME_HOURS : hours++;
00B8 2B00      01123         INCF    _hours, F, B
00BA E300      01124         BNC     _20250_DS_
00BC 0000      01125         BANKSEL (_hours + 1)
00BE 2B00      01126         INCF    (_hours + 1), F, B
00C0 01127 _20250_DS_:
               01128 ;       .line   254; test.c     break;
00C0 D000      01129         BRA     _00193_DS_
00C2 01130 _00190_DS_:
               01131 ;       .line   255; test.c     case SET_ALARMCLOCK_MENU : stateMenu = SET_ALARMCLOCK_MINUTES;
00C2 0E05      01132         MOVLW   0x05
00C4 0000      01133         BANKSEL _stateMenu
00C6 6F00      01134         MOVWF   _stateMenu, B
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00C8 0000      01135         BANKSEL (_stateMenu + 1)
00CA 6B00      01136         CLRF    (_stateMenu + 1), B
               01137 ;       .line   256; test.c     break;
00CC D000      01138         BRA     _00193_DS_
00CE 01139 _00191_DS_:
00CE 0000      01140         BANKSEL _alarmMinutes
               01141 ;       .line   257; test.c     case SET_ALARMCLOCK_MINUTES : alarmMinutes++;
00D0 2B00      01142         INCF    _alarmMinutes, F, B
00D2 E300      01143         BNC     _30251_DS_
00D4 0000      01144         BANKSEL (_alarmMinutes + 1)
00D6 2B00      01145         INCF    (_alarmMinutes + 1), F, B
00D8 01146 _30251_DS_:
               01147 ;       .line   258; test.c     break;
00D8 D000      01148         BRA     _00193_DS_
00DA 01149 _00192_DS_:
00DA 0000      01150         BANKSEL _alarmHours
               01151 ;       .line   259; test.c     case SET_ALARMCLOCK_HOURS : alarmHours++;
00DC 2B00      01152         INCF    _alarmHours, F, B
00DE E300      01153         BNC     _40252_DS_
00E0 0000      01154         BANKSEL (_alarmHours + 1)
00E2 2B00      01155         INCF    (_alarmHours + 1), F, B
00E4 01156 _40252_DS_:
00E4 01157 _00193_DS_:
               01158 ;       .line   265; test.c     INTCON3bits.INT3F = 0; // clear flag
00E4 9400      01159         BCF     _INTCON3bits, 2
00E6 01160 _00195_DS_:
               01161 ;       .line   268; test.c     if (INTCON3bits.INT1F){ //Interupt Flag BUT2
00E6 A000      01162         BTFSS   _INTCON3bits, 0
00E8 D000      01163         BRA     _00206_DS_
               01164 ;       .line   269; test.c     switch(stateMenu){
00EA 0E00      01165         MOVLW   0x00
00EC 0000      01166         BANKSEL (_stateMenu + 1)
00EE 5D00      01167         SUBWF   (_stateMenu + 1), W, B
00F0 E100      01168         BNZ     _00215_DS_
00F2 0E07      01169         MOVLW   0x07
00F4 0000      01170         BANKSEL _stateMenu
00F6 5D00      01171         SUBWF   _stateMenu, W, B
00F8 01172 _00215_DS_:
00F8 B0D8      01173         BTFSC   STATUS, 0
00FA D000      01174         BRA     _00203_DS_
00FC C000 FFE5 01175         MOVFF   r0x00, POSTDEC1
0100 C000 FFE5 01176         MOVFF   r0x01, POSTDEC1
0104 6A00      01177         CLRF    r0x01
0106 0000      01178         BANKSEL _stateMenu
0108 3500      01179         RLCF    _stateMenu, W, B
010A 3600      01180         RLCF    r0x01, F
010C 34E8      01181         RLCF    WREG, W
010E 3600      01182         RLCF    r0x01, F
0110 0BFC      01183         ANDLW   0xfc
0112 6E00      01184         MOVWF   r0x00
0114 0E00      01185         MOVLW   UPPER(_00216_DS_)
0116 6EFB      01186         MOVWF   PCLATU
0118 0E00      01187         MOVLW   HIGH(_00216_DS_)
011A 6EFA      01188         MOVWF   PCLATH
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
011C 0E00      01189         MOVLW   LOW(_00216_DS_)
011E 2600      01190         ADDWF   r0x00, F
0120 5000      01191         MOVF    r0x01, W
0122 22FA      01192         ADDWFC  PCLATH, F
0124 B0D8      01193         BTFSC   STATUS, 0
0126 2AFB      01194         INCF    PCLATU, F
0128 5000      01195         MOVF    r0x00, W
012A CFE4 F000 01196         MOVFF   PREINC1, r0x01
012E CFE4 F000 01197         MOVFF   PREINC1, r0x00
0132 6EF9      01198         MOVWF   PCL
0134 01199 _00216_DS_:
0134 EF00 F000 01200         GOTO    _00196_DS_
0138 EF00 F000 01201         GOTO    _00197_DS_
013C EF00 F000 01202         GOTO    _00198_DS_
0140 EF00 F000 01203         GOTO    _00199_DS_
0144 EF00 F000 01204         GOTO    _00200_DS_
0148 EF00 F000 01205         GOTO    _00201_DS_
014C EF00 F000 01206         GOTO    _00202_DS_
0150 01207 _00196_DS_:
               01208 ;       .line   270; test.c     case STANDARD_STATE: stateMenu = SET_TIME_MENU;
0150 0E01      01209         MOVLW   0x01
0152 0000      01210         BANKSEL _stateMenu
0154 6F00      01211         MOVWF   _stateMenu, B
0156 0000      01212         BANKSEL (_stateMenu + 1)
0158 6B00      01213         CLRF    (_stateMenu + 1), B
               01214 ;       .line   271; test.c     break; // ADD SMTHNG TO STOP ALARM :)
015A D000      01215         BRA     _00203_DS_
015C 01216 _00197_DS_:
               01217 ;       .line   272; test.c     case SET_TIME_MENU: stateMenu = SET_ALARMCLOCK_MENU;
015C 0E04      01218         MOVLW   0x04
015E 0000      01219         BANKSEL _stateMenu
0160 6F00      01220         MOVWF   _stateMenu, B
0162 0000      01221         BANKSEL (_stateMenu + 1)
0164 6B00      01222         CLRF    (_stateMenu + 1), B
               01223 ;       .line   273; test.c     break;
0166 D000      01224         BRA     _00203_DS_
0168 01225 _00198_DS_:
               01226 ;       .line   274; test.c     case SET_TIME_MINUTES: stateMenu = SET_TIME_HOURS;
0168 0E03      01227         MOVLW   0x03
016A 0000      01228         BANKSEL _stateMenu
016C 6F00      01229         MOVWF   _stateMenu, B
016E 0000      01230         BANKSEL (_stateMenu + 1)
0170 6B00      01231         CLRF    (_stateMenu + 1), B
               01232 ;       .line   275; test.c     break;
0172 D000      01233         BRA     _00203_DS_
0174 01234 _00199_DS_:
0174 0000      01235         BANKSEL _stateMenu
               01236 ;       .line   276; test.c     case SET_TIME_HOURS : stateMenu = STANDARD_STATE;
0176 6B00      01237         CLRF    _stateMenu, B
0178 0000      01238         BANKSEL (_stateMenu + 1)
017A 6B00      01239         CLRF    (_stateMenu + 1), B
               01240 ;       .line   277; test.c     break;
017C D000      01241         BRA     _00203_DS_
017E 01242 _00200_DS_:
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
017E 0000      01243         BANKSEL _stateMenu
               01244 ;       .line   278; test.c     case SET_ALARMCLOCK_MENU : stateMenu = STANDARD_STATE;
0180 6B00      01245         CLRF    _stateMenu, B
0182 0000      01246         BANKSEL (_stateMenu + 1)
0184 6B00      01247         CLRF    (_stateMenu + 1), B
               01248 ;       .line   279; test.c     break;
0186 D000      01249         BRA     _00203_DS_
0188 01250 _00201_DS_:
               01251 ;       .line   280; test.c     case SET_ALARMCLOCK_MINUTES : stateMenu = SET_ALARMCLOCK_HOURS;
0188 0E06      01252         MOVLW   0x06
018A 0000      01253         BANKSEL _stateMenu
018C 6F00      01254         MOVWF   _stateMenu, B
018E 0000      01255         BANKSEL (_stateMenu + 1)
0190 6B00      01256         CLRF    (_stateMenu + 1), B
               01257 ;       .line   281; test.c     break;
0192 D000      01258         BRA     _00203_DS_
0194 01259 _00202_DS_:
0194 0000      01260         BANKSEL _stateMenu
               01261 ;       .line   282; test.c     case SET_ALARMCLOCK_HOURS : stateMenu = STANDARD_STATE;
0196 6B00      01262         CLRF    _stateMenu, B
0198 0000      01263         BANKSEL (_stateMenu + 1)
019A 6B00      01264         CLRF    (_stateMenu + 1), B
019C 01265 _00203_DS_:
               01266 ;       .line   287; test.c     INTCON3bits.INT1F = 0; // clear flag
019C 9000      01267         BCF     _INTCON3bits, 0
019E 01268 _00206_DS_:
019E CFE4 FFD9 01269         MOVFF   PREINC1, FSR2L
01A2 CFE4 FFFB 01270         MOVFF   PREINC1, PCLATU
01A6 CFE4 FFFA 01271         MOVFF   PREINC1, PCLATH
01AA CFE4 FFEA 01272         MOVFF   PREINC1, FSR0H
01AE CFE4 FFE9 01273         MOVFF   PREINC1, FSR0L
01B2 CFE4 FFF4 01274         MOVFF   PREINC1, PRODH
01B6 CFE4 FFF3 01275         MOVFF   PREINC1, PRODL
01BA CFE4 FFE0 01276         MOVFF   PREINC1, BSR
01BE CFE4 FFD8 01277         MOVFF   PREINC1, STATUS
01C2 CFE4 FFE8 01278         MOVFF   PREINC1, WREG
01C6 0010      01279         RETFIE  
               01280 
               01281 ; ; Starting pCode block
               01282 S_test__HighPriorityInterrupt   code
0000 01283 _HighPriorityInterrupt:
               01284 ;       .line   225; test.c     void HighPriorityInterrupt(void) __interrupt (1)
0000 CFE8 FFE5 01285         MOVFF   WREG, POSTDEC1
0004 CFD8 FFE5 01286         MOVFF   STATUS, POSTDEC1
0008 CFE0 FFE5 01287         MOVFF   BSR, POSTDEC1
000C CFF3 FFE5 01288         MOVFF   PRODL, POSTDEC1
0010 CFF4 FFE5 01289         MOVFF   PRODH, POSTDEC1
0014 CFE9 FFE5 01290         MOVFF   FSR0L, POSTDEC1
0018 CFEA FFE5 01291         MOVFF   FSR0H, POSTDEC1
001C CFFA FFE5 01292         MOVFF   PCLATH, POSTDEC1
0020 CFFB FFE5 01293         MOVFF   PCLATU, POSTDEC1
0024 CFD9 FFE5 01294         MOVFF   FSR2L, POSTDEC1
0028 CFE1 FFD9 01295         MOVFF   FSR1L, FSR2L
               01296 ;       .line   227; test.c     if (INTCONbits.TMR0IF)
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
002C A400      01297         BTFSS   _INTCONbits, 2
002E D000      01298         BRA     _00181_DS_
               01299 ;       .line   231; test.c     TMR0H = 0xA0; 
0030 0EA0      01300         MOVLW   0xa0
0032 6E00      01301         MOVWF   _TMR0H
               01302 ;       .line   232; test.c     TMR0L = 0xA2;
0034 0EA2      01303         MOVLW   0xa2
0036 6E00      01304         MOVWF   _TMR0L
               01305 ;       .line   233; test.c     INTCONbits.TMR0IF = 0; // OBLIGATOIRE: Remettre le bit d'interruption à zéro
0038 9400      01306         BCF     _INTCONbits, 2
003A 0000      01307         BANKSEL _seconds
               01308 ;       .line   234; test.c     seconds++;
003C 2B00      01309         INCF    _seconds, F, B
003E E300      01310         BNC     _50253_DS_
0040 0000      01311         BANKSEL (_seconds + 1)
0042 2B00      01312         INCF    (_seconds + 1), F, B
0044 01313 _50253_DS_:
0044 01314 _00181_DS_:
0044 CFE4 FFD9 01315         MOVFF   PREINC1, FSR2L
0048 CFE4 FFFB 01316         MOVFF   PREINC1, PCLATU
004C CFE4 FFFA 01317         MOVFF   PREINC1, PCLATH
0050 CFE4 FFEA 01318         MOVFF   PREINC1, FSR0H
0054 CFE4 FFE9 01319         MOVFF   PREINC1, FSR0L
0058 CFE4 FFF4 01320         MOVFF   PREINC1, PRODH
005C CFE4 FFF3 01321         MOVFF   PREINC1, PRODL
0060 CFE4 FFE0 01322         MOVFF   PREINC1, BSR
0064 CFE4 FFD8 01323         MOVFF   PREINC1, STATUS
0068 CFE4 FFE8 01324         MOVFF   PREINC1, WREG
006C 0010      01325         RETFIE  
               01326 
               01327 ; ; Starting pCode block
               01328 S_test__StartTimer1     code
0000 01329 _StartTimer1:
               01330 ;       .line   206; test.c     void StartTimer1(void){
0000 CFD9 FFE5 01331         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 01332         MOVFF   FSR1L, FSR2L
               01333 ;       .line   207; test.c     T1CONbits.RD16 = 0; // Utilisation de 8 bits
0008 9E00      01334         BCF     _T1CONbits, 7
               01335 ;       .line   208; test.c     T1CONbits.T1RUN = 0; // Utilise l'oscillateur du TMR1
000A 9C00      01336         BCF     _T1CONbits, 6
               01337 ;       .line   209; test.c     T1CONbits.T1CKPS0 = 0; // désactiver le prescaler (1:1)
000C 9800      01338         BCF     _T1CONbits, 4
               01339 ;       .line   210; test.c     T1CONbits.T1CKPS1 = 0;
000E 9A00      01340         BCF     _T1CONbits, 5
               01341 ;       .line   211; test.c     T1CONbits.T1OSCEN = 1; // Active l'oscillateur
0010 8600      01342         BSF     _T1CONbits, 3
               01343 ;       .line   212; test.c     T1CONbits.TMR1CS = 1; // Utilise la clock de l'oscillateur.
0012 8200      01344         BSF     _T1CONbits, 1
               01345 ;       .line   213; test.c     TMR1H = 0xC0; // On commence aux 3/4 de la valeur pour ne compter que 0,5 sec.
0014 0EC0      01346         MOVLW   0xc0
0016 6E00      01347         MOVWF   _TMR1H
               01348 ;       .line   215; test.c     PIE1bits.TMR1IE = 1; //enable timer1 interrupt
0018 8000      01349         BSF     _PIE1bits, 0
               01350 ;       .line   216; test.c     IPR1bits.TMR1IP = 1; //timer1 interrupt set to high priority
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
001A 8000      01351         BSF     _IPR1bits, 0
               01352 ;       .line   217; test.c     PIR1bits.TMR1IF = 0; //clear timer1 flag bit
001C 9000      01353         BCF     _PIR1bits, 0
               01354 ;       .line   219; test.c     T1CONbits.TMR1ON = 1;
001E 8000      01355         BSF     _T1CONbits, 0
0020 CFE4 FFD9 01356         MOVFF   PREINC1, FSR2L
0024 0012      01357         RETURN  
               01358 
               01359 ; ; Starting pCode block
               01360 S_test__ConvertTime     code
0000 01361 _ConvertTime:
               01362 ;       .line   193; test.c     void ConvertTime(short time, char* str){
0000 CFD9 FFE5 01363         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 01364         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 01365         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 01366         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 01367         MOVFF   r0x02, POSTDEC1
0014 C000 FFE5 01368         MOVFF   r0x03, POSTDEC1
0018 C000 FFE5 01369         MOVFF   r0x04, POSTDEC1
001C 0E02      01370         MOVLW   0x02
001E CFDB F000 01371         MOVFF   PLUSW2, r0x00
0022 0E03      01372         MOVLW   0x03
0024 CFDB F000 01373         MOVFF   PLUSW2, r0x01
0028 0E04      01374         MOVLW   0x04
002A CFDB F000 01375         MOVFF   PLUSW2, r0x02
002E 0E05      01376         MOVLW   0x05
0030 CFDB F000 01377         MOVFF   PLUSW2, r0x03
0034 0E06      01378         MOVLW   0x06
0036 CFDB F000 01379         MOVFF   PLUSW2, r0x04
               01380 ;       .line   194; test.c     if(time<10){
003A 5000      01381         MOVF    r0x01, W
003C 0F80      01382         ADDLW   0x80
003E 0F80      01383         ADDLW   0x80
0040 E100      01384         BNZ     _00169_DS_
0042 0E0A      01385         MOVLW   0x0a
0044 5C00      01386         SUBWF   r0x00, W
0046 01387 _00169_DS_:
0046 E200      01388         BC      _00164_DS_
               01389 ;       .line   195; test.c     sprintf(str,"0%u\0",time);
0048 5000      01390         MOVF    r0x01, W
004A 6EE5      01391         MOVWF   POSTDEC1
004C 5000      01392         MOVF    r0x00, W
004E 6EE5      01393         MOVWF   POSTDEC1
0050 0E00      01394         MOVLW   UPPER(__str_9)
0052 6EE5      01395         MOVWF   POSTDEC1
0054 0E00      01396         MOVLW   HIGH(__str_9)
0056 6EE5      01397         MOVWF   POSTDEC1
0058 0E00      01398         MOVLW   LOW(__str_9)
005A 6EE5      01399         MOVWF   POSTDEC1
005C 5000      01400         MOVF    r0x04, W
005E 6EE5      01401         MOVWF   POSTDEC1
0060 5000      01402         MOVF    r0x03, W
0062 6EE5      01403         MOVWF   POSTDEC1
0064 5000      01404         MOVF    r0x02, W
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0066 6EE5      01405         MOVWF   POSTDEC1
0068 EC00 F000 01406         CALL    _sprintf
006C 0E08      01407         MOVLW   0x08
006E 26E1      01408         ADDWF   FSR1L, F
0070 D000      01409         BRA     _00166_DS_
0072 01410 _00164_DS_:
               01411 ;       .line   197; test.c     sprintf(str,"%u\0",time);
0072 5000      01412         MOVF    r0x01, W
0074 6EE5      01413         MOVWF   POSTDEC1
0076 5000      01414         MOVF    r0x00, W
0078 6EE5      01415         MOVWF   POSTDEC1
007A 0E00      01416         MOVLW   UPPER(__str_10)
007C 6EE5      01417         MOVWF   POSTDEC1
007E 0E00      01418         MOVLW   HIGH(__str_10)
0080 6EE5      01419         MOVWF   POSTDEC1
0082 0E00      01420         MOVLW   LOW(__str_10)
0084 6EE5      01421         MOVWF   POSTDEC1
0086 5000      01422         MOVF    r0x04, W
0088 6EE5      01423         MOVWF   POSTDEC1
008A 5000      01424         MOVF    r0x03, W
008C 6EE5      01425         MOVWF   POSTDEC1
008E 5000      01426         MOVF    r0x02, W
0090 6EE5      01427         MOVWF   POSTDEC1
0092 EC00 F000 01428         CALL    _sprintf
0096 0E08      01429         MOVLW   0x08
0098 26E1      01430         ADDWF   FSR1L, F
009A 01431 _00166_DS_:
009A CFE4 F000 01432         MOVFF   PREINC1, r0x04
009E CFE4 F000 01433         MOVFF   PREINC1, r0x03
00A2 CFE4 F000 01434         MOVFF   PREINC1, r0x02
00A6 CFE4 F000 01435         MOVFF   PREINC1, r0x01
00AA CFE4 F000 01436         MOVFF   PREINC1, r0x00
00AE CFE4 FFD9 01437         MOVFF   PREINC1, FSR2L
00B2 0012      01438         RETURN  
               01439 
               01440 ; ; Starting pCode block
               01441 S_test__UpdateLCD       code
0000 01442 _UpdateLCD:
               01443 ;       .line   145; test.c     void UpdateLCD(){
0000 CFD9 FFE5 01444         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 01445         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 01446         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 01447         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 01448         MOVFF   r0x02, POSTDEC1
0014 C000 FFE5 01449         MOVFF   r0x03, POSTDEC1
0018 C000 FFE5 01450         MOVFF   r0x04, POSTDEC1
001C C000 FFE5 01451         MOVFF   r0x05, POSTDEC1
0020 C000 FFE5 01452         MOVFF   r0x06, POSTDEC1
0024 C000 FFE5 01453         MOVFF   r0x07, POSTDEC1
0028 C000 FFE5 01454         MOVFF   r0x08, POSTDEC1
002C C000 FFE5 01455         MOVFF   r0x09, POSTDEC1
0030 C000 FFE5 01456         MOVFF   r0x0a, POSTDEC1
0034 C000 FFE5 01457         MOVFF   r0x0b, POSTDEC1
0038 C000 FFE5 01458         MOVFF   r0x0c, POSTDEC1
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
003C C000 FFE5 01459         MOVFF   r0x0d, POSTDEC1
0040 C000 FFE5 01460         MOVFF   r0x0e, POSTDEC1
               01461 ;       .line   146; test.c     switch(stateMenu){
0044 0E00      01462         MOVLW   0x00
0046 0000      01463         BANKSEL (_stateMenu + 1)
0048 5D00      01464         SUBWF   (_stateMenu + 1), W, B
004A E100      01465         BNZ     _00157_DS_
004C 0E07      01466         MOVLW   0x07
004E 0000      01467         BANKSEL _stateMenu
0050 5D00      01468         SUBWF   _stateMenu, W, B
0052 01469 _00157_DS_:
0052 B0D8      01470         BTFSC   STATUS, 0
0054 EF00 F000 01471         GOTO    _00152_DS_
0058 C000 FFE5 01472         MOVFF   r0x0f, POSTDEC1
005C C000 FFE5 01473         MOVFF   r0x10, POSTDEC1
0060 6A00      01474         CLRF    r0x10
0062 0000      01475         BANKSEL _stateMenu
0064 3500      01476         RLCF    _stateMenu, W, B
0066 3600      01477         RLCF    r0x10, F
0068 34E8      01478         RLCF    WREG, W
006A 3600      01479         RLCF    r0x10, F
006C 0BFC      01480         ANDLW   0xfc
006E 6E00      01481         MOVWF   r0x0f
0070 0E00      01482         MOVLW   UPPER(_00158_DS_)
0072 6EFB      01483         MOVWF   PCLATU
0074 0E00      01484         MOVLW   HIGH(_00158_DS_)
0076 6EFA      01485         MOVWF   PCLATH
0078 0E00      01486         MOVLW   LOW(_00158_DS_)
007A 2600      01487         ADDWF   r0x0f, F
007C 5000      01488         MOVF    r0x10, W
007E 22FA      01489         ADDWFC  PCLATH, F
0080 B0D8      01490         BTFSC   STATUS, 0
0082 2AFB      01491         INCF    PCLATU, F
0084 5000      01492         MOVF    r0x0f, W
0086 CFE4 F000 01493         MOVFF   PREINC1, r0x10
008A CFE4 F000 01494         MOVFF   PREINC1, r0x0f
008E 6EF9      01495         MOVWF   PCL
0090 01496 _00158_DS_:
0090 EF00 F000 01497         GOTO    _00142_DS_
0094 EF00 F000 01498         GOTO    _00146_DS_
0098 EF00 F000 01499         GOTO    _00147_DS_
009C EF00 F000 01500         GOTO    _00148_DS_
00A0 EF00 F000 01501         GOTO    _00149_DS_
00A4 EF00 F000 01502         GOTO    _00150_DS_
00A8 EF00 F000 01503         GOTO    _00151_DS_
00AC 01504 _00142_DS_:
               01505 ;       .line   148; test.c     ConvertTime(hours, h);
00AC C000 F000 01506         MOVFF   _hours, r0x00
00B0 C000 F000 01507         MOVFF   (_hours + 1), r0x01
00B4 0E00      01508         MOVLW   HIGH(_h)
00B6 6E00      01509         MOVWF   r0x03
00B8 0E00      01510         MOVLW   LOW(_h)
00BA 6E00      01511         MOVWF   r0x02
00BC 0E80      01512         MOVLW   0x80
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00BE 6E00      01513         MOVWF   r0x04
00C0 5000      01514         MOVF    r0x04, W
00C2 6EE5      01515         MOVWF   POSTDEC1
00C4 5000      01516         MOVF    r0x03, W
00C6 6EE5      01517         MOVWF   POSTDEC1
00C8 5000      01518         MOVF    r0x02, W
00CA 6EE5      01519         MOVWF   POSTDEC1
00CC 5000      01520         MOVF    r0x01, W
00CE 6EE5      01521         MOVWF   POSTDEC1
00D0 5000      01522         MOVF    r0x00, W
00D2 6EE5      01523         MOVWF   POSTDEC1
00D4 EC00 F000 01524         CALL    _ConvertTime
00D8 0E05      01525         MOVLW   0x05
00DA 26E1      01526         ADDWF   FSR1L, F
               01527 ;       .line   149; test.c     ConvertTime(minutes, m);
00DC C000 F000 01528         MOVFF   _minutes, r0x00
00E0 C000 F000 01529         MOVFF   (_minutes + 1), r0x01
00E4 0E00      01530         MOVLW   HIGH(_m)
00E6 6E00      01531         MOVWF   r0x03
00E8 0E00      01532         MOVLW   LOW(_m)
00EA 6E00      01533         MOVWF   r0x02
00EC 0E80      01534         MOVLW   0x80
00EE 6E00      01535         MOVWF   r0x04
00F0 5000      01536         MOVF    r0x04, W
00F2 6EE5      01537         MOVWF   POSTDEC1
00F4 5000      01538         MOVF    r0x03, W
00F6 6EE5      01539         MOVWF   POSTDEC1
00F8 5000      01540         MOVF    r0x02, W
00FA 6EE5      01541         MOVWF   POSTDEC1
00FC 5000      01542         MOVF    r0x01, W
00FE 6EE5      01543         MOVWF   POSTDEC1
0100 5000      01544         MOVF    r0x00, W
0102 6EE5      01545         MOVWF   POSTDEC1
0104 EC00 F000 01546         CALL    _ConvertTime
0108 0E05      01547         MOVLW   0x05
010A 26E1      01548         ADDWF   FSR1L, F
               01549 ;       .line   150; test.c     ConvertTime(seconds, s);
010C C000 F000 01550         MOVFF   _seconds, r0x00
0110 C000 F000 01551         MOVFF   (_seconds + 1), r0x01
0114 0E00      01552         MOVLW   HIGH(_s)
0116 6E00      01553         MOVWF   r0x03
0118 0E00      01554         MOVLW   LOW(_s)
011A 6E00      01555         MOVWF   r0x02
011C 0E80      01556         MOVLW   0x80
011E 6E00      01557         MOVWF   r0x04
0120 5000      01558         MOVF    r0x04, W
0122 6EE5      01559         MOVWF   POSTDEC1
0124 5000      01560         MOVF    r0x03, W
0126 6EE5      01561         MOVWF   POSTDEC1
0128 5000      01562         MOVF    r0x02, W
012A 6EE5      01563         MOVWF   POSTDEC1
012C 5000      01564         MOVF    r0x01, W
012E 6EE5      01565         MOVWF   POSTDEC1
0130 5000      01566         MOVF    r0x00, W
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0132 6EE5      01567         MOVWF   POSTDEC1
0134 EC00 F000 01568         CALL    _ConvertTime
0138 0E05      01569         MOVLW   0x05
013A 26E1      01570         ADDWF   FSR1L, F
013C 0000      01571         BANKSEL _alarmStatus
               01572 ;       .line   151; test.c     if(alarmStatus){
013E 5100      01573         MOVF    _alarmStatus, W, B
0140 0000      01574         BANKSEL (_alarmStatus + 1)
0142 1100      01575         IORWF   (_alarmStatus + 1), W, B
0144 E000      01576         BZ      _00144_DS_
               01577 ;       .line   152; test.c     sprintf(alarmState,"ON ");
0146 0E00      01578         MOVLW   HIGH(_alarmState)
0148 6E00      01579         MOVWF   r0x01
014A 0E00      01580         MOVLW   LOW(_alarmState)
014C 6E00      01581         MOVWF   r0x00
014E 0E80      01582         MOVLW   0x80
0150 6E00      01583         MOVWF   r0x02
0152 0E00      01584         MOVLW   UPPER(__str_0)
0154 6EE5      01585         MOVWF   POSTDEC1
0156 0E00      01586         MOVLW   HIGH(__str_0)
0158 6EE5      01587         MOVWF   POSTDEC1
015A 0E00      01588         MOVLW   LOW(__str_0)
015C 6EE5      01589         MOVWF   POSTDEC1
015E 5000      01590         MOVF    r0x02, W
0160 6EE5      01591         MOVWF   POSTDEC1
0162 5000      01592         MOVF    r0x01, W
0164 6EE5      01593         MOVWF   POSTDEC1
0166 5000      01594         MOVF    r0x00, W
0168 6EE5      01595         MOVWF   POSTDEC1
016A EC00 F000 01596         CALL    _sprintf
016E 0E06      01597         MOVLW   0x06
0170 26E1      01598         ADDWF   FSR1L, F
0172 D000      01599         BRA     _00145_DS_
0174 01600 _00144_DS_:
               01601 ;       .line   154; test.c     sprintf(alarmState,"OFF");
0174 0E00      01602         MOVLW   HIGH(_alarmState)
0176 6E00      01603         MOVWF   r0x01
0178 0E00      01604         MOVLW   LOW(_alarmState)
017A 6E00      01605         MOVWF   r0x00
017C 0E80      01606         MOVLW   0x80
017E 6E00      01607         MOVWF   r0x02
0180 0E00      01608         MOVLW   UPPER(__str_1)
0182 6EE5      01609         MOVWF   POSTDEC1
0184 0E00      01610         MOVLW   HIGH(__str_1)
0186 6EE5      01611         MOVWF   POSTDEC1
0188 0E00      01612         MOVLW   LOW(__str_1)
018A 6EE5      01613         MOVWF   POSTDEC1
018C 5000      01614         MOVF    r0x02, W
018E 6EE5      01615         MOVWF   POSTDEC1
0190 5000      01616         MOVF    r0x01, W
0192 6EE5      01617         MOVWF   POSTDEC1
0194 5000      01618         MOVF    r0x00, W
0196 6EE5      01619         MOVWF   POSTDEC1
0198 EC00 F000 01620         CALL    _sprintf
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
019C 0E06      01621         MOVLW   0x06
019E 26E1      01622         ADDWF   FSR1L, F
01A0 01623 _00145_DS_:
               01624 ;       .line   156; test.c     sprintf(LCDPrint,"    %s:%s:%s    Alarm %s",h,m,s,alarmState);
01A0 0E00      01625         MOVLW   HIGH(_alarmState)
01A2 6E00      01626         MOVWF   r0x01
01A4 0E00      01627         MOVLW   LOW(_alarmState)
01A6 6E00      01628         MOVWF   r0x00
01A8 0E80      01629         MOVLW   0x80
01AA 6E00      01630         MOVWF   r0x02
01AC 0E00      01631         MOVLW   HIGH(_s)
01AE 6E00      01632         MOVWF   r0x04
01B0 0E00      01633         MOVLW   LOW(_s)
01B2 6E00      01634         MOVWF   r0x03
01B4 0E80      01635         MOVLW   0x80
01B6 6E00      01636         MOVWF   r0x05
01B8 0E00      01637         MOVLW   HIGH(_m)
01BA 6E00      01638         MOVWF   r0x07
01BC 0E00      01639         MOVLW   LOW(_m)
01BE 6E00      01640         MOVWF   r0x06
01C0 0E80      01641         MOVLW   0x80
01C2 6E00      01642         MOVWF   r0x08
01C4 0E00      01643         MOVLW   HIGH(_h)
01C6 6E00      01644         MOVWF   r0x0a
01C8 0E00      01645         MOVLW   LOW(_h)
01CA 6E00      01646         MOVWF   r0x09
01CC 0E80      01647         MOVLW   0x80
01CE 6E00      01648         MOVWF   r0x0b
01D0 0E00      01649         MOVLW   HIGH(_LCDPrint)
01D2 6E00      01650         MOVWF   r0x0d
01D4 0E00      01651         MOVLW   LOW(_LCDPrint)
01D6 6E00      01652         MOVWF   r0x0c
01D8 0E80      01653         MOVLW   0x80
01DA 6E00      01654         MOVWF   r0x0e
01DC 5000      01655         MOVF    r0x02, W
01DE 6EE5      01656         MOVWF   POSTDEC1
01E0 5000      01657         MOVF    r0x01, W
01E2 6EE5      01658         MOVWF   POSTDEC1
01E4 5000      01659         MOVF    r0x00, W
01E6 6EE5      01660         MOVWF   POSTDEC1
01E8 5000      01661         MOVF    r0x05, W
01EA 6EE5      01662         MOVWF   POSTDEC1
01EC 5000      01663         MOVF    r0x04, W
01EE 6EE5      01664         MOVWF   POSTDEC1
01F0 5000      01665         MOVF    r0x03, W
01F2 6EE5      01666         MOVWF   POSTDEC1
01F4 5000      01667         MOVF    r0x08, W
01F6 6EE5      01668         MOVWF   POSTDEC1
01F8 5000      01669         MOVF    r0x07, W
01FA 6EE5      01670         MOVWF   POSTDEC1
01FC 5000      01671         MOVF    r0x06, W
01FE 6EE5      01672         MOVWF   POSTDEC1
0200 5000      01673         MOVF    r0x0b, W
0202 6EE5      01674         MOVWF   POSTDEC1
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0204 5000      01675         MOVF    r0x0a, W
0206 6EE5      01676         MOVWF   POSTDEC1
0208 5000      01677         MOVF    r0x09, W
020A 6EE5      01678         MOVWF   POSTDEC1
020C 0E00      01679         MOVLW   UPPER(__str_2)
020E 6EE5      01680         MOVWF   POSTDEC1
0210 0E00      01681         MOVLW   HIGH(__str_2)
0212 6EE5      01682         MOVWF   POSTDEC1
0214 0E00      01683         MOVLW   LOW(__str_2)
0216 6EE5      01684         MOVWF   POSTDEC1
0218 5000      01685         MOVF    r0x0e, W
021A 6EE5      01686         MOVWF   POSTDEC1
021C 5000      01687         MOVF    r0x0d, W
021E 6EE5      01688         MOVWF   POSTDEC1
0220 5000      01689         MOVF    r0x0c, W
0222 6EE5      01690         MOVWF   POSTDEC1
0224 EC00 F000 01691         CALL    _sprintf
0228 0E12      01692         MOVLW   0x12
022A 26E1      01693         ADDWF   FSR1L, F
               01694 ;       .line   157; test.c     break;
022C D000      01695         BRA     _00152_DS_
022E 01696 _00146_DS_:
               01697 ;       .line   159; test.c     sprintf(LCDPrint, "      MENU        Set time ?");
022E 0E00      01698         MOVLW   HIGH(_LCDPrint)
0230 6E00      01699         MOVWF   r0x01
0232 0E00      01700         MOVLW   LOW(_LCDPrint)
0234 6E00      01701         MOVWF   r0x00
0236 0E80      01702         MOVLW   0x80
0238 6E00      01703         MOVWF   r0x02
023A 0E00      01704         MOVLW   UPPER(__str_3)
023C 6EE5      01705         MOVWF   POSTDEC1
023E 0E00      01706         MOVLW   HIGH(__str_3)
0240 6EE5      01707         MOVWF   POSTDEC1
0242 0E00      01708         MOVLW   LOW(__str_3)
0244 6EE5      01709         MOVWF   POSTDEC1
0246 5000      01710         MOVF    r0x02, W
0248 6EE5      01711         MOVWF   POSTDEC1
024A 5000      01712         MOVF    r0x01, W
024C 6EE5      01713         MOVWF   POSTDEC1
024E 5000      01714         MOVF    r0x00, W
0250 6EE5      01715         MOVWF   POSTDEC1
0252 EC00 F000 01716         CALL    _sprintf
0256 0E06      01717         MOVLW   0x06
0258 26E1      01718         ADDWF   FSR1L, F
               01719 ;       .line   160; test.c     break;
025A D000      01720         BRA     _00152_DS_
025C 01721 _00147_DS_:
               01722 ;       .line   162; test.c     ConvertTime(hours, h);
025C C000 F000 01723         MOVFF   _hours, r0x00
0260 C000 F000 01724         MOVFF   (_hours + 1), r0x01
0264 0E00      01725         MOVLW   HIGH(_h)
0266 6E00      01726         MOVWF   r0x03
0268 0E00      01727         MOVLW   LOW(_h)
026A 6E00      01728         MOVWF   r0x02
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
026C 0E80      01729         MOVLW   0x80
026E 6E00      01730         MOVWF   r0x04
0270 5000      01731         MOVF    r0x04, W
0272 6EE5      01732         MOVWF   POSTDEC1
0274 5000      01733         MOVF    r0x03, W
0276 6EE5      01734         MOVWF   POSTDEC1
0278 5000      01735         MOVF    r0x02, W
027A 6EE5      01736         MOVWF   POSTDEC1
027C 5000      01737         MOVF    r0x01, W
027E 6EE5      01738         MOVWF   POSTDEC1
0280 5000      01739         MOVF    r0x00, W
0282 6EE5      01740         MOVWF   POSTDEC1
0284 EC00 F000 01741         CALL    _ConvertTime
0288 0E05      01742         MOVLW   0x05
028A 26E1      01743         ADDWF   FSR1L, F
               01744 ;       .line   163; test.c     ConvertTime(minutes, m);
028C C000 F000 01745         MOVFF   _minutes, r0x00
0290 C000 F000 01746         MOVFF   (_minutes + 1), r0x01
0294 0E00      01747         MOVLW   HIGH(_m)
0296 6E00      01748         MOVWF   r0x03
0298 0E00      01749         MOVLW   LOW(_m)
029A 6E00      01750         MOVWF   r0x02
029C 0E80      01751         MOVLW   0x80
029E 6E00      01752         MOVWF   r0x04
02A0 5000      01753         MOVF    r0x04, W
02A2 6EE5      01754         MOVWF   POSTDEC1
02A4 5000      01755         MOVF    r0x03, W
02A6 6EE5      01756         MOVWF   POSTDEC1
02A8 5000      01757         MOVF    r0x02, W
02AA 6EE5      01758         MOVWF   POSTDEC1
02AC 5000      01759         MOVF    r0x01, W
02AE 6EE5      01760         MOVWF   POSTDEC1
02B0 5000      01761         MOVF    r0x00, W
02B2 6EE5      01762         MOVWF   POSTDEC1
02B4 EC00 F000 01763         CALL    _ConvertTime
02B8 0E05      01764         MOVLW   0x05
02BA 26E1      01765         ADDWF   FSR1L, F
               01766 ;       .line   164; test.c     ConvertTime(seconds, s);
02BC C000 F000 01767         MOVFF   _seconds, r0x00
02C0 C000 F000 01768         MOVFF   (_seconds + 1), r0x01
02C4 0E00      01769         MOVLW   HIGH(_s)
02C6 6E00      01770         MOVWF   r0x03
02C8 0E00      01771         MOVLW   LOW(_s)
02CA 6E00      01772         MOVWF   r0x02
02CC 0E80      01773         MOVLW   0x80
02CE 6E00      01774         MOVWF   r0x04
02D0 5000      01775         MOVF    r0x04, W
02D2 6EE5      01776         MOVWF   POSTDEC1
02D4 5000      01777         MOVF    r0x03, W
02D6 6EE5      01778         MOVWF   POSTDEC1
02D8 5000      01779         MOVF    r0x02, W
02DA 6EE5      01780         MOVWF   POSTDEC1
02DC 5000      01781         MOVF    r0x01, W
02DE 6EE5      01782         MOVWF   POSTDEC1
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
02E0 5000      01783         MOVF    r0x00, W
02E2 6EE5      01784         MOVWF   POSTDEC1
02E4 EC00 F000 01785         CALL    _ConvertTime
02E8 0E05      01786         MOVLW   0x05
02EA 26E1      01787         ADDWF   FSR1L, F
               01788 ;       .line   165; test.c     sprintf(LCDPrint,"Set Minutes     %s:[%s]:%s",h,m,s);
02EC 0E00      01789         MOVLW   HIGH(_s)
02EE 6E00      01790         MOVWF   r0x01
02F0 0E00      01791         MOVLW   LOW(_s)
02F2 6E00      01792         MOVWF   r0x00
02F4 0E80      01793         MOVLW   0x80
02F6 6E00      01794         MOVWF   r0x02
02F8 0E00      01795         MOVLW   HIGH(_m)
02FA 6E00      01796         MOVWF   r0x04
02FC 0E00      01797         MOVLW   LOW(_m)
02FE 6E00      01798         MOVWF   r0x03
0300 0E80      01799         MOVLW   0x80
0302 6E00      01800         MOVWF   r0x05
0304 0E00      01801         MOVLW   HIGH(_h)
0306 6E00      01802         MOVWF   r0x07
0308 0E00      01803         MOVLW   LOW(_h)
030A 6E00      01804         MOVWF   r0x06
030C 0E80      01805         MOVLW   0x80
030E 6E00      01806         MOVWF   r0x08
0310 0E00      01807         MOVLW   HIGH(_LCDPrint)
0312 6E00      01808         MOVWF   r0x0a
0314 0E00      01809         MOVLW   LOW(_LCDPrint)
0316 6E00      01810         MOVWF   r0x09
0318 0E80      01811         MOVLW   0x80
031A 6E00      01812         MOVWF   r0x0b
031C 5000      01813         MOVF    r0x02, W
031E 6EE5      01814         MOVWF   POSTDEC1
0320 5000      01815         MOVF    r0x01, W
0322 6EE5      01816         MOVWF   POSTDEC1
0324 5000      01817         MOVF    r0x00, W
0326 6EE5      01818         MOVWF   POSTDEC1
0328 5000      01819         MOVF    r0x05, W
032A 6EE5      01820         MOVWF   POSTDEC1
032C 5000      01821         MOVF    r0x04, W
032E 6EE5      01822         MOVWF   POSTDEC1
0330 5000      01823         MOVF    r0x03, W
0332 6EE5      01824         MOVWF   POSTDEC1
0334 5000      01825         MOVF    r0x08, W
0336 6EE5      01826         MOVWF   POSTDEC1
0338 5000      01827         MOVF    r0x07, W
033A 6EE5      01828         MOVWF   POSTDEC1
033C 5000      01829         MOVF    r0x06, W
033E 6EE5      01830         MOVWF   POSTDEC1
0340 0E00      01831         MOVLW   UPPER(__str_4)
0342 6EE5      01832         MOVWF   POSTDEC1
0344 0E00      01833         MOVLW   HIGH(__str_4)
0346 6EE5      01834         MOVWF   POSTDEC1
0348 0E00      01835         MOVLW   LOW(__str_4)
034A 6EE5      01836         MOVWF   POSTDEC1
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
034C 5000      01837         MOVF    r0x0b, W
034E 6EE5      01838         MOVWF   POSTDEC1
0350 5000      01839         MOVF    r0x0a, W
0352 6EE5      01840         MOVWF   POSTDEC1
0354 5000      01841         MOVF    r0x09, W
0356 6EE5      01842         MOVWF   POSTDEC1
0358 EC00 F000 01843         CALL    _sprintf
035C 0E0F      01844         MOVLW   0x0f
035E 26E1      01845         ADDWF   FSR1L, F
               01846 ;       .line   166; test.c     break;
0360 D000      01847         BRA     _00152_DS_
0362 01848 _00148_DS_:
               01849 ;       .line   168; test.c     ConvertTime(hours, h);
0362 C000 F000 01850         MOVFF   _hours, r0x00
0366 C000 F000 01851         MOVFF   (_hours + 1), r0x01
036A 0E00      01852         MOVLW   HIGH(_h)
036C 6E00      01853         MOVWF   r0x03
036E 0E00      01854         MOVLW   LOW(_h)
0370 6E00      01855         MOVWF   r0x02
0372 0E80      01856         MOVLW   0x80
0374 6E00      01857         MOVWF   r0x04
0376 5000      01858         MOVF    r0x04, W
0378 6EE5      01859         MOVWF   POSTDEC1
037A 5000      01860         MOVF    r0x03, W
037C 6EE5      01861         MOVWF   POSTDEC1
037E 5000      01862         MOVF    r0x02, W
0380 6EE5      01863         MOVWF   POSTDEC1
0382 5000      01864         MOVF    r0x01, W
0384 6EE5      01865         MOVWF   POSTDEC1
0386 5000      01866         MOVF    r0x00, W
0388 6EE5      01867         MOVWF   POSTDEC1
038A EC00 F000 01868         CALL    _ConvertTime
038E 0E05      01869         MOVLW   0x05
0390 26E1      01870         ADDWF   FSR1L, F
               01871 ;       .line   169; test.c     ConvertTime(minutes, m);
0392 C000 F000 01872         MOVFF   _minutes, r0x00
0396 C000 F000 01873         MOVFF   (_minutes + 1), r0x01
039A 0E00      01874         MOVLW   HIGH(_m)
039C 6E00      01875         MOVWF   r0x03
039E 0E00      01876         MOVLW   LOW(_m)
03A0 6E00      01877         MOVWF   r0x02
03A2 0E80      01878         MOVLW   0x80
03A4 6E00      01879         MOVWF   r0x04
03A6 5000      01880         MOVF    r0x04, W
03A8 6EE5      01881         MOVWF   POSTDEC1
03AA 5000      01882         MOVF    r0x03, W
03AC 6EE5      01883         MOVWF   POSTDEC1
03AE 5000      01884         MOVF    r0x02, W
03B0 6EE5      01885         MOVWF   POSTDEC1
03B2 5000      01886         MOVF    r0x01, W
03B4 6EE5      01887         MOVWF   POSTDEC1
03B6 5000      01888         MOVF    r0x00, W
03B8 6EE5      01889         MOVWF   POSTDEC1
03BA EC00 F000 01890         CALL    _ConvertTime
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
03BE 0E05      01891         MOVLW   0x05
03C0 26E1      01892         ADDWF   FSR1L, F
               01893 ;       .line   170; test.c     ConvertTime(seconds, s);
03C2 C000 F000 01894         MOVFF   _seconds, r0x00
03C6 C000 F000 01895         MOVFF   (_seconds + 1), r0x01
03CA 0E00      01896         MOVLW   HIGH(_s)
03CC 6E00      01897         MOVWF   r0x03
03CE 0E00      01898         MOVLW   LOW(_s)
03D0 6E00      01899         MOVWF   r0x02
03D2 0E80      01900         MOVLW   0x80
03D4 6E00      01901         MOVWF   r0x04
03D6 5000      01902         MOVF    r0x04, W
03D8 6EE5      01903         MOVWF   POSTDEC1
03DA 5000      01904         MOVF    r0x03, W
03DC 6EE5      01905         MOVWF   POSTDEC1
03DE 5000      01906         MOVF    r0x02, W
03E0 6EE5      01907         MOVWF   POSTDEC1
03E2 5000      01908         MOVF    r0x01, W
03E4 6EE5      01909         MOVWF   POSTDEC1
03E6 5000      01910         MOVF    r0x00, W
03E8 6EE5      01911         MOVWF   POSTDEC1
03EA EC00 F000 01912         CALL    _ConvertTime
03EE 0E05      01913         MOVLW   0x05
03F0 26E1      01914         ADDWF   FSR1L, F
               01915 ;       .line   171; test.c     sprintf(LCDPrint,"Set Hours       [%s]:%s:%s",h,m,s);
03F2 0E00      01916         MOVLW   HIGH(_s)
03F4 6E00      01917         MOVWF   r0x01
03F6 0E00      01918         MOVLW   LOW(_s)
03F8 6E00      01919         MOVWF   r0x00
03FA 0E80      01920         MOVLW   0x80
03FC 6E00      01921         MOVWF   r0x02
03FE 0E00      01922         MOVLW   HIGH(_m)
0400 6E00      01923         MOVWF   r0x04
0402 0E00      01924         MOVLW   LOW(_m)
0404 6E00      01925         MOVWF   r0x03
0406 0E80      01926         MOVLW   0x80
0408 6E00      01927         MOVWF   r0x05
040A 0E00      01928         MOVLW   HIGH(_h)
040C 6E00      01929         MOVWF   r0x07
040E 0E00      01930         MOVLW   LOW(_h)
0410 6E00      01931         MOVWF   r0x06
0412 0E80      01932         MOVLW   0x80
0414 6E00      01933         MOVWF   r0x08
0416 0E00      01934         MOVLW   HIGH(_LCDPrint)
0418 6E00      01935         MOVWF   r0x0a
041A 0E00      01936         MOVLW   LOW(_LCDPrint)
041C 6E00      01937         MOVWF   r0x09
041E 0E80      01938         MOVLW   0x80
0420 6E00      01939         MOVWF   r0x0b
0422 5000      01940         MOVF    r0x02, W
0424 6EE5      01941         MOVWF   POSTDEC1
0426 5000      01942         MOVF    r0x01, W
0428 6EE5      01943         MOVWF   POSTDEC1
042A 5000      01944         MOVF    r0x00, W
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
042C 6EE5      01945         MOVWF   POSTDEC1
042E 5000      01946         MOVF    r0x05, W
0430 6EE5      01947         MOVWF   POSTDEC1
0432 5000      01948         MOVF    r0x04, W
0434 6EE5      01949         MOVWF   POSTDEC1
0436 5000      01950         MOVF    r0x03, W
0438 6EE5      01951         MOVWF   POSTDEC1
043A 5000      01952         MOVF    r0x08, W
043C 6EE5      01953         MOVWF   POSTDEC1
043E 5000      01954         MOVF    r0x07, W
0440 6EE5      01955         MOVWF   POSTDEC1
0442 5000      01956         MOVF    r0x06, W
0444 6EE5      01957         MOVWF   POSTDEC1
0446 0E00      01958         MOVLW   UPPER(__str_5)
0448 6EE5      01959         MOVWF   POSTDEC1
044A 0E00      01960         MOVLW   HIGH(__str_5)
044C 6EE5      01961         MOVWF   POSTDEC1
044E 0E00      01962         MOVLW   LOW(__str_5)
0450 6EE5      01963         MOVWF   POSTDEC1
0452 5000      01964         MOVF    r0x0b, W
0454 6EE5      01965         MOVWF   POSTDEC1
0456 5000      01966         MOVF    r0x0a, W
0458 6EE5      01967         MOVWF   POSTDEC1
045A 5000      01968         MOVF    r0x09, W
045C 6EE5      01969         MOVWF   POSTDEC1
045E EC00 F000 01970         CALL    _sprintf
0462 0E0F      01971         MOVLW   0x0f
0464 26E1      01972         ADDWF   FSR1L, F
               01973 ;       .line   172; test.c     break;
0466 D000      01974         BRA     _00152_DS_
0468 01975 _00149_DS_:
               01976 ;       .line   174; test.c     sprintf(LCDPrint, "      MENU      Set Alarmclock?");
0468 0E00      01977         MOVLW   HIGH(_LCDPrint)
046A 6E00      01978         MOVWF   r0x01
046C 0E00      01979         MOVLW   LOW(_LCDPrint)
046E 6E00      01980         MOVWF   r0x00
0470 0E80      01981         MOVLW   0x80
0472 6E00      01982         MOVWF   r0x02
0474 0E00      01983         MOVLW   UPPER(__str_6)
0476 6EE5      01984         MOVWF   POSTDEC1
0478 0E00      01985         MOVLW   HIGH(__str_6)
047A 6EE5      01986         MOVWF   POSTDEC1
047C 0E00      01987         MOVLW   LOW(__str_6)
047E 6EE5      01988         MOVWF   POSTDEC1
0480 5000      01989         MOVF    r0x02, W
0482 6EE5      01990         MOVWF   POSTDEC1
0484 5000      01991         MOVF    r0x01, W
0486 6EE5      01992         MOVWF   POSTDEC1
0488 5000      01993         MOVF    r0x00, W
048A 6EE5      01994         MOVWF   POSTDEC1
048C EC00 F000 01995         CALL    _sprintf
0490 0E06      01996         MOVLW   0x06
0492 26E1      01997         ADDWF   FSR1L, F
               01998 ;       .line   175; test.c     break;
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0494 D000      01999         BRA     _00152_DS_
0496 02000 _00150_DS_:
               02001 ;       .line   177; test.c     ConvertTime(alarmHours, h);
0496 C000 F000 02002         MOVFF   _alarmHours, r0x00
049A C000 F000 02003         MOVFF   (_alarmHours + 1), r0x01
049E 0E00      02004         MOVLW   HIGH(_h)
04A0 6E00      02005         MOVWF   r0x03
04A2 0E00      02006         MOVLW   LOW(_h)
04A4 6E00      02007         MOVWF   r0x02
04A6 0E80      02008         MOVLW   0x80
04A8 6E00      02009         MOVWF   r0x04
04AA 5000      02010         MOVF    r0x04, W
04AC 6EE5      02011         MOVWF   POSTDEC1
04AE 5000      02012         MOVF    r0x03, W
04B0 6EE5      02013         MOVWF   POSTDEC1
04B2 5000      02014         MOVF    r0x02, W
04B4 6EE5      02015         MOVWF   POSTDEC1
04B6 5000      02016         MOVF    r0x01, W
04B8 6EE5      02017         MOVWF   POSTDEC1
04BA 5000      02018         MOVF    r0x00, W
04BC 6EE5      02019         MOVWF   POSTDEC1
04BE EC00 F000 02020         CALL    _ConvertTime
04C2 0E05      02021         MOVLW   0x05
04C4 26E1      02022         ADDWF   FSR1L, F
               02023 ;       .line   178; test.c     ConvertTime(alarmMinutes, m);
04C6 C000 F000 02024         MOVFF   _alarmMinutes, r0x00
04CA C000 F000 02025         MOVFF   (_alarmMinutes + 1), r0x01
04CE 0E00      02026         MOVLW   HIGH(_m)
04D0 6E00      02027         MOVWF   r0x03
04D2 0E00      02028         MOVLW   LOW(_m)
04D4 6E00      02029         MOVWF   r0x02
04D6 0E80      02030         MOVLW   0x80
04D8 6E00      02031         MOVWF   r0x04
04DA 5000      02032         MOVF    r0x04, W
04DC 6EE5      02033         MOVWF   POSTDEC1
04DE 5000      02034         MOVF    r0x03, W
04E0 6EE5      02035         MOVWF   POSTDEC1
04E2 5000      02036         MOVF    r0x02, W
04E4 6EE5      02037         MOVWF   POSTDEC1
04E6 5000      02038         MOVF    r0x01, W
04E8 6EE5      02039         MOVWF   POSTDEC1
04EA 5000      02040         MOVF    r0x00, W
04EC 6EE5      02041         MOVWF   POSTDEC1
04EE EC00 F000 02042         CALL    _ConvertTime
04F2 0E05      02043         MOVLW   0x05
04F4 26E1      02044         ADDWF   FSR1L, F
               02045 ;       .line   179; test.c     sprintf(LCDPrint,"Set Alarm Min    %s:[%s]",h,m);
04F6 0E00      02046         MOVLW   HIGH(_m)
04F8 6E00      02047         MOVWF   r0x01
04FA 0E00      02048         MOVLW   LOW(_m)
04FC 6E00      02049         MOVWF   r0x00
04FE 0E80      02050         MOVLW   0x80
0500 6E00      02051         MOVWF   r0x02
0502 0E00      02052         MOVLW   HIGH(_h)
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0504 6E00      02053         MOVWF   r0x04
0506 0E00      02054         MOVLW   LOW(_h)
0508 6E00      02055         MOVWF   r0x03
050A 0E80      02056         MOVLW   0x80
050C 6E00      02057         MOVWF   r0x05
050E 0E00      02058         MOVLW   HIGH(_LCDPrint)
0510 6E00      02059         MOVWF   r0x07
0512 0E00      02060         MOVLW   LOW(_LCDPrint)
0514 6E00      02061         MOVWF   r0x06
0516 0E80      02062         MOVLW   0x80
0518 6E00      02063         MOVWF   r0x08
051A 5000      02064         MOVF    r0x02, W
051C 6EE5      02065         MOVWF   POSTDEC1
051E 5000      02066         MOVF    r0x01, W
0520 6EE5      02067         MOVWF   POSTDEC1
0522 5000      02068         MOVF    r0x00, W
0524 6EE5      02069         MOVWF   POSTDEC1
0526 5000      02070         MOVF    r0x05, W
0528 6EE5      02071         MOVWF   POSTDEC1
052A 5000      02072         MOVF    r0x04, W
052C 6EE5      02073         MOVWF   POSTDEC1
052E 5000      02074         MOVF    r0x03, W
0530 6EE5      02075         MOVWF   POSTDEC1
0532 0E00      02076         MOVLW   UPPER(__str_7)
0534 6EE5      02077         MOVWF   POSTDEC1
0536 0E00      02078         MOVLW   HIGH(__str_7)
0538 6EE5      02079         MOVWF   POSTDEC1
053A 0E00      02080         MOVLW   LOW(__str_7)
053C 6EE5      02081         MOVWF   POSTDEC1
053E 5000      02082         MOVF    r0x08, W
0540 6EE5      02083         MOVWF   POSTDEC1
0542 5000      02084         MOVF    r0x07, W
0544 6EE5      02085         MOVWF   POSTDEC1
0546 5000      02086         MOVF    r0x06, W
0548 6EE5      02087         MOVWF   POSTDEC1
054A EC00 F000 02088         CALL    _sprintf
054E 0E0C      02089         MOVLW   0x0c
0550 26E1      02090         ADDWF   FSR1L, F
               02091 ;       .line   180; test.c     break;
0552 D000      02092         BRA     _00152_DS_
0554 02093 _00151_DS_:
               02094 ;       .line   182; test.c     ConvertTime(alarmHours, h);
0554 C000 F000 02095         MOVFF   _alarmHours, r0x00
0558 C000 F000 02096         MOVFF   (_alarmHours + 1), r0x01
055C 0E00      02097         MOVLW   HIGH(_h)
055E 6E00      02098         MOVWF   r0x03
0560 0E00      02099         MOVLW   LOW(_h)
0562 6E00      02100         MOVWF   r0x02
0564 0E80      02101         MOVLW   0x80
0566 6E00      02102         MOVWF   r0x04
0568 5000      02103         MOVF    r0x04, W
056A 6EE5      02104         MOVWF   POSTDEC1
056C 5000      02105         MOVF    r0x03, W
056E 6EE5      02106         MOVWF   POSTDEC1
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0570 5000      02107         MOVF    r0x02, W
0572 6EE5      02108         MOVWF   POSTDEC1
0574 5000      02109         MOVF    r0x01, W
0576 6EE5      02110         MOVWF   POSTDEC1
0578 5000      02111         MOVF    r0x00, W
057A 6EE5      02112         MOVWF   POSTDEC1
057C EC00 F000 02113         CALL    _ConvertTime
0580 0E05      02114         MOVLW   0x05
0582 26E1      02115         ADDWF   FSR1L, F
               02116 ;       .line   183; test.c     ConvertTime(alarmMinutes, m);
0584 C000 F000 02117         MOVFF   _alarmMinutes, r0x00
0588 C000 F000 02118         MOVFF   (_alarmMinutes + 1), r0x01
058C 0E00      02119         MOVLW   HIGH(_m)
058E 6E00      02120         MOVWF   r0x03
0590 0E00      02121         MOVLW   LOW(_m)
0592 6E00      02122         MOVWF   r0x02
0594 0E80      02123         MOVLW   0x80
0596 6E00      02124         MOVWF   r0x04
0598 5000      02125         MOVF    r0x04, W
059A 6EE5      02126         MOVWF   POSTDEC1
059C 5000      02127         MOVF    r0x03, W
059E 6EE5      02128         MOVWF   POSTDEC1
05A0 5000      02129         MOVF    r0x02, W
05A2 6EE5      02130         MOVWF   POSTDEC1
05A4 5000      02131         MOVF    r0x01, W
05A6 6EE5      02132         MOVWF   POSTDEC1
05A8 5000      02133         MOVF    r0x00, W
05AA 6EE5      02134         MOVWF   POSTDEC1
05AC EC00 F000 02135         CALL    _ConvertTime
05B0 0E05      02136         MOVLW   0x05
05B2 26E1      02137         ADDWF   FSR1L, F
               02138 ;       .line   184; test.c     sprintf(LCDPrint,"Set Alarm Hours  [%s]:%s",h,m);
05B4 0E00      02139         MOVLW   HIGH(_m)
05B6 6E00      02140         MOVWF   r0x01
05B8 0E00      02141         MOVLW   LOW(_m)
05BA 6E00      02142         MOVWF   r0x00
05BC 0E80      02143         MOVLW   0x80
05BE 6E00      02144         MOVWF   r0x02
05C0 0E00      02145         MOVLW   HIGH(_h)
05C2 6E00      02146         MOVWF   r0x04
05C4 0E00      02147         MOVLW   LOW(_h)
05C6 6E00      02148         MOVWF   r0x03
05C8 0E80      02149         MOVLW   0x80
05CA 6E00      02150         MOVWF   r0x05
05CC 0E00      02151         MOVLW   HIGH(_LCDPrint)
05CE 6E00      02152         MOVWF   r0x07
05D0 0E00      02153         MOVLW   LOW(_LCDPrint)
05D2 6E00      02154         MOVWF   r0x06
05D4 0E80      02155         MOVLW   0x80
05D6 6E00      02156         MOVWF   r0x08
05D8 5000      02157         MOVF    r0x02, W
05DA 6EE5      02158         MOVWF   POSTDEC1
05DC 5000      02159         MOVF    r0x01, W
05DE 6EE5      02160         MOVWF   POSTDEC1
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
05E0 5000      02161         MOVF    r0x00, W
05E2 6EE5      02162         MOVWF   POSTDEC1
05E4 5000      02163         MOVF    r0x05, W
05E6 6EE5      02164         MOVWF   POSTDEC1
05E8 5000      02165         MOVF    r0x04, W
05EA 6EE5      02166         MOVWF   POSTDEC1
05EC 5000      02167         MOVF    r0x03, W
05EE 6EE5      02168         MOVWF   POSTDEC1
05F0 0E00      02169         MOVLW   UPPER(__str_8)
05F2 6EE5      02170         MOVWF   POSTDEC1
05F4 0E00      02171         MOVLW   HIGH(__str_8)
05F6 6EE5      02172         MOVWF   POSTDEC1
05F8 0E00      02173         MOVLW   LOW(__str_8)
05FA 6EE5      02174         MOVWF   POSTDEC1
05FC 5000      02175         MOVF    r0x08, W
05FE 6EE5      02176         MOVWF   POSTDEC1
0600 5000      02177         MOVF    r0x07, W
0602 6EE5      02178         MOVWF   POSTDEC1
0604 5000      02179         MOVF    r0x06, W
0606 6EE5      02180         MOVWF   POSTDEC1
0608 EC00 F000 02181         CALL    _sprintf
060C 0E0C      02182         MOVLW   0x0c
060E 26E1      02183         ADDWF   FSR1L, F
0610 02184 _00152_DS_:
               02185 ;       .line   187; test.c     DisplayString(0, LCDPrint);
0610 0E00      02186         MOVLW   HIGH(_LCDPrint)
0612 6E00      02187         MOVWF   r0x01
0614 0E00      02188         MOVLW   LOW(_LCDPrint)
0616 6E00      02189         MOVWF   r0x00
0618 0E80      02190         MOVLW   0x80
061A 6E00      02191         MOVWF   r0x02
061C 5000      02192         MOVF    r0x02, W
061E 6EE5      02193         MOVWF   POSTDEC1
0620 5000      02194         MOVF    r0x01, W
0622 6EE5      02195         MOVWF   POSTDEC1
0624 5000      02196         MOVF    r0x00, W
0626 6EE5      02197         MOVWF   POSTDEC1
0628 0E00      02198         MOVLW   0x00
062A 6EE5      02199         MOVWF   POSTDEC1
062C EC00 F000 02200         CALL    _DisplayString
0630 0E04      02201         MOVLW   0x04
0632 26E1      02202         ADDWF   FSR1L, F
0634 CFE4 F000 02203         MOVFF   PREINC1, r0x0e
0638 CFE4 F000 02204         MOVFF   PREINC1, r0x0d
063C CFE4 F000 02205         MOVFF   PREINC1, r0x0c
0640 CFE4 F000 02206         MOVFF   PREINC1, r0x0b
0644 CFE4 F000 02207         MOVFF   PREINC1, r0x0a
0648 CFE4 F000 02208         MOVFF   PREINC1, r0x09
064C CFE4 F000 02209         MOVFF   PREINC1, r0x08
0650 CFE4 F000 02210         MOVFF   PREINC1, r0x07
0654 CFE4 F000 02211         MOVFF   PREINC1, r0x06
0658 CFE4 F000 02212         MOVFF   PREINC1, r0x05
065C CFE4 F000 02213         MOVFF   PREINC1, r0x04
0660 CFE4 F000 02214         MOVFF   PREINC1, r0x03
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0664 CFE4 F000 02215         MOVFF   PREINC1, r0x02
0668 CFE4 F000 02216         MOVFF   PREINC1, r0x01
066C CFE4 F000 02217         MOVFF   PREINC1, r0x00
0670 CFE4 FFD9 02218         MOVFF   PREINC1, FSR2L
0674 0012      02219         RETURN  
               02220 
               02221 ; ; Starting pCode block
               02222 S_test__UpdateTime      code
0000 02223 _UpdateTime:
               02224 ;       .line   127; test.c     void UpdateTime(){
0000 CFD9 FFE5 02225         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 02226         MOVFF   FSR1L, FSR2L
               02227 ;       .line   128; test.c     if(seconds>=60)
0008 0E00      02228         MOVLW   0x00
000A 0000      02229         BANKSEL (_seconds + 1)
000C 5D00      02230         SUBWF   (_seconds + 1), W, B
000E E100      02231         BNZ     _00134_DS_
0010 0E3C      02232         MOVLW   0x3c
0012 0000      02233         BANKSEL _seconds
0014 5D00      02234         SUBWF   _seconds, W, B
0016 02235 _00134_DS_:
0016 E300      02236         BNC     _00124_DS_
               02237 ;       .line   130; test.c     seconds = seconds - 60; // si une interruption a empêché l'update pendant + d'une seconde.
0018 0EC4      02238         MOVLW   0xc4
001A 0000      02239         BANKSEL _seconds
001C 2700      02240         ADDWF   _seconds, F, B
001E E200      02241         BC      _60254_DS_
0020 0000      02242         BANKSEL (_seconds + 1)
0022 0700      02243         DECF    (_seconds + 1), F, B
0024 02244 _60254_DS_:
0024 0000      02245         BANKSEL _minutes
               02246 ;       .line   131; test.c     minutes++;
0026 2B00      02247         INCF    _minutes, F, B
0028 E300      02248         BNC     _70255_DS_
002A 0000      02249         BANKSEL (_minutes + 1)
002C 2B00      02250         INCF    (_minutes + 1), F, B
002E 02251 _70255_DS_:
002E 02252 _00124_DS_:
002E 0000      02253         BANKSEL _minutes
               02254 ;       .line   133; test.c     if(minutes == 60){
0030 5100      02255         MOVF    _minutes, W, B
0032 0A3C      02256         XORLW   0x3c
0034 E100      02257         BNZ     _00135_DS_
0036 0000      02258         BANKSEL (_minutes + 1)
0038 5100      02259         MOVF    (_minutes + 1), W, B
003A E000      02260         BZ      _00136_DS_
003C 02261 _00135_DS_:
003C D000      02262         BRA     _00126_DS_
003E 02263 _00136_DS_:
003E 0000      02264         BANKSEL _minutes
               02265 ;       .line   134; test.c     minutes = 0;
0040 6B00      02266         CLRF    _minutes, B
0042 0000      02267         BANKSEL (_minutes + 1)
0044 6B00      02268         CLRF    (_minutes + 1), B
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0046 0000      02269         BANKSEL _hours
               02270 ;       .line   135; test.c     hours++;
0048 2B00      02271         INCF    _hours, F, B
004A E300      02272         BNC     _80256_DS_
004C 0000      02273         BANKSEL (_hours + 1)
004E 2B00      02274         INCF    (_hours + 1), F, B
0050 02275 _80256_DS_:
0050 02276 _00126_DS_:
               02277 ;       .line   137; test.c     if(hours > 23){
0050 0E00      02278         MOVLW   0x00
0052 0000      02279         BANKSEL (_hours + 1)
0054 5D00      02280         SUBWF   (_hours + 1), W, B
0056 E100      02281         BNZ     _00137_DS_
0058 0E18      02282         MOVLW   0x18
005A 0000      02283         BANKSEL _hours
005C 5D00      02284         SUBWF   _hours, W, B
005E 02285 _00137_DS_:
005E E300      02286         BNC     _00129_DS_
0060 0000      02287         BANKSEL _hours
               02288 ;       .line   138; test.c     hours = 0;
0062 6B00      02289         CLRF    _hours, B
0064 0000      02290         BANKSEL (_hours + 1)
0066 6B00      02291         CLRF    (_hours + 1), B
0068 02292 _00129_DS_:
0068 CFE4 FFD9 02293         MOVFF   PREINC1, FSR2L
006C 0012      02294         RETURN  
               02295 
               02296 ; ; Starting pCode block
               02297 S_test__ConfigButtons   code
0000 02298 _ConfigButtons:
               02299 ;       .line   112; test.c     void ConfigButtons(){
0000 CFD9 FFE5 02300         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 02301         MOVFF   FSR1L, FSR2L
               02302 ;       .line   113; test.c     INTCON3bits.INT1IP = 0; // Low priority interrupt for up butt
0008 9C00      02303         BCF     _INTCON3bits, 6
               02304 ;       .line   114; test.c     INTCON2bits.INT3IP = 0; // Low priority interrupt for down butt
000A 9200      02305         BCF     _INTCON2bits, 1
               02306 ;       .line   115; test.c     INTCON2bits.INTEDG1 = 0; // Interrupt on falling edge
000C 9A00      02307         BCF     _INTCON2bits, 5
               02308 ;       .line   116; test.c     INTCON2bits.INTEDG3 = 0; // Interrupt on falling edge
000E 9600      02309         BCF     _INTCON2bits, 3
               02310 ;       .line   117; test.c     INTCON3bits.INT3F = 0; // clear flag
0010 9400      02311         BCF     _INTCON3bits, 2
               02312 ;       .line   118; test.c     INTCON3bits.INT1F = 0; // clear flag    
0012 9000      02313         BCF     _INTCON3bits, 0
               02314 ;       .line   119; test.c     INTCON3bits.INT1E = 1; // Up button interrupt enable
0014 8600      02315         BSF     _INTCON3bits, 3
               02316 ;       .line   120; test.c     INTCON3bits.INT3E = 1; // Down button interrupt enable
0016 8A00      02317         BSF     _INTCON3bits, 5
0018 CFE4 FFD9 02318         MOVFF   PREINC1, FSR2L
001C 0012      02319         RETURN  
               02320 
               02321 ; ; Starting pCode block
               02322 S_test__ConfigTimer0    code
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0000 02323 _ConfigTimer0:
               02324 ;       .line   80; test.c      void ConfigTimer0(void){
0000 CFD9 FFE5 02325         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 02326         MOVFF   FSR1L, FSR2L
               02327 ;       .line   82; test.c      INTCON2bits.TMR0IP = 1; // Priorité Haute
0008 8400      02328         BSF     _INTCON2bits, 2
               02329 ;       .line   83; test.c      INTCONbits.TMR0IE = 1;  // Activation interruption Timer 0
000A 8A00      02330         BSF     _INTCONbits, 5
               02331 ;       .line   84; test.c      INTCONbits.TMR0IF = 0; // clear timer0 flag
000C 9400      02332         BCF     _INTCONbits, 2
               02333 ;       .line   88; test.c      T0CONbits.T08BIT = 0;           
000E 9C00      02334         BCF     _T0CONbits, 6
               02335 ;       .line   90; test.c      T0CONbits.T0CS = 0;     
0010 9A00      02336         BCF     _T0CONbits, 5
               02337 ;       .line   96; test.c      T0CONbits.PSA = 0;
0012 9600      02338         BCF     _T0CONbits, 3
               02339 ;       .line   97; test.c      T0CONbits.T0PS0 = 1; // diviseur par 256 
0014 8000      02340         BSF     _T0CONbits, 0
               02341 ;       .line   98; test.c      T0CONbits.T0PS1 = 1;
0016 8200      02342         BSF     _T0CONbits, 1
               02343 ;       .line   99; test.c      T0CONbits.T0PS2 = 1;
0018 8400      02344         BSF     _T0CONbits, 2
               02345 ;       .line   101; test.c     TMR0H = 0xA0;
001A 0EA0      02346         MOVLW   0xa0
001C 6E00      02347         MOVWF   _TMR0H
               02348 ;       .line   102; test.c     TMR0L = 0xA2;
001E 0EA2      02349         MOVLW   0xa2
0020 6E00      02350         MOVWF   _TMR0L
               02351 ;       .line   104; test.c     T0CONbits.TMR0ON = 1;
0022 8E00      02352         BSF     _T0CONbits, 7
0024 CFE4 FFD9 02353         MOVFF   PREINC1, FSR2L
0028 0012      02354         RETURN  
               02355 
               02356 ; ; Starting pCode block
002A 02357 __str_0:
002A 4E4F 0020 02358         DB      0x4f, 0x4e, 0x20, 0x00
               02359 ; ; Starting pCode block
002E 02360 __str_1:
002E 464F 0046 02361         DB      0x4f, 0x46, 0x46, 0x00
               02362 ; ; Starting pCode block
0032 02363 __str_2:
0032 2020 2020 02364         DB      0x20, 0x20, 0x20, 0x20, 0x25, 0x73, 0x3a, 0x25, 0x73, 0x3a, 0x25, 0x73
     7325 253A 
     3A73 7325 
003E 2020 2020 02365         DB      0x20, 0x20, 0x20, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x25, 0x73
     6C41 7261 
     206D 7325 
004A 0000      02366         DB      0x00
               02367 ; ; Starting pCode block
004C 02368 __str_3:
004C 2020 2020 02369         DB      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x4d, 0x45, 0x4e, 0x55, 0x20, 0x20
     2020 454D 
     554E 2020 
0058 2020 2020 02370         DB      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x53, 0x65, 0x74, 0x20, 0x74, 0x69
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     2020 6553 
     2074 6974 
0064 656D 3F20 02371         DB      0x6d, 0x65, 0x20, 0x3f, 0x00
     0000      
               02372 ; ; Starting pCode block
006A 02373 __str_4:
006A 6553 2074 02374         DB      0x53, 0x65, 0x74, 0x20, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x20
     694D 756E 
     6574 2073 
0076 2020 2020 02375         DB      0x20, 0x20, 0x20, 0x20, 0x25, 0x73, 0x3a, 0x5b, 0x25, 0x73, 0x5d, 0x3a
     7325 5B3A 
     7325 3A5D 
0082 7325 0000 02376         DB      0x25, 0x73, 0x00
               02377 ; ; Starting pCode block
0086 02378 __str_5:
0086 6553 2074 02379         DB      0x53, 0x65, 0x74, 0x20, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x20, 0x20, 0x20
     6F48 7275 
     2073 2020 
0092 2020 2020 02380         DB      0x20, 0x20, 0x20, 0x20, 0x5b, 0x25, 0x73, 0x5d, 0x3a, 0x25, 0x73, 0x3a
     255B 5D73 
     253A 3A73 
009E 7325 0000 02381         DB      0x25, 0x73, 0x00
               02382 ; ; Starting pCode block
00A2 02383 __str_6:
00A2 2020 2020 02384         DB      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x4d, 0x45, 0x4e, 0x55, 0x20, 0x20
     2020 454D 
     554E 2020 
00AE 2020 2020 02385         DB      0x20, 0x20, 0x20, 0x20, 0x53, 0x65, 0x74, 0x20, 0x41, 0x6c, 0x61, 0x72
     6553 2074 
     6C41 7261 
00BA 636D 6F6C 02386         DB      0x6d, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x3f, 0x00
     6B63 003F 
               02387 ; ; Starting pCode block
00C2 02388 __str_7:
00C2 6553 2074 02389         DB      0x53, 0x65, 0x74, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x4d, 0x69
     6C41 7261 
     206D 694D 
00CE 206E 2020 02390         DB      0x6e, 0x20, 0x20, 0x20, 0x20, 0x25, 0x73, 0x3a, 0x5b, 0x25, 0x73, 0x5d
     2520 3A73 
     255B 5D73 
00DA 0000      02391         DB      0x00
               02392 ; ; Starting pCode block
00DC 02393 __str_8:
00DC 6553 2074 02394         DB      0x53, 0x65, 0x74, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x48, 0x6f
     6C41 7261 
     206D 6F48 
00E8 7275 2073 02395         DB      0x75, 0x72, 0x73, 0x20, 0x20, 0x5b, 0x25, 0x73, 0x5d, 0x3a, 0x25, 0x73
     5B20 7325 
     3A5D 7325 
00F4 0000      02396         DB      0x00
               02397 ; ; Starting pCode block
00F6 02398 __str_9:
00F6 2530 0075 02399         DB      0x30, 0x25, 0x75, 0x00, 0x00
     0000      
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02400 ; ; Starting pCode block
00FC 02401 __str_10:
00FC 7525 0000 02402         DB      0x25, 0x75, 0x00, 0x00
               02403 
               02404 
               02405 ; Statistics:
               02406 ; code size:     3770 (0x0eba) bytes ( 2.88%)
               02407 ;                1885 (0x075d) words
               02408 ; udata size:      66 (0x0042) bytes ( 1.72%)
               02409 ; access size:     22 (0x0016) bytes
               02410 
               02411 
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 47


SYMBOL TABLE
  LABEL                             VALUE 

BSR                               00000FE0
FSR0H                             00000FEA
FSR0L                             00000FE9
FSR1L                             00000FE1
FSR2L                             00000FD9
INDF0                             00000FEF
PCL                               00000FF9
PCLATH                            00000FFA
PCLATU                            00000FFB
PLUSW2                            00000FDB
POSTDEC1                          00000FE5
PREINC1                           00000FE4
PRODH                             00000FF4
PRODL                             00000FF3
STATUS                            00000FD8
WREG                              00000FE8
_00106_DS_                        00000048
_00124_DS_                        0000002E
_00126_DS_                        00000050
_00129_DS_                        00000068
_00134_DS_                        00000016
_00135_DS_                        0000003C
_00136_DS_                        0000003E
_00137_DS_                        0000005E
_00142_DS_                        000000AC
_00144_DS_                        00000174
_00145_DS_                        000001A0
_00146_DS_                        0000022E
_00147_DS_                        0000025C
_00148_DS_                        00000362
_00149_DS_                        00000468
_00150_DS_                        00000496
_00151_DS_                        00000554
_00152_DS_                        00000610
_00157_DS_                        00000052
_00158_DS_                        00000090
_00164_DS_                        00000072
_00166_DS_                        0000009A
_00169_DS_                        00000046
_00181_DS_                        00000044
_00186_DS_                        00000096
_00187_DS_                        0000009E
_00188_DS_                        000000AA
_00189_DS_                        000000B6
_00190_DS_                        000000C2
_00191_DS_                        000000CE
_00192_DS_                        000000DA
_00193_DS_                        000000E4
_00195_DS_                        000000E6
_00196_DS_                        00000150
_00197_DS_                        0000015C
_00198_DS_                        00000168
_00199_DS_                        00000174
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_00200_DS_                        0000017E
_00201_DS_                        00000188
_00202_DS_                        00000194
_00203_DS_                        0000019C
_00206_DS_                        0000019E
_00212_DS_                        0000003E
_00213_DS_                        0000007A
_00215_DS_                        000000F8
_00216_DS_                        00000134
_00222_DS_                        000000FC
_00223_DS_                        0000005C
_00226_DS_                        000000D4
_00233_DS_                        0000009A
_00234_DS_                        000000E4
_00242_DS_                        00000082
_00251_DS_                        000000CC
_00255_DS_                        00000134
_00258_DS_                        0000015E
_00262_DS_                        00000188
_00269_DS_                        00000152
_00270_DS_                        00000114
_10249_DS_                        000000B4
_20250_DS_                        000000C0
_30251_DS_                        000000D8
_40252_DS_                        000000E4
_50253_DS_                        00000044
_60254_DS_                        00000024
_70255_DS_                        0000002E
_80256_DS_                        00000050
_ADCON0                           00000000
_ADCON0bits                       00000000
_ADCON1                           00000000
_ADCON1bits                       00000000
_ADCON2                           00000000
_ADCON2bits                       00000000
_ADRES                            00000000
_ADRESH                           00000000
_ADRESL                           00000000
_BAUDCON                          00000000
_BAUDCON1                         00000000
_BAUDCON1bits                     00000000
_BAUDCON2                         00000000
_BAUDCON2bits                     00000000
_BAUDCONbits                      00000000
_BAUDCTL                          00000000
_BAUDCTL1                         00000000
_BAUDCTL1bits                     00000000
_BAUDCTL2                         00000000
_BAUDCTL2bits                     00000000
_BAUDCTLbits                      00000000
_BSR                              00000000
_CCP1CON                          00000000
_CCP1CONbits                      00000000
_CCP2CON                          00000000
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_CCP2CONbits                      00000000
_CCP3CON                          00000000
_CCP3CONbits                      00000000
_CCP4CON                          00000000
_CCP4CONbits                      00000000
_CCP5CON                          00000000
_CCP5CONbits                      00000000
_CCPR1                            00000000
_CCPR1H                           00000000
_CCPR1L                           00000000
_CCPR2                            00000000
_CCPR2H                           00000000
_CCPR2L                           00000000
_CCPR3                            00000000
_CCPR3H                           00000000
_CCPR3L                           00000000
_CCPR4                            00000000
_CCPR4H                           00000000
_CCPR4L                           00000000
_CCPR5                            00000000
_CCPR5H                           00000000
_CCPR5L                           00000000
_CMCON                            00000000
_CMCONbits                        00000000
_CVRCON                           00000000
_CVRCONbits                       00000000
_ConfigButtons                    00000000
_ConfigTimer0                     00000000
_ConvertTime                      00000000
_DDRA                             00000000
_DDRAbits                         00000000
_DDRB                             00000000
_DDRBbits                         00000000
_DDRC                             00000000
_DDRCbits                         00000000
_DDRD                             00000000
_DDRDbits                         00000000
_DDRE                             00000000
_DDREbits                         00000000
_DDRF                             00000000
_DDRFbits                         00000000
_DDRG                             00000000
_DDRGbits                         00000000
_DDRH                             00000000
_DDRHbits                         00000000
_DDRJ                             00000000
_DDRJbits                         00000000
_DisplayString                    00000000
_DisplayWORD                      00000000
_DisplayWORD_WDigit_1_1           00000000
_EBSTCON                          00000000
_EBSTCONbits                      00000000
_EBSTCS                           00000000
_EBSTCSH                          00000000
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_EBSTCSL                          00000000
_EBSTSD                           00000000
_ECCP1AS                          00000000
_ECCP1ASbits                      00000000
_ECCP1CON                         00000000
_ECCP1CONbits                     00000000
_ECCP1DEL                         00000000
_ECCP1DELbits                     00000000
_ECCP2AS                          00000000
_ECCP2ASbits                      00000000
_ECCP2CON                         00000000
_ECCP2CONbits                     00000000
_ECCP2DEL                         00000000
_ECCP2DELbits                     00000000
_ECCP3AS                          00000000
_ECCP3ASbits                      00000000
_ECCP3CON                         00000000
_ECCP3CONbits                     00000000
_ECCP3DEL                         00000000
_ECCP3DELbits                     00000000
_ECON1                            00000000
_ECON1bits                        00000000
_ECON2                            00000000
_ECON2bits                        00000000
_EDATA                            00000000
_EDATAbits                        00000000
_EDMACS                           00000000
_EDMACSH                          00000000
_EDMACSL                          00000000
_EDMADST                          00000000
_EDMADSTH                         00000000
_EDMADSTL                         00000000
_EDMAND                           00000000
_EDMANDH                          00000000
_EDMANDL                          00000000
_EDMAST                           00000000
_EDMASTH                          00000000
_EDMASTL                          00000000
_EECON1                           00000000
_EECON1bits                       00000000
_EECON2                           00000000
_EFLOCON                          00000000
_EFLOCONbits                      00000000
_EHT0                             00000000
_EHT1                             00000000
_EHT2                             00000000
_EHT3                             00000000
_EHT4                             00000000
_EHT5                             00000000
_EHT6                             00000000
_EHT7                             00000000
_EIE                              00000000
_EIEbits                          00000000
_EIR                              00000000
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_EIRbits                          00000000
_EPAUS                            00000000
_EPAUSH                           00000000
_EPAUSL                           00000000
_EPKTCNT                          00000000
_EPMCS                            00000000
_EPMCSH                           00000000
_EPMCSL                           00000000
_EPMM0                            00000000
_EPMM1                            00000000
_EPMM2                            00000000
_EPMM3                            00000000
_EPMM4                            00000000
_EPMM5                            00000000
_EPMM6                            00000000
_EPMM7                            00000000
_EPMO                             00000000
_EPMOH                            00000000
_EPMOL                            00000000
_ERDPT                            00000000
_ERDPTH                           00000000
_ERDPTL                           00000000
_ERXFCON                          00000000
_ERXFCONbits                      00000000
_ERXND                            00000000
_ERXNDH                           00000000
_ERXNDL                           00000000
_ERXRDPT                          00000000
_ERXRDPTH                         00000000
_ERXRDPTL                         00000000
_ERXST                            00000000
_ERXSTH                           00000000
_ERXSTL                           00000000
_ERXWRPT                          00000000
_ERXWRPTH                         00000000
_ERXWRPTL                         00000000
_ESTAT                            00000000
_ESTATbits                        00000000
_ETXND                            00000000
_ETXNDH                           00000000
_ETXNDL                           00000000
_ETXST                            00000000
_ETXSTH                           00000000
_ETXSTL                           00000000
_EWOLIE                           00000000
_EWOLIEbits                       00000000
_EWOLIR                           00000000
_EWOLIRbits                       00000000
_EWRPT                            00000000
_EWRPTH                           00000000
_EWRPTL                           00000000
_FSR0H                            00000000
_FSR0L                            00000000
_FSR1H                            00000000
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 52


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_FSR1L                            00000000
_FSR2H                            00000000
_FSR2L                            00000000
_HighPriorityInterrupt            00000000
_INDF0                            00000000
_INDF1                            00000000
_INDF2                            00000000
_INTCON                           00000000
_INTCON2                          00000000
_INTCON2bits                      00000000
_INTCON3                          00000000
_INTCON3bits                      00000000
_INTCONbits                       00000000
_IPR1                             00000000
_IPR1bits                         00000000
_IPR2                             00000000
_IPR2bits                         00000000
_IPR3                             00000000
_IPR3bits                         00000000
_LATA                             00000000
_LATAbits                         00000000
_LATB                             00000000
_LATBbits                         00000000
_LATC                             00000000
_LATCbits                         00000000
_LATD                             00000000
_LATDbits                         00000000
_LATE                             00000000
_LATEbits                         00000000
_LATF                             00000000
_LATFbits                         00000000
_LATG                             00000000
_LATGbits                         00000000
_LATH                             00000000
_LATHbits                         00000000
_LATJ                             00000000
_LATJbits                         00000000
_LCDInit                          00000000
_LCDPrint                         00000000
_LCDText                          00000000
_LCDUpdate                        00000000
_LowPriorityInterrupt             00000000
_MAADR1                           00000000
_MAADR2                           00000000
_MAADR3                           00000000
_MAADR4                           00000000
_MAADR5                           00000000
_MAADR6                           00000000
_MABBIPG                          00000000
_MACLCON1                         00000000
_MACLCON1bits                     00000000
_MACLCON2                         00000000
_MACLCON2bits                     00000000
_MACON1                           00000000
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 53


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_MACON1bits                       00000000
_MACON2                           00000000
_MACON2bits                       00000000
_MACON3                           00000000
_MACON3bits                       00000000
_MACON4                           00000000
_MACON4bits                       00000000
_MAIPG                            00000000
_MAIPGH                           00000000
_MAIPGL                           00000000
_MAMXFL                           00000000
_MAMXFLH                          00000000
_MAMXFLL                          00000000
_MEMCON                           00000000
_MEMCONbits                       00000000
_MICMD                            00000000
_MICMDbits                        00000000
_MICON                            00000000
_MICONbits                        00000000
_MIRD                             00000000
_MIRDH                            00000000
_MIRDL                            00000000
_MIREGADR                         00000000
_MISTAT                           00000000
_MISTATbits                       00000000
_MIWR                             00000000
_MIWRH                            00000000
_MIWRL                            00000000
_OSCCON                           00000000
_OSCCONbits                       00000000
_OSCTUNE                          00000000
_OSCTUNEbits                      00000000
_PC                               00000000
_PCL                              00000000
_PCLATH                           00000000
_PCLATU                           00000000
_PIE1                             00000000
_PIE1bits                         00000000
_PIE2                             00000000
_PIE2bits                         00000000
_PIE3                             00000000
_PIE3bits                         00000000
_PIR1                             00000000
_PIR1bits                         00000000
_PIR2                             00000000
_PIR2bits                         00000000
_PIR3                             00000000
_PIR3bits                         00000000
_PLUSW0                           00000000
_PLUSW1                           00000000
_PLUSW2                           00000000
_PORTA                            00000000
_PORTAbits                        00000000
_PORTB                            00000000
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 54


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_PORTBbits                        00000000
_PORTC                            00000000
_PORTCbits                        00000000
_PORTD                            00000000
_PORTDbits                        00000000
_PORTE                            00000000
_PORTEbits                        00000000
_PORTF                            00000000
_PORTFbits                        00000000
_PORTG                            00000000
_PORTGbits                        00000000
_PORTH                            00000000
_PORTHbits                        00000000
_PORTJ                            00000000
_PORTJbits                        00000000
_POSTDEC0                         00000000
_POSTDEC1                         00000000
_POSTDEC2                         00000000
_POSTINC0                         00000000
_POSTINC1                         00000000
_POSTINC2                         00000000
_PR2                              00000000
_PR4                              00000000
_PREINC0                          00000000
_PREINC1                          00000000
_PREINC2                          00000000
_PROD                             00000000
_PRODH                            00000000
_PRODL                            00000000
_PSPCON                           00000000
_PSPCONbits                       00000000
_RCON                             00000000
_RCONbits                         00000000
_RCREG                            00000000
_RCREG1                           00000000
_RCREG2                           00000000
_RCSTA                            00000000
_RCSTA1                           00000000
_RCSTA1bits                       00000000
_RCSTA2                           00000000
_RCSTA2bits                       00000000
_RCSTAbits                        00000000
_SPBRG                            00000000
_SPBRG1                           00000000
_SPBRG2                           00000000
_SPBRGH                           00000000
_SPBRGH1                          00000000
_SPBRGH2                          00000000
_SSP1ADD                          00000000
_SSP1BUF                          00000000
_SSP1CON1                         00000000
_SSP1CON1bits                     00000000
_SSP1CON2                         00000000
_SSP1CON2bits                     00000000
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 55


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_SSP1STAT                         00000000
_SSP1STATbits                     00000000
_SSP2ADD                          00000000
_SSP2BUF                          00000000
_SSP2CON1                         00000000
_SSP2CON1bits                     00000000
_SSP2CON2                         00000000
_SSP2CON2bits                     00000000
_SSP2STAT                         00000000
_SSP2STATbits                     00000000
_SSPADD                           00000000
_SSPBUF                           00000000
_SSPCON1                          00000000
_SSPCON1bits                      00000000
_SSPCON2                          00000000
_SSPCON2bits                      00000000
_SSPSTAT                          00000000
_SSPSTATbits                      00000000
_STATUS                           00000000
_STATUSbits                       00000000
_STKPTR                           00000000
_STKPTRbits                       00000000
_StartTimer1                      00000000
_T0CON                            00000000
_T0CONbits                        00000000
_T1CON                            00000000
_T1CONbits                        00000000
_T2CON                            00000000
_T2CONbits                        00000000
_T3CON                            00000000
_T3CONbits                        00000000
_T4CON                            00000000
_T4CONbits                        00000000
_TABLAT                           00000000
_TBLPTR                           00000000
_TBLPTRH                          00000000
_TBLPTRL                          00000000
_TBLPTRU                          00000000
_TMR0H                            00000000
_TMR0L                            00000000
_TMR1H                            00000000
_TMR1L                            00000000
_TMR2                             00000000
_TMR3H                            00000000
_TMR3L                            00000000
_TMR4                             00000000
_TOS                              00000000
_TOSH                             00000000
_TOSL                             00000000
_TOSU                             00000000
_TRISA                            00000000
_TRISAbits                        00000000
_TRISB                            00000000
_TRISBbits                        00000000
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 56


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_TRISC                            00000000
_TRISCbits                        00000000
_TRISD                            00000000
_TRISDbits                        00000000
_TRISE                            00000000
_TRISEbits                        00000000
_TRISF                            00000000
_TRISFbits                        00000000
_TRISG                            00000000
_TRISGbits                        00000000
_TRISH                            00000000
_TRISHbits                        00000000
_TRISJ                            00000000
_TRISJbits                        00000000
_TXREG                            00000000
_TXREG1                           00000000
_TXREG2                           00000000
_TXSTA                            00000000
_TXSTA1                           00000000
_TXSTA1bits                       00000000
_TXSTA2                           00000000
_TXSTA2bits                       00000000
_TXSTAbits                        00000000
_UpdateLCD                        00000000
_UpdateTime                       00000000
_WDTCON                           00000000
_WDTCONbits                       00000000
_WREG                             00000000
__18F97J60                        00000001
__gptrget1                        00000000
__gptrput1                        00000000
__str_0                           0000002A
__str_1                           0000002E
__str_10                          000000FC
__str_2                           00000032
__str_3                           0000004C
__str_4                           0000006A
__str_5                           00000086
__str_6                           000000A2
__str_7                           000000C2
__str_8                           000000DC
__str_9                           000000F6
_alarmHours                       00000000
_alarmMinutes                     00000000
_alarmState                       00000000
_alarmStatus                      00000000
_h                                00000000
_hours                            00000000
_m                                00000000
_main                             00000000
_minutes                          00000000
_ringToday                        00000000
_s                                00000000
_seconds                          00000000
gpasm-0.13.7 beta               Objects/test.asm3-20-2013  11:30:04          PAGE 57


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_sprintf                          00000000
_stateMenu                        00000000
_stdin                            00000000
_stdout                           00000000
_strlcpy                          00000000
_strlen                           00000000
_ultoa                            00000000
ivec_0x1_HighPriorityInterrupt    00000008
ivec_0x2_LowPriorityInterrupt     00000018
r0x00                             00000000
r0x01                             00000001
r0x02                             00000002
r0x03                             00000003
r0x04                             00000004
r0x05                             00000005
r0x06                             00000006
r0x07                             00000007
r0x08                             00000008
r0x09                             00000009
r0x0a                             0000000A
r0x0b                             0000000B
r0x0c                             0000000C
r0x0d                             0000000D
r0x0e                             0000000E
r0x0f                             0000000F
r0x10                             00000010
r0x11                             00000011
r0x12                             00000012
r0x13                             00000013
r0x14                             00000014
r0x15                             00000015


Errors   :       0
Warnings :       0 reported,       0 suppressed
Messages :       0 reported,       0 suppressed

