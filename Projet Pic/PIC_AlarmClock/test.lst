gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 3-26-2013  14:56:38
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Mar 16 2013) (UNIX)
                                           ; This file was generated Tue Mar 26 14:56:38 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _ConfigTimer0
                                           	global _ConfigButtons
                                           	global _ConfigLed
                                           	global _UpdateTime
                                           	global _IsItTime
                                           	global _UpdateLCD
                                           	global _SwitchLedState
                                           	global _ConvertTime
                                           	global _DisplayWORD
                                           	global _DisplayString
                                           	global _strlcpy
                                           	global _hours
                                           	global _minutes
                                           	global _seconds
                                           	global _milliSec
                                           	global _alarmHours
                                           	global _alarmMinutes
                                           	global _stateMenu
                                           	global _alarmStatus
                                           	global _alarmDelay
                                           	global _alarmCheck
                                           	global _LCDPrint
                                           	global _h
                                           	global _m
                                           	global _s
                                           	global _hA
                                           	global _mA
                                           	global _alarmState
                                           	global _main
                                           	global _HighPriorityInterrupt
                                           	global _LowPriorityInterrupt
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _sprintf
                                           	extern _ultoa
                                           	extern _strlen
                                           	extern _LCDInit
                                           	extern _LCDUpdate
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           
                                           udata_test_0	udata
                                           _stateMenu	res	2
                                           
                                           udata_test_1	udata
                                           _hours	res	2
                                           
                                           udata_test_2	udata
                                           _minutes	res	2
                                           
                                           udata_test_3	udata
                                           _seconds	res	2
                                           
                                           udata_test_4	udata
                                           _alarmHours	res	2
                                           
                                           udata_test_5	udata
                                           _alarmMinutes	res	2
                                           
                                           udata_test_6	udata
                                           _alarmStatus	res	2
                                           
                                           udata_test_7	udata
                                           _alarmCheck	res	2
                                           
                                           udata_test_8	udata
                                           _milliSec	res	2
                                           
                                           udata_test_9	udata
                                           _alarmDelay	res	2
                                           
                                           udata_test_10	udata
                                           _h	res	3
                                           
                                           udata_test_11	udata
                                           _m	res	3
                                           
                                           udata_test_12	udata
                                           _s	res	3
                                           
                                           udata_test_13	udata
                                           _hA	res	3
                                           
                                           udata_test_14	udata
                                           _mA	res	3
                                           
                                           udata_test_15	udata
                                           _alarmState	res	9
                                           
                                           udata_test_16	udata
                                           _LCDPrint	res	32
                                           
                                           udata_test_17	udata
                                           _DisplayWORD_WDigit_1_1	res	6
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_test_ivec_0x1_HighPriorityInterrupt	code	0X000008
                                           ivec_0x1_HighPriorityInterrupt:
000008   ef41     goto	0x2882              	GOTO	_HighPriorityInterrupt
00000a   f014
                                           
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_test_ivec_0x2_LowPriorityInterrupt	code	0X000018
                                           ivec_0x2_LowPriorityInterrupt:
000018   ef96     goto	0x152c              	GOTO	_LowPriorityInterrupt
00001a   f00a
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_test__main	code
                                           _main:
0028f0   010e     movlb	0xe                	BANKSEL	_stateMenu
                                           ;	.line	70; test.c	stateMenu = STANDARD_STATE;
0028f2   6b2f     clrf	0x2f, 0x1           	CLRF	_stateMenu, B
0028f4   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
0028f6   6b30     clrf	0x30, 0x1           	CLRF	(_stateMenu + 1), B
                                           ;	.line	71; test.c	INTCONbits.GIE = 1; // Activation générale des interruptions
0028f8   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	72; test.c	RCONbits.IPEN = 1; //interrupts priority enable
0028fa   8ed0     bsf	0xd0, 0x7, 0         	BSF	_RCONbits, 7
                                           ;	.line	73; test.c	INTCONbits.PEIE = 1; // Enable low priority interrupts
0028fc   8cf2     bsf	0xf2, 0x6, 0         	BSF	_INTCONbits, 6
                                           ;	.line	74; test.c	LCDInit(); // initialisation du LCD
0028fe   ec68     call	0x12d0, 0           	CALL	_LCDInit
002900   f009
002902   010e     movlb	0xe                	BANKSEL	_hours
                                           ;	.line	75; test.c	hours = 0;
002904   6b31     clrf	0x31, 0x1           	CLRF	_hours, B
002906   010e     movlb	0xe                	BANKSEL	(_hours + 1)
002908   6b32     clrf	0x32, 0x1           	CLRF	(_hours + 1), B
00290a   010e     movlb	0xe                	BANKSEL	_minutes
                                           ;	.line	76; test.c	minutes = 0;
00290c   6b33     clrf	0x33, 0x1           	CLRF	_minutes, B
00290e   010e     movlb	0xe                	BANKSEL	(_minutes + 1)
002910   6b34     clrf	0x34, 0x1           	CLRF	(_minutes + 1), B
002912   010e     movlb	0xe                	BANKSEL	_seconds
                                           ;	.line	77; test.c	seconds = 0;
002914   6b35     clrf	0x35, 0x1           	CLRF	_seconds, B
002916   010e     movlb	0xe                	BANKSEL	(_seconds + 1)
002918   6b36     clrf	0x36, 0x1           	CLRF	(_seconds + 1), B
00291a   010e     movlb	0xe                	BANKSEL	_alarmHours
                                           ;	.line	78; test.c	alarmHours = 0;
00291c   6b37     clrf	0x37, 0x1           	CLRF	_alarmHours, B
00291e   010e     movlb	0xe                	BANKSEL	(_alarmHours + 1)
002920   6b38     clrf	0x38, 0x1           	CLRF	(_alarmHours + 1), B
002922   010e     movlb	0xe                	BANKSEL	_alarmMinutes
                                           ;	.line	79; test.c	alarmMinutes = 0;
002924   6b39     clrf	0x39, 0x1           	CLRF	_alarmMinutes, B
002926   010e     movlb	0xe                	BANKSEL	(_alarmMinutes + 1)
002928   6b3a     clrf	0x3a, 0x1           	CLRF	(_alarmMinutes + 1), B
00292a   010e     movlb	0xe                	BANKSEL	_alarmStatus
                                           ;	.line	80; test.c	alarmStatus = 0;
00292c   6b3b     clrf	0x3b, 0x1           	CLRF	_alarmStatus, B
00292e   010e     movlb	0xe                	BANKSEL	(_alarmStatus + 1)
002930   6b3c     clrf	0x3c, 0x1           	CLRF	(_alarmStatus + 1), B
002932   010e     movlb	0xe                	BANKSEL	_alarmCheck
                                           ;	.line	81; test.c	alarmCheck = 0;
002934   6b3d     clrf	0x3d, 0x1           	CLRF	_alarmCheck, B
002936   010e     movlb	0xe                	BANKSEL	(_alarmCheck + 1)
002938   6b3e     clrf	0x3e, 0x1           	CLRF	(_alarmCheck + 1), B
                                           ;	.line	82; test.c	ConfigTimer0();
00293a   ec8a     call	0x1b14, 0           	CALL	_ConfigTimer0
00293c   f00d
                                           ;	.line	83; test.c	ConfigButtons();
00293e   ec7b     call	0x2af6, 0           	CALL	_ConfigButtons
002940   f015
                                           ;	.line	84; test.c	ConfigLed();
002942   ec98     call	0x2b30, 0           	CALL	_ConfigLed
002944   f015
                                           _00106_DS_:
                                           ;	.line	88; test.c	UpdateTime();
002946   ecca     call	0x1f94, 0           	CALL	_UpdateTime
002948   f00f
                                           ;	.line	89; test.c	IsItTime();
00294a   ec54     call	0x20a8, 0           	CALL	_IsItTime
00294c   f010
                                           ;	.line	90; test.c	UpdateLCD();
00294e   ec29     call	0x852, 0            	CALL	_UpdateLCD
002950   f004
002952   d7f9     bra	0x2946               	BRA	_00106_DS_
002954   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__strlcpy	code
                                           _strlcpy:
                                           ;	.line	447; test.c	strlcpy(char *dst, const char *src, size_t siz)
00175c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00175e   ffe5
001760   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001762   ffd9
001764   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001766   ffe5
001768   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00176a   ffe5
00176c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00176e   ffe5
001770   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001772   ffe5
001774   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001776   ffe5
001778   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00177a   ffe5
00177c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00177e   ffe5
001780   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001782   ffe5
001784   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001786   ffe5
001788   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00178a   ffe5
00178c   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
00178e   ffe5
001790   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
001792   ffe5
001794   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
001796   ffe5
001798   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
00179a   ffe5
00179c   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
00179e   ffe5
0017a0   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
0017a2   ffe5
0017a4   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
0017a6   ffe5
0017a8   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
0017aa   ffe5
0017ac   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
0017ae   ffe5
0017b0   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
0017b2   ffe5
0017b4   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
0017b6   ffe5
0017b8   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
0017ba   ffe5
0017bc   0e02     movlw	0x2                	MOVLW	0x02
0017be   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0017c0   f000
0017c2   0e03     movlw	0x3                	MOVLW	0x03
0017c4   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0017c6   f001
0017c8   0e04     movlw	0x4                	MOVLW	0x04
0017ca   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0017cc   f002
0017ce   0e05     movlw	0x5                	MOVLW	0x05
0017d0   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0017d2   f003
0017d4   0e06     movlw	0x6                	MOVLW	0x06
0017d6   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0017d8   f004
0017da   0e07     movlw	0x7                	MOVLW	0x07
0017dc   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0017de   f005
0017e0   0e08     movlw	0x8                	MOVLW	0x08
0017e2   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
0017e4   f006
0017e6   0e09     movlw	0x9                	MOVLW	0x09
0017e8   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
0017ea   f007
                                           ;	.line	449; test.c	char       *d = dst;
0017ec   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
0017ee   f008
0017f0   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
0017f2   f009
0017f4   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
0017f6   f00a
                                           ;	.line	450; test.c	const char *s = src;
0017f8   c003     movff	0x3, 0xb           	MOVFF	r0x03, r0x0b
0017fa   f00b
0017fc   c004     movff	0x4, 0xc           	MOVFF	r0x04, r0x0c
0017fe   f00c
001800   c005     movff	0x5, 0xd           	MOVFF	r0x05, r0x0d
001802   f00d
                                           ;	.line	451; test.c	size_t      n = siz;
001804   c006     movff	0x6, 0xe           	MOVFF	r0x06, r0x0e
001806   f00e
001808   c007     movff	0x7, 0xf           	MOVFF	r0x07, r0x0f
00180a   f00f
                                           ;	.line	454; test.c	if (n != 0)
00180c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00180e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001810   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
001812   d03e     bra	0x1890               	BRA	_00305_DS_
                                           ;	.line	456; test.c	while (--n != 0)
001814   c003     movff	0x3, 0x10          	MOVFF	r0x03, r0x10
001816   f010
001818   c004     movff	0x4, 0x11          	MOVFF	r0x04, r0x11
00181a   f011
00181c   c005     movff	0x5, 0x12          	MOVFF	r0x05, r0x12
00181e   f012
001820   c006     movff	0x6, 0x13          	MOVFF	r0x06, r0x13
001822   f013
001824   c007     movff	0x7, 0x14          	MOVFF	r0x07, r0x14
001826   f014
                                           _00301_DS_:
001828   0eff     movlw	0xff               	MOVLW	0xff
00182a   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x13, F
00182c   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
00182e   0614     decf	0x14, 0x1, 0        	DECF	r0x14, F
001830   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
001832   1014     iorwf	0x14, 0, 0         	IORWF	r0x14, W
001834   e01d     bz	0x1870                	BZ	_00320_DS_
                                           ;	.line	458; test.c	if ((*d++ = *s++) == '\0')
001836   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
001838   ffe9
00183a   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
00183c   fff3
00183e   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
001840   ec6a     call	0x2ad4, 0           	CALL	__gptrget1
001842   f015
001844   6e15     movwf	0x15, 0            	MOVWF	r0x15
001846   2a10     incf	0x10, 0x1, 0        	INCF	r0x10, F
001848   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00184a   2a11     incf	0x11, 0x1, 0        	INCF	r0x11, F
00184c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00184e   2a12     incf	0x12, 0x1, 0        	INCF	r0x12, F
001850   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
001852   ffe5
001854   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001856   ffe9
001858   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00185a   fff3
00185c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00185e   ecb1     call	0x2b62, 0           	CALL	__gptrput1
001860   f015
001862   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001864   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001866   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
001868   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00186a   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
00186c   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
00186e   e1dc     bnz	0x1828               	BNZ	_00301_DS_
                                           _00320_DS_:
                                           ;	.line	459; test.c	break;
001870   c010     movff	0x10, 0xb          	MOVFF	r0x10, r0x0b
001872   f00b
001874   c011     movff	0x11, 0xc          	MOVFF	r0x11, r0x0c
001876   f00c
001878   c012     movff	0x12, 0xd          	MOVFF	r0x12, r0x0d
00187a   f00d
00187c   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
00187e   f008
001880   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
001882   f009
001884   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
001886   f00a
001888   c013     movff	0x13, 0xe          	MOVFF	r0x13, r0x0e
00188a   f00e
00188c   c014     movff	0x14, 0xf          	MOVFF	r0x14, r0x0f
00188e   f00f
                                           _00305_DS_:
                                           ;	.line	464; test.c	if (n == 0)
001890   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
001892   100f     iorwf	0xf, 0, 0          	IORWF	r0x0f, W
001894   e127     bnz	0x18e4               	BNZ	_00312_DS_
                                           ;	.line	466; test.c	if (siz != 0)
001896   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001898   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00189a   e009     bz	0x18ae                	BZ	_00319_DS_
                                           ;	.line	467; test.c	*d = '\0';          /* NUL-terminate dst */
00189c   0e00     movlw	0                  	MOVLW	0x00
00189e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0018a0   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
0018a2   ffe9
0018a4   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
0018a6   fff3
0018a8   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0018aa   ecb1     call	0x2b62, 0           	CALL	__gptrput1
0018ac   f015
                                           _00319_DS_:
                                           ;	.line	468; test.c	while (*s++)
0018ae   c00b     movff	0xb, 0             	MOVFF	r0x0b, r0x00
0018b0   f000
0018b2   c00c     movff	0xc, 0x1           	MOVFF	r0x0c, r0x01
0018b4   f001
0018b6   c00d     movff	0xd, 0x2           	MOVFF	r0x0d, r0x02
0018b8   f002
                                           _00308_DS_:
0018ba   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0018bc   ffe9
0018be   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0018c0   fff3
0018c2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0018c4   ec6a     call	0x2ad4, 0           	CALL	__gptrget1
0018c6   f015
0018c8   6e06     movwf	0x6, 0             	MOVWF	r0x06
0018ca   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0018cc   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0018ce   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0018d0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0018d2   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
0018d4   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0018d6   e1f1     bnz	0x18ba               	BNZ	_00308_DS_
0018d8   c000     movff	0, 0xb             	MOVFF	r0x00, r0x0b
0018da   f00b
0018dc   c001     movff	0x1, 0xc           	MOVFF	r0x01, r0x0c
0018de   f00c
0018e0   c002     movff	0x2, 0xd           	MOVFF	r0x02, r0x0d
0018e2   f00d
                                           _00312_DS_:
                                           ;	.line	472; test.c	return (s - src - 1);       /* count does not include NUL */
0018e4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0018e6   5c0b     subwf	0xb, 0, 0          	SUBWF	r0x0b, W
0018e8   6e03     movwf	0x3, 0             	MOVWF	r0x03
0018ea   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0018ec   580c     subwfb	0xc, 0, 0         	SUBWFB	r0x0c, W
0018ee   6e04     movwf	0x4, 0             	MOVWF	r0x04
0018f0   0eff     movlw	0xff               	MOVLW	0xff
0018f2   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
0018f4   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0018f6   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
0018f8   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0018fa   fff3
0018fc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0018fe   cfe4     movff	0xfe4, 0x15        	MOVFF	PREINC1, r0x15
001900   f015
001902   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
001904   f014
001906   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
001908   f013
00190a   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
00190c   f012
00190e   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
001910   f011
001912   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
001914   f010
001916   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
001918   f00f
00191a   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
00191c   f00e
00191e   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
001920   f00d
001922   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
001924   f00c
001926   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
001928   f00b
00192a   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
00192c   f00a
00192e   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001930   f009
001932   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001934   f008
001936   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001938   f007
00193a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00193c   f006
00193e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001940   f005
001942   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001944   f004
001946   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001948   f003
00194a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00194c   f002
00194e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001950   f001
001952   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001954   f000
001956   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001958   ffd9
00195a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__DisplayString	code
                                           _DisplayString:
                                           ;	.line	401; test.c	void DisplayString(BYTE pos, char* text)
00239e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0023a0   ffe5
0023a2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0023a4   ffd9
0023a6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0023a8   ffe5
0023aa   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0023ac   ffe5
0023ae   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0023b0   ffe5
0023b2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0023b4   ffe5
0023b6   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0023b8   ffe5
0023ba   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0023bc   ffe5
0023be   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0023c0   ffe5
0023c2   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0023c4   ffe5
0023c6   0e02     movlw	0x2                	MOVLW	0x02
0023c8   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0023ca   f000
0023cc   0e03     movlw	0x3                	MOVLW	0x03
0023ce   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0023d0   f001
0023d2   0e04     movlw	0x4                	MOVLW	0x04
0023d4   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0023d6   f002
0023d8   0e05     movlw	0x5                	MOVLW	0x05
0023da   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0023dc   f003
                                           ;	.line	403; test.c	BYTE l= strlen(text)+1;
0023de   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0023e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023e2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0023e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023e6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0023e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0023ea   ec01     call	0x2802, 0           	CALL	_strlen
0023ec   f014
0023ee   6e04     movwf	0x4, 0             	MOVWF	r0x04
0023f0   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
0023f2   f005
0023f4   0e03     movlw	0x3                	MOVLW	0x03
0023f6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0023f8   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
                                           ;	.line	404; test.c	BYTE max= 32-pos;
0023fa   5000     movf	0, 0, 0             	MOVF	r0x00, W
0023fc   0820     sublw	0x20               	SUBLW	0x20
0023fe   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	405; test.c	strlcpy((char*)&LCDText[pos], text,(l<max)?l:max );
002400   6a06     clrf	0x6, 0              	CLRF	r0x06
002402   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
002404   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002406   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
002408   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
00240a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00240c   6e06     movwf	0x6, 0             	MOVWF	r0x06
00240e   5000     movf	0, 0, 0             	MOVF	r0x00, W
002410   6e00     movwf	0, 0               	MOVWF	r0x00
002412   0e80     movlw	0x80               	MOVLW	0x80
002414   6e07     movwf	0x7, 0             	MOVWF	r0x07
002416   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002418   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
00241a   e302     bnc	0x2420               	BNC	_00292_DS_
00241c   c005     movff	0x5, 0x4           	MOVFF	r0x05, r0x04
00241e   f004
                                           _00292_DS_:
002420   6a05     clrf	0x5, 0              	CLRF	r0x05
002422   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002424   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002426   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002428   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00242a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00242c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00242e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002430   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002432   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002434   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002436   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002438   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00243a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00243c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00243e   5000     movf	0, 0, 0             	MOVF	r0x00, W
002440   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002442   ecae     call	0x175c, 0           	CALL	_strlcpy
002444   f00b
002446   0e08     movlw	0x8                	MOVLW	0x08
002448   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	406; test.c	LCDUpdate();
00244a   ec33     call	0x1066, 0           	CALL	_LCDUpdate
00244c   f008
00244e   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002450   f007
002452   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002454   f006
002456   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002458   f005
00245a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00245c   f004
00245e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002460   f003
002462   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002464   f002
002466   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002468   f001
00246a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00246c   f000
00246e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002470   ffd9
002472   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__DisplayWORD	code
                                           _DisplayWORD:
                                           ;	.line	379; test.c	void DisplayWORD(BYTE pos, WORD w) //WORD is a 16 bits unsigned
001d5c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001d5e   ffe5
001d60   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001d62   ffd9
001d64   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001d66   ffe5
001d68   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001d6a   ffe5
001d6c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001d6e   ffe5
001d70   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001d72   ffe5
001d74   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001d76   ffe5
001d78   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001d7a   ffe5
001d7c   0e02     movlw	0x2                	MOVLW	0x02
001d7e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001d80   f000
001d82   0e03     movlw	0x3                	MOVLW	0x03
001d84   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001d86   f001
001d88   0e04     movlw	0x4                	MOVLW	0x04
001d8a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001d8c   f002
                                           ;	.line	387; test.c	ultoa(w, WDigit, radix);      
001d8e   6a03     clrf	0x3, 0              	CLRF	r0x03
001d90   6a04     clrf	0x4, 0              	CLRF	r0x04
001d92   0e0a     movlw	0xa                	MOVLW	0x0a
001d94   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d96   0e0f     movlw	0xf                	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
001d98   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d9a   0e57     movlw	0x57               	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
001d9c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d9e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001da0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001da2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001da4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001da6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001da8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001daa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001dac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001dae   ecae     call	0x195c, 0           	CALL	_ultoa
001db0   f00c
001db2   0e07     movlw	0x7                	MOVLW	0x07
001db4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	388; test.c	for(j = 0; j < strlen((char*)WDigit); j++)
001db6   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00273_DS_:
001db8   0e0f     movlw	0xf                	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
001dba   6e03     movwf	0x3, 0             	MOVWF	r0x03
001dbc   0e57     movlw	0x57               	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
001dbe   6e02     movwf	0x2, 0             	MOVWF	r0x02
001dc0   0e80     movlw	0x80               	MOVLW	0x80
001dc2   6e04     movwf	0x4, 0             	MOVWF	r0x04
001dc4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001dc6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001dc8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001dca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001dcc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001dce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001dd0   ec01     call	0x2802, 0           	CALL	_strlen
001dd2   f014
001dd4   6e02     movwf	0x2, 0             	MOVWF	r0x02
001dd6   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
001dd8   f003
001dda   0e03     movlw	0x3                	MOVLW	0x03
001ddc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001dde   c001     movff	0x1, 0x4           	MOVFF	r0x01, r0x04
001de0   f004
001de2   6a05     clrf	0x5, 0              	CLRF	r0x05
001de4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001de6   0f80     addlw	0x80               	ADDLW	0x80
001de8   6ef3     movwf	0xf3, 0            	MOVWF	PRODL
001dea   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001dec   0f80     addlw	0x80               	ADDLW	0x80
001dee   5cf3     subwf	0xf3, 0, 0         	SUBWF	PRODL, W
001df0   e102     bnz	0x1df6               	BNZ	_00283_DS_
001df2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001df4   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
                                           _00283_DS_:
001df6   e21c     bc	0x1e30                	BC	_00276_DS_
                                           ;	.line	390; test.c	LCDText[LCDPos++] = WDigit[j];
001df8   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
001dfa   f002
001dfc   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001dfe   6a03     clrf	0x3, 0              	CLRF	r0x03
001e00   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001e02   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
001e04   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001e06   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001e08   0e57     movlw	0x57               	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
001e0a   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
001e0c   6e04     movwf	0x4, 0             	MOVWF	r0x04
001e0e   6a05     clrf	0x5, 0              	CLRF	r0x05
001e10   0e0f     movlw	0xf                	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
001e12   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
001e14   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
001e16   ffe9
001e18   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
001e1a   ffea
001e1c   cfef     movff	0xfef, 0x4         	MOVFF	INDF0, r0x04
001e1e   f004
001e20   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
001e22   ffe9
001e24   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
001e26   ffea
001e28   c004     movff	0x4, 0xfef         	MOVFF	r0x04, INDF0
001e2a   ffef
                                           ;	.line	388; test.c	for(j = 0; j < strlen((char*)WDigit); j++)
001e2c   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
001e2e   d7c4     bra	0x1db8               	BRA	_00273_DS_
                                           _00276_DS_:
                                           ;	.line	392; test.c	if(LCDPos < 32u)
001e30   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
001e32   f001
001e34   6a02     clrf	0x2, 0              	CLRF	r0x02
001e36   0e00     movlw	0                  	MOVLW	0x00
001e38   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
001e3a   e102     bnz	0x1e40               	BNZ	_00284_DS_
001e3c   0e20     movlw	0x20               	MOVLW	0x20
001e3e   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00284_DS_:
001e40   e20b     bc	0x1e58                	BC	_00272_DS_
                                           ;	.line	393; test.c	LCDText[LCDPos] = 0;
001e42   6a01     clrf	0x1, 0              	CLRF	r0x01
001e44   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001e46   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001e48   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001e4a   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001e4c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001e4e   ffe9
001e50   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
001e52   ffea
001e54   0e00     movlw	0                  	MOVLW	0x00
001e56   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           _00272_DS_:
                                           ;	.line	394; test.c	LCDUpdate();
001e58   ec33     call	0x1066, 0           	CALL	_LCDUpdate
001e5a   f008
001e5c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001e5e   f005
001e60   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001e62   f004
001e64   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001e66   f003
001e68   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001e6a   f002
001e6c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001e6e   f001
001e70   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001e72   f000
001e74   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001e76   ffd9
001e78   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__LowPriorityInterrupt	code
                                           _LowPriorityInterrupt:
                                           ;	.line	289; test.c	void LowPriorityInterrupt(void) __interrupt (2)
00152c   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
00152e   ffe5
001530   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
001532   ffe5
001534   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
001536   ffe5
001538   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
00153a   ffe5
00153c   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
00153e   ffe5
001540   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
001542   ffe5
001544   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
001546   ffe5
001548   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
00154a   ffe5
00154c   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
00154e   ffe5
001550   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001552   ffe5
001554   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001556   ffd9
001558   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00155a   ffe5
                                           ;	.line	291; test.c	if (INTCON3bits.INT3F){ //Interrupt Flag BUT1
00155c   a4f0     btfss	0xf0, 0x2, 0       	BTFSS	_INTCON3bits, 2
00155e   d075     bra	0x164a               	BRA	_00243_DS_
                                           ;	.line	292; test.c	switch(stateMenu){
001560   0e00     movlw	0                  	MOVLW	0x00
001562   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
001564   5d30     subwf	0x30, 0, 0x1       	SUBWF	(_stateMenu + 1), W, B
001566   e103     bnz	0x156e               	BNZ	_00261_DS_
001568   0e08     movlw	0x8                	MOVLW	0x08
00156a   010e     movlb	0xe                	BANKSEL	_stateMenu
00156c   5d2f     subwf	0x2f, 0, 0x1       	SUBWF	_stateMenu, W, B
                                           _00261_DS_:
00156e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001570   d06b     bra	0x1648               	BRA	_00241_DS_
001572   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001574   ffe5
001576   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001578   ffe5
00157a   6a02     clrf	0x2, 0              	CLRF	r0x02
00157c   010e     movlb	0xe                	BANKSEL	_stateMenu
00157e   352f     rlcf	0x2f, 0, 0x1        	RLCF	_stateMenu, W, B
001580   3602     rlcf	0x2, 0x1, 0         	RLCF	r0x02, F
001582   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
001584   3602     rlcf	0x2, 0x1, 0         	RLCF	r0x02, F
001586   0bfc     andlw	0xfc               	ANDLW	0xfc
001588   6e01     movwf	0x1, 0             	MOVWF	r0x01
00158a   0e00     movlw	0                  	MOVLW	UPPER(_00262_DS_)
00158c   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
00158e   0e15     movlw	0x15               	MOVLW	HIGH(_00262_DS_)
001590   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
001592   0eaa     movlw	0xaa               	MOVLW	LOW(_00262_DS_)
001594   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
001596   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001598   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
00159a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00159c   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
00159e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0015a0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0015a2   f002
0015a4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0015a6   f001
0015a8   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00262_DS_:
0015aa   efe5     goto	0x15ca              	GOTO	_00233_DS_
0015ac   f00a
0015ae   eff5     goto	0x15ea              	GOTO	_00234_DS_
0015b0   f00a
0015b2   effb     goto	0x15f6              	GOTO	_00235_DS_
0015b4   f00a
0015b6   ef01     goto	0x1602              	GOTO	_00236_DS_
0015b8   f00b
0015ba   ef07     goto	0x160e              	GOTO	_00237_DS_
0015bc   f00b
0015be   ef0d     goto	0x161a              	GOTO	_00238_DS_
0015c0   f00b
0015c2   ef13     goto	0x1626              	GOTO	_00239_DS_
0015c4   f00b
0015c6   ef19     goto	0x1632              	GOTO	_00240_DS_
0015c8   f00b
                                           _00233_DS_:
                                           ;	.line	294; test.c	alarmStatus ^=1; // Enable/disable alarm
0015ca   0e01     movlw	0x1                	MOVLW	0x01
0015cc   010e     movlb	0xe                	BANKSEL	_alarmStatus
0015ce   1b3b     xorwf	0x3b, 0x1, 0x1     	XORWF	_alarmStatus, F, B
                                           ;	.line	295; test.c	LED0_IO ^= 1;
0015d0   6a00     clrf	0, 0                	CLRF	r0x00
0015d2   b091     btfsc	0x91, 0, 0         	BTFSC	_LATJbits, 0
0015d4   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0015d6   0e01     movlw	0x1                	MOVLW	0x01
0015d8   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
0015da   5000     movf	0, 0, 0             	MOVF	r0x00, W
0015dc   0b01     andlw	0x1                	ANDLW	0x01
0015de   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0015e0   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
0015e2   0bfe     andlw	0xfe               	ANDLW	0xfe
0015e4   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
0015e6   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
                                           ;	.line	296; test.c	break; 
0015e8   d02f     bra	0x1648               	BRA	_00241_DS_
                                           _00234_DS_:
                                           ;	.line	298; test.c	stateMenu = SET_TIME_MINUTES;
0015ea   0e02     movlw	0x2                	MOVLW	0x02
0015ec   010e     movlb	0xe                	BANKSEL	_stateMenu
0015ee   6f2f     movwf	0x2f, 0x1          	MOVWF	_stateMenu, B
0015f0   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
0015f2   6b30     clrf	0x30, 0x1           	CLRF	(_stateMenu + 1), B
                                           ;	.line	299; test.c	break;
0015f4   d029     bra	0x1648               	BRA	_00241_DS_
                                           _00235_DS_:
0015f6   010e     movlb	0xe                	BANKSEL	_minutes
                                           ;	.line	301; test.c	minutes++;
0015f8   2b33     incf	0x33, 0x1, 0x1      	INCF	_minutes, F, B
0015fa   e302     bnc	0x1600               	BNC	_10299_DS_
0015fc   010e     movlb	0xe                	BANKSEL	(_minutes + 1)
0015fe   2b34     incf	0x34, 0x1, 0x1      	INCF	(_minutes + 1), F, B
                                           _10299_DS_:
                                           ;	.line	302; test.c	break;
001600   d023     bra	0x1648               	BRA	_00241_DS_
                                           _00236_DS_:
001602   010e     movlb	0xe                	BANKSEL	_hours
                                           ;	.line	304; test.c	hours++;
001604   2b31     incf	0x31, 0x1, 0x1      	INCF	_hours, F, B
001606   e302     bnc	0x160c               	BNC	_20300_DS_
001608   010e     movlb	0xe                	BANKSEL	(_hours + 1)
00160a   2b32     incf	0x32, 0x1, 0x1      	INCF	(_hours + 1), F, B
                                           _20300_DS_:
                                           ;	.line	305; test.c	break;
00160c   d01d     bra	0x1648               	BRA	_00241_DS_
                                           _00237_DS_:
                                           ;	.line	307; test.c	stateMenu = SET_ALARMCLOCK_MINUTES;
00160e   0e05     movlw	0x5                	MOVLW	0x05
001610   010e     movlb	0xe                	BANKSEL	_stateMenu
001612   6f2f     movwf	0x2f, 0x1          	MOVWF	_stateMenu, B
001614   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
001616   6b30     clrf	0x30, 0x1           	CLRF	(_stateMenu + 1), B
                                           ;	.line	308; test.c	break;
001618   d017     bra	0x1648               	BRA	_00241_DS_
                                           _00238_DS_:
00161a   010e     movlb	0xe                	BANKSEL	_alarmMinutes
                                           ;	.line	310; test.c	alarmMinutes++;
00161c   2b39     incf	0x39, 0x1, 0x1      	INCF	_alarmMinutes, F, B
00161e   e302     bnc	0x1624               	BNC	_30301_DS_
001620   010e     movlb	0xe                	BANKSEL	(_alarmMinutes + 1)
001622   2b3a     incf	0x3a, 0x1, 0x1      	INCF	(_alarmMinutes + 1), F, B
                                           _30301_DS_:
                                           ;	.line	311; test.c	break;
001624   d011     bra	0x1648               	BRA	_00241_DS_
                                           _00239_DS_:
001626   010e     movlb	0xe                	BANKSEL	_alarmHours
                                           ;	.line	313; test.c	alarmHours++;
001628   2b37     incf	0x37, 0x1, 0x1      	INCF	_alarmHours, F, B
00162a   e302     bnc	0x1630               	BNC	_40302_DS_
00162c   010e     movlb	0xe                	BANKSEL	(_alarmHours + 1)
00162e   2b38     incf	0x38, 0x1, 0x1      	INCF	(_alarmHours + 1), F, B
                                           _40302_DS_:
                                           ;	.line	314; test.c	break;
001630   d00b     bra	0x1648               	BRA	_00241_DS_
                                           _00240_DS_:
001632   010e     movlb	0xe                	BANKSEL	_stateMenu
                                           ;	.line	316; test.c	stateMenu = STANDARD_STATE;
001634   6b2f     clrf	0x2f, 0x1           	CLRF	_stateMenu, B
001636   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
001638   6b30     clrf	0x30, 0x1           	CLRF	(_stateMenu + 1), B
00163a   010e     movlb	0xe                	BANKSEL	_alarmStatus
                                           ;	.line	317; test.c	alarmStatus = 0;
00163c   6b3b     clrf	0x3b, 0x1           	CLRF	_alarmStatus, B
00163e   010e     movlb	0xe                	BANKSEL	(_alarmStatus + 1)
001640   6b3c     clrf	0x3c, 0x1           	CLRF	(_alarmStatus + 1), B
                                           ;	.line	318; test.c	LED0_IO = 0;
001642   9091     bcf	0x91, 0, 0           	BCF	_LATJbits, 0
                                           ;	.line	319; test.c	LED1_IO = 0;
001644   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	320; test.c	LED2_IO = 0;
001646   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           _00241_DS_:
                                           ;	.line	324; test.c	INTCON3bits.INT3F = 0; // clear flag
001648   94f0     bcf	0xf0, 0x2, 0         	BCF	_INTCON3bits, 2
                                           _00243_DS_:
                                           ;	.line	327; test.c	if (INTCON3bits.INT1F){ //Interrupt Flag BUT2
00164a   a0f0     btfss	0xf0, 0, 0         	BTFSS	_INTCON3bits, 0
00164c   d070     bra	0x172e               	BRA	_00255_DS_
                                           ;	.line	328; test.c	switch(stateMenu){
00164e   0e00     movlw	0                  	MOVLW	0x00
001650   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
001652   5d30     subwf	0x30, 0, 0x1       	SUBWF	(_stateMenu + 1), W, B
001654   e103     bnz	0x165c               	BNZ	_00265_DS_
001656   0e08     movlw	0x8                	MOVLW	0x08
001658   010e     movlb	0xe                	BANKSEL	_stateMenu
00165a   5d2f     subwf	0x2f, 0, 0x1       	SUBWF	_stateMenu, W, B
                                           _00265_DS_:
00165c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00165e   d066     bra	0x172c               	BRA	_00252_DS_
001660   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001662   ffe5
001664   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001666   ffe5
001668   6a02     clrf	0x2, 0              	CLRF	r0x02
00166a   010e     movlb	0xe                	BANKSEL	_stateMenu
00166c   352f     rlcf	0x2f, 0, 0x1        	RLCF	_stateMenu, W, B
00166e   3602     rlcf	0x2, 0x1, 0         	RLCF	r0x02, F
001670   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
001672   3602     rlcf	0x2, 0x1, 0         	RLCF	r0x02, F
001674   0bfc     andlw	0xfc               	ANDLW	0xfc
001676   6e01     movwf	0x1, 0             	MOVWF	r0x01
001678   0e00     movlw	0                  	MOVLW	UPPER(_00266_DS_)
00167a   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
00167c   0e16     movlw	0x16               	MOVLW	HIGH(_00266_DS_)
00167e   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
001680   0e98     movlw	0x98               	MOVLW	LOW(_00266_DS_)
001682   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
001684   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001686   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
001688   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00168a   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
00168c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00168e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001690   f002
001692   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001694   f001
001696   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00266_DS_:
001698   ef5c     goto	0x16b8              	GOTO	_00244_DS_
00169a   f00b
00169c   ef62     goto	0x16c4              	GOTO	_00245_DS_
00169e   f00b
0016a0   ef68     goto	0x16d0              	GOTO	_00246_DS_
0016a2   f00b
0016a4   ef6e     goto	0x16dc              	GOTO	_00247_DS_
0016a6   f00b
0016a8   ef77     goto	0x16ee              	GOTO	_00248_DS_
0016aa   f00b
0016ac   ef7c     goto	0x16f8              	GOTO	_00249_DS_
0016ae   f00b
0016b0   ef82     goto	0x1704              	GOTO	_00250_DS_
0016b2   f00b
0016b4   ef8b     goto	0x1716              	GOTO	_00251_DS_
0016b6   f00b
                                           _00244_DS_:
                                           ;	.line	330; test.c	stateMenu = SET_TIME_MENU;
0016b8   0e01     movlw	0x1                	MOVLW	0x01
0016ba   010e     movlb	0xe                	BANKSEL	_stateMenu
0016bc   6f2f     movwf	0x2f, 0x1          	MOVWF	_stateMenu, B
0016be   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
0016c0   6b30     clrf	0x30, 0x1           	CLRF	(_stateMenu + 1), B
                                           ;	.line	331; test.c	break; 
0016c2   d034     bra	0x172c               	BRA	_00252_DS_
                                           _00245_DS_:
                                           ;	.line	333; test.c	stateMenu = SET_ALARMCLOCK_MENU;
0016c4   0e04     movlw	0x4                	MOVLW	0x04
0016c6   010e     movlb	0xe                	BANKSEL	_stateMenu
0016c8   6f2f     movwf	0x2f, 0x1          	MOVWF	_stateMenu, B
0016ca   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
0016cc   6b30     clrf	0x30, 0x1           	CLRF	(_stateMenu + 1), B
                                           ;	.line	334; test.c	break;
0016ce   d02e     bra	0x172c               	BRA	_00252_DS_
                                           _00246_DS_:
                                           ;	.line	336; test.c	stateMenu = SET_TIME_HOURS;
0016d0   0e03     movlw	0x3                	MOVLW	0x03
0016d2   010e     movlb	0xe                	BANKSEL	_stateMenu
0016d4   6f2f     movwf	0x2f, 0x1          	MOVWF	_stateMenu, B
0016d6   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
0016d8   6b30     clrf	0x30, 0x1           	CLRF	(_stateMenu + 1), B
                                           ;	.line	337; test.c	break;
0016da   d028     bra	0x172c               	BRA	_00252_DS_
                                           _00247_DS_:
0016dc   010e     movlb	0xe                	BANKSEL	_stateMenu
                                           ;	.line	339; test.c	stateMenu = STANDARD_STATE;
0016de   6b2f     clrf	0x2f, 0x1           	CLRF	_stateMenu, B
0016e0   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
0016e2   6b30     clrf	0x30, 0x1           	CLRF	(_stateMenu + 1), B
0016e4   010e     movlb	0xe                	BANKSEL	_alarmCheck
                                           ;	.line	340; test.c	alarmCheck = 0;
0016e6   6b3d     clrf	0x3d, 0x1           	CLRF	_alarmCheck, B
0016e8   010e     movlb	0xe                	BANKSEL	(_alarmCheck + 1)
0016ea   6b3e     clrf	0x3e, 0x1           	CLRF	(_alarmCheck + 1), B
                                           ;	.line	341; test.c	break;
0016ec   d01f     bra	0x172c               	BRA	_00252_DS_
                                           _00248_DS_:
0016ee   010e     movlb	0xe                	BANKSEL	_stateMenu
                                           ;	.line	343; test.c	stateMenu = STANDARD_STATE;
0016f0   6b2f     clrf	0x2f, 0x1           	CLRF	_stateMenu, B
0016f2   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
0016f4   6b30     clrf	0x30, 0x1           	CLRF	(_stateMenu + 1), B
                                           ;	.line	344; test.c	break;
0016f6   d01a     bra	0x172c               	BRA	_00252_DS_
                                           _00249_DS_:
                                           ;	.line	346; test.c	stateMenu = SET_ALARMCLOCK_HOURS;
0016f8   0e06     movlw	0x6                	MOVLW	0x06
0016fa   010e     movlb	0xe                	BANKSEL	_stateMenu
0016fc   6f2f     movwf	0x2f, 0x1          	MOVWF	_stateMenu, B
0016fe   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
001700   6b30     clrf	0x30, 0x1           	CLRF	(_stateMenu + 1), B
                                           ;	.line	347; test.c	break;
001702   d014     bra	0x172c               	BRA	_00252_DS_
                                           _00250_DS_:
001704   010e     movlb	0xe                	BANKSEL	_stateMenu
                                           ;	.line	349; test.c	stateMenu = STANDARD_STATE;
001706   6b2f     clrf	0x2f, 0x1           	CLRF	_stateMenu, B
001708   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
00170a   6b30     clrf	0x30, 0x1           	CLRF	(_stateMenu + 1), B
00170c   010e     movlb	0xe                	BANKSEL	_alarmCheck
                                           ;	.line	350; test.c	alarmCheck = 0;
00170e   6b3d     clrf	0x3d, 0x1           	CLRF	_alarmCheck, B
001710   010e     movlb	0xe                	BANKSEL	(_alarmCheck + 1)
001712   6b3e     clrf	0x3e, 0x1           	CLRF	(_alarmCheck + 1), B
                                           ;	.line	351; test.c	break;
001714   d00b     bra	0x172c               	BRA	_00252_DS_
                                           _00251_DS_:
001716   010e     movlb	0xe                	BANKSEL	_stateMenu
                                           ;	.line	353; test.c	stateMenu = STANDARD_STATE;
001718   6b2f     clrf	0x2f, 0x1           	CLRF	_stateMenu, B
00171a   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
00171c   6b30     clrf	0x30, 0x1           	CLRF	(_stateMenu + 1), B
00171e   010e     movlb	0xe                	BANKSEL	_alarmStatus
                                           ;	.line	354; test.c	alarmStatus = 0;
001720   6b3b     clrf	0x3b, 0x1           	CLRF	_alarmStatus, B
001722   010e     movlb	0xe                	BANKSEL	(_alarmStatus + 1)
001724   6b3c     clrf	0x3c, 0x1           	CLRF	(_alarmStatus + 1), B
                                           ;	.line	355; test.c	LED0_IO = 0;
001726   9091     bcf	0x91, 0, 0           	BCF	_LATJbits, 0
                                           ;	.line	356; test.c	LED1_IO = 0;
001728   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	357; test.c	LED2_IO = 0;
00172a   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           _00252_DS_:
                                           ;	.line	361; test.c	INTCON3bits.INT1F = 0; // clear flag
00172c   90f0     bcf	0xf0, 0, 0           	BCF	_INTCON3bits, 0
                                           _00255_DS_:
00172e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001730   f000
001732   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001734   ffd9
001736   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
001738   fffb
00173a   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
00173c   fffa
00173e   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
001740   ffea
001742   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
001744   ffe9
001746   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
001748   fff4
00174a   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
00174c   fff3
00174e   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
001750   ffe0
001752   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
001754   ffd8
001756   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
001758   ffe8
00175a   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_test__HighPriorityInterrupt	code
                                           _HighPriorityInterrupt:
                                           ;	.line	273; test.c	void HighPriorityInterrupt(void) __interrupt (1)
002882   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
002884   ffe5
002886   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
002888   ffe5
00288a   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
00288c   ffe5
00288e   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
002890   ffe5
002892   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
002894   ffe5
002896   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
002898   ffe5
00289a   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
00289c   ffe5
00289e   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
0028a0   ffe5
0028a2   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
0028a4   ffe5
0028a6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0028a8   ffe5
0028aa   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0028ac   ffd9
                                           ;	.line	275; test.c	if (INTCONbits.TMR0IF)
0028ae   a4f2     btfss	0xf2, 0x2, 0       	BTFSS	_INTCONbits, 2
0028b0   d00a     bra	0x28c6               	BRA	_00228_DS_
                                           ;	.line	279; test.c	TMR0H = 0xE7; 
0028b2   0ee7     movlw	0xe7               	MOVLW	0xe7
0028b4   6ed7     movwf	0xd7, 0            	MOVWF	_TMR0H
                                           ;	.line	280; test.c	TMR0L = 0x96;
0028b6   0e96     movlw	0x96               	MOVLW	0x96
0028b8   6ed6     movwf	0xd6, 0            	MOVWF	_TMR0L
                                           ;	.line	281; test.c	INTCONbits.TMR0IF = 0; // OBLIGATOIRE: Remettre le bit d'interruption à zéro
0028ba   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
0028bc   010e     movlb	0xe                	BANKSEL	_milliSec
                                           ;	.line	282; test.c	milliSec++;
0028be   2b3f     incf	0x3f, 0x1, 0x1      	INCF	_milliSec, F, B
0028c0   e302     bnc	0x28c6               	BNC	_50303_DS_
0028c2   010e     movlb	0xe                	BANKSEL	(_milliSec + 1)
0028c4   2b40     incf	0x40, 0x1, 0x1      	INCF	(_milliSec + 1), F, B
                                           _50303_DS_:
                                           _00228_DS_:
0028c6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0028c8   ffd9
0028ca   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
0028cc   fffb
0028ce   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
0028d0   fffa
0028d2   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
0028d4   ffea
0028d6   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
0028d8   ffe9
0028da   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
0028dc   fff4
0028de   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
0028e0   fff3
0028e2   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
0028e4   ffe0
0028e6   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
0028e8   ffd8
0028ea   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
0028ec   ffe8
0028ee   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_test__ConvertTime	code
                                           _ConvertTime:
                                           ;	.line	262; test.c	void ConvertTime(short time, char* str){
002606   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002608   ffe5
00260a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00260c   ffd9
00260e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002610   ffe5
002612   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002614   ffe5
002616   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002618   ffe5
00261a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00261c   ffe5
00261e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002620   ffe5
002622   0e02     movlw	0x2                	MOVLW	0x02
002624   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002626   f000
002628   0e03     movlw	0x3                	MOVLW	0x03
00262a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00262c   f001
00262e   0e04     movlw	0x4                	MOVLW	0x04
002630   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002632   f002
002634   0e05     movlw	0x5                	MOVLW	0x05
002636   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
002638   f003
00263a   0e06     movlw	0x6                	MOVLW	0x06
00263c   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00263e   f004
                                           ;	.line	263; test.c	if(time<10){
002640   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002642   0f80     addlw	0x80               	ADDLW	0x80
002644   0f80     addlw	0x80               	ADDLW	0x80
002646   e102     bnz	0x264c               	BNZ	_00221_DS_
002648   0e0a     movlw	0xa                	MOVLW	0x0a
00264a   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00221_DS_:
00264c   e215     bc	0x2678                	BC	_00216_DS_
                                           ;	.line	264; test.c	sprintf(str,"0%u\0",time);
00264e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002650   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002652   5000     movf	0, 0, 0             	MOVF	r0x00, W
002654   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002656   0e00     movlw	0                  	MOVLW	UPPER(__str_10)
002658   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00265a   0e1c     movlw	0x1c               	MOVLW	HIGH(__str_10)
00265c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00265e   0e2e     movlw	0x2e               	MOVLW	LOW(__str_10)
002660   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002662   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002664   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002666   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002668   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00266a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00266c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00266e   ec5a     call	0x22b4, 0           	CALL	_sprintf
002670   f011
002672   0e08     movlw	0x8                	MOVLW	0x08
002674   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002676   d014     bra	0x26a0               	BRA	_00218_DS_
                                           _00216_DS_:
                                           ;	.line	266; test.c	sprintf(str,"%u\0",time);
002678   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00267a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00267c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00267e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002680   0e00     movlw	0                  	MOVLW	UPPER(__str_11)
002682   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002684   0e1c     movlw	0x1c               	MOVLW	HIGH(__str_11)
002686   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002688   0e34     movlw	0x34               	MOVLW	LOW(__str_11)
00268a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00268c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00268e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002690   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002692   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002694   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002696   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002698   ec5a     call	0x22b4, 0           	CALL	_sprintf
00269a   f011
00269c   0e08     movlw	0x8                	MOVLW	0x08
00269e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00218_DS_:
0026a0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0026a2   f004
0026a4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0026a6   f003
0026a8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0026aa   f002
0026ac   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0026ae   f001
0026b0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0026b2   f000
0026b4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0026b6   ffd9
0026b8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__SwitchLedState	code
                                           _SwitchLedState:
                                           ;	.line	254; test.c	void SwitchLedState(){
0029b8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0029ba   ffe5
0029bc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0029be   ffd9
0029c0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0029c2   ffe5
                                           ;	.line	255; test.c	LED1_IO ^= 1;
0029c4   6a00     clrf	0, 0                	CLRF	r0x00
0029c6   b291     btfsc	0x91, 0x1, 0       	BTFSC	_LATJbits, 1
0029c8   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0029ca   0e01     movlw	0x1                	MOVLW	0x01
0029cc   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
0029ce   5000     movf	0, 0, 0             	MOVF	r0x00, W
0029d0   0b01     andlw	0x1                	ANDLW	0x01
0029d2   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
0029d4   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0029d6   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
0029d8   0bfd     andlw	0xfd               	ANDLW	0xfd
0029da   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
0029dc   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
                                           ;	.line	256; test.c	LED2_IO ^= 1;
0029de   6a00     clrf	0, 0                	CLRF	r0x00
0029e0   b491     btfsc	0x91, 0x2, 0       	BTFSC	_LATJbits, 2
0029e2   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0029e4   0e01     movlw	0x1                	MOVLW	0x01
0029e6   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
0029e8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0029ea   0b01     andlw	0x1                	ANDLW	0x01
0029ec   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
0029ee   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
0029f0   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0029f2   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
0029f4   0bfb     andlw	0xfb               	ANDLW	0xfb
0029f6   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
0029f8   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
0029fa   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0029fc   f000
0029fe   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002a00   ffd9
002a02   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__UpdateLCD	code
                                           _UpdateLCD:
                                           ;	.line	201; test.c	void UpdateLCD(){
000852   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000854   ffe5
000856   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000858   ffd9
00085a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00085c   ffe5
00085e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000860   ffe5
000862   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000864   ffe5
000866   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000868   ffe5
00086a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00086c   ffe5
00086e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000870   ffe5
000872   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000874   ffe5
000876   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000878   ffe5
00087a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00087c   ffe5
00087e   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
000880   ffe5
000882   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
000884   ffe5
000886   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
000888   ffe5
00088a   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
00088c   ffe5
00088e   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
000890   ffe5
000892   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
000894   ffe5
                                           ;	.line	202; test.c	switch(stateMenu){
000896   0e00     movlw	0                  	MOVLW	0x00
000898   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
00089a   5d30     subwf	0x30, 0, 0x1       	SUBWF	(_stateMenu + 1), W, B
00089c   e103     bnz	0x8a4                	BNZ	_00204_DS_
00089e   0e08     movlw	0x8                	MOVLW	0x08
0008a0   010e     movlb	0xe                	BANKSEL	_stateMenu
0008a2   5d2f     subwf	0x2f, 0, 0x1       	SUBWF	_stateMenu, W, B
                                           _00204_DS_:
0008a4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0008a6   ef00     goto	0x1000              	GOTO	_00199_DS_
0008a8   f008
0008aa   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
0008ac   ffe5
0008ae   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
0008b0   ffe5
0008b2   6a10     clrf	0x10, 0             	CLRF	r0x10
0008b4   010e     movlb	0xe                	BANKSEL	_stateMenu
0008b6   352f     rlcf	0x2f, 0, 0x1        	RLCF	_stateMenu, W, B
0008b8   3610     rlcf	0x10, 0x1, 0        	RLCF	r0x10, F
0008ba   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
0008bc   3610     rlcf	0x10, 0x1, 0        	RLCF	r0x10, F
0008be   0bfc     andlw	0xfc               	ANDLW	0xfc
0008c0   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
0008c2   0e00     movlw	0                  	MOVLW	UPPER(_00205_DS_)
0008c4   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
0008c6   0e08     movlw	0x8                	MOVLW	HIGH(_00205_DS_)
0008c8   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
0008ca   0ee2     movlw	0xe2               	MOVLW	LOW(_00205_DS_)
0008cc   260f     addwf	0xf, 0x1, 0        	ADDWF	r0x0f, F
0008ce   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
0008d0   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
0008d2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0008d4   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
0008d6   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
0008d8   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
0008da   f010
0008dc   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
0008de   f00f
0008e0   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00205_DS_:
0008e2   ef81     goto	0x902               	GOTO	_00188_DS_
0008e4   f004
0008e6   ef8b     goto	0xb16               	GOTO	_00192_DS_
0008e8   f005
0008ea   efa3     goto	0xb46               	GOTO	_00193_DS_
0008ec   f005
0008ee   ef26     goto	0xc4c               	GOTO	_00194_DS_
0008f0   f006
0008f2   efa9     goto	0xd52               	GOTO	_00195_DS_
0008f4   f006
0008f6   efc0     goto	0xd80               	GOTO	_00196_DS_
0008f8   f006
0008fa   ef1f     goto	0xe3e               	GOTO	_00197_DS_
0008fc   f007
0008fe   ef7e     goto	0xefc               	GOTO	_00198_DS_
000900   f007
                                           _00188_DS_:
                                           ;	.line	204; test.c	ConvertTime(hours, h);
000902   ce31     movff	0xe31, 0           	MOVFF	_hours, r0x00
000904   f000
000906   ce32     movff	0xe32, 0x1         	MOVFF	(_hours + 1), r0x01
000908   f001
00090a   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
00090c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00090e   0e5d     movlw	0x5d               	MOVLW	LOW(_h)
000910   6e02     movwf	0x2, 0             	MOVWF	r0x02
000912   0e80     movlw	0x80               	MOVLW	0x80
000914   6e04     movwf	0x4, 0             	MOVWF	r0x04
000916   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000918   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00091a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00091c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00091e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000920   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000922   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000924   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000926   5000     movf	0, 0, 0             	MOVF	r0x00, W
000928   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00092a   ec03     call	0x2606, 0           	CALL	_ConvertTime
00092c   f013
00092e   0e05     movlw	0x5                	MOVLW	0x05
000930   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	205; test.c	ConvertTime(minutes, m);
000932   ce33     movff	0xe33, 0           	MOVFF	_minutes, r0x00
000934   f000
000936   ce34     movff	0xe34, 0x1         	MOVFF	(_minutes + 1), r0x01
000938   f001
00093a   0e0e     movlw	0xe                	MOVLW	HIGH(_m)
00093c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00093e   0e20     movlw	0x20               	MOVLW	LOW(_m)
000940   6e02     movwf	0x2, 0             	MOVWF	r0x02
000942   0e80     movlw	0x80               	MOVLW	0x80
000944   6e04     movwf	0x4, 0             	MOVWF	r0x04
000946   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000948   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00094a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00094c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00094e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000950   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000952   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000954   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000956   5000     movf	0, 0, 0             	MOVF	r0x00, W
000958   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00095a   ec03     call	0x2606, 0           	CALL	_ConvertTime
00095c   f013
00095e   0e05     movlw	0x5                	MOVLW	0x05
000960   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	206; test.c	ConvertTime(seconds, s);
000962   ce35     movff	0xe35, 0           	MOVFF	_seconds, r0x00
000964   f000
000966   ce36     movff	0xe36, 0x1         	MOVFF	(_seconds + 1), r0x01
000968   f001
00096a   0e0e     movlw	0xe                	MOVLW	HIGH(_s)
00096c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00096e   0e23     movlw	0x23               	MOVLW	LOW(_s)
000970   6e02     movwf	0x2, 0             	MOVWF	r0x02
000972   0e80     movlw	0x80               	MOVLW	0x80
000974   6e04     movwf	0x4, 0             	MOVWF	r0x04
000976   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000978   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00097a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00097c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00097e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000980   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000982   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000984   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000986   5000     movf	0, 0, 0             	MOVF	r0x00, W
000988   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00098a   ec03     call	0x2606, 0           	CALL	_ConvertTime
00098c   f013
00098e   0e05     movlw	0x5                	MOVLW	0x05
000990   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	207; test.c	ConvertTime(alarmHours, hA);
000992   ce37     movff	0xe37, 0           	MOVFF	_alarmHours, r0x00
000994   f000
000996   ce38     movff	0xe38, 0x1         	MOVFF	(_alarmHours + 1), r0x01
000998   f001
00099a   0e0e     movlw	0xe                	MOVLW	HIGH(_hA)
00099c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00099e   0e26     movlw	0x26               	MOVLW	LOW(_hA)
0009a0   6e02     movwf	0x2, 0             	MOVWF	r0x02
0009a2   0e80     movlw	0x80               	MOVLW	0x80
0009a4   6e04     movwf	0x4, 0             	MOVWF	r0x04
0009a6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0009a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009aa   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0009ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009ae   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0009b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009b2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0009b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009b6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0009b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009ba   ec03     call	0x2606, 0           	CALL	_ConvertTime
0009bc   f013
0009be   0e05     movlw	0x5                	MOVLW	0x05
0009c0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	208; test.c	ConvertTime(alarmMinutes, mA);
0009c2   ce39     movff	0xe39, 0           	MOVFF	_alarmMinutes, r0x00
0009c4   f000
0009c6   ce3a     movff	0xe3a, 0x1         	MOVFF	(_alarmMinutes + 1), r0x01
0009c8   f001
0009ca   0e0e     movlw	0xe                	MOVLW	HIGH(_mA)
0009cc   6e03     movwf	0x3, 0             	MOVWF	r0x03
0009ce   0e29     movlw	0x29               	MOVLW	LOW(_mA)
0009d0   6e02     movwf	0x2, 0             	MOVWF	r0x02
0009d2   0e80     movlw	0x80               	MOVLW	0x80
0009d4   6e04     movwf	0x4, 0             	MOVWF	r0x04
0009d6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0009d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009da   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0009dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009de   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0009e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009e2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0009e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009e6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0009e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009ea   ec03     call	0x2606, 0           	CALL	_ConvertTime
0009ec   f013
0009ee   0e05     movlw	0x5                	MOVLW	0x05
0009f0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0009f2   010e     movlb	0xe                	BANKSEL	_alarmStatus
                                           ;	.line	209; test.c	if(alarmStatus){
0009f4   513b     movf	0x3b, 0, 0x1        	MOVF	_alarmStatus, W, B
0009f6   010e     movlb	0xe                	BANKSEL	(_alarmStatus + 1)
0009f8   113c     iorwf	0x3c, 0, 0x1       	IORWF	(_alarmStatus + 1), W, B
0009fa   e02f     bz	0xa5a                 	BZ	_00190_DS_
                                           ;	.line	210; test.c	sprintf(alarmState,"ON %sh%s\0",hA, mA);
0009fc   0e0e     movlw	0xe                	MOVLW	HIGH(_mA)
0009fe   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a00   0e29     movlw	0x29               	MOVLW	LOW(_mA)
000a02   6e00     movwf	0, 0               	MOVWF	r0x00
000a04   0e80     movlw	0x80               	MOVLW	0x80
000a06   6e02     movwf	0x2, 0             	MOVWF	r0x02
000a08   0e0e     movlw	0xe                	MOVLW	HIGH(_hA)
000a0a   6e04     movwf	0x4, 0             	MOVWF	r0x04
000a0c   0e26     movlw	0x26               	MOVLW	LOW(_hA)
000a0e   6e03     movwf	0x3, 0             	MOVWF	r0x03
000a10   0e80     movlw	0x80               	MOVLW	0x80
000a12   6e05     movwf	0x5, 0             	MOVWF	r0x05
000a14   0e0f     movlw	0xf                	MOVLW	HIGH(_alarmState)
000a16   6e07     movwf	0x7, 0             	MOVWF	r0x07
000a18   0e4e     movlw	0x4e               	MOVLW	LOW(_alarmState)
000a1a   6e06     movwf	0x6, 0             	MOVWF	r0x06
000a1c   0e80     movlw	0x80               	MOVLW	0x80
000a1e   6e08     movwf	0x8, 0             	MOVWF	r0x08
000a20   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000a22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a24   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000a26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a28   5000     movf	0, 0, 0             	MOVF	r0x00, W
000a2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a2c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000a2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a30   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000a32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a34   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000a36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a38   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
000a3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a3c   0e1b     movlw	0x1b               	MOVLW	HIGH(__str_0)
000a3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a40   0e38     movlw	0x38               	MOVLW	LOW(__str_0)
000a42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a44   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000a46   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a48   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000a4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a4c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000a4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a50   ec5a     call	0x22b4, 0           	CALL	_sprintf
000a52   f011
000a54   0e0c     movlw	0xc                	MOVLW	0x0c
000a56   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000a58   d016     bra	0xa86                	BRA	_00191_DS_
                                           _00190_DS_:
                                           ;	.line	212; test.c	sprintf(alarmState,"OFF     \0");
000a5a   0e0f     movlw	0xf                	MOVLW	HIGH(_alarmState)
000a5c   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a5e   0e4e     movlw	0x4e               	MOVLW	LOW(_alarmState)
000a60   6e00     movwf	0, 0               	MOVWF	r0x00
000a62   0e80     movlw	0x80               	MOVLW	0x80
000a64   6e02     movwf	0x2, 0             	MOVWF	r0x02
000a66   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
000a68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a6a   0e1b     movlw	0x1b               	MOVLW	HIGH(__str_1)
000a6c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a6e   0e42     movlw	0x42               	MOVLW	LOW(__str_1)
000a70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a72   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000a74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a76   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000a78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a7a   5000     movf	0, 0, 0             	MOVF	r0x00, W
000a7c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a7e   ec5a     call	0x22b4, 0           	CALL	_sprintf
000a80   f011
000a82   0e06     movlw	0x6                	MOVLW	0x06
000a84   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00191_DS_:
                                           ;	.line	214; test.c	sprintf(LCDPrint,"    %s:%s:%s    Alarm %s",h,m,s,alarmState);
000a86   0e0f     movlw	0xf                	MOVLW	HIGH(_alarmState)
000a88   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a8a   0e4e     movlw	0x4e               	MOVLW	LOW(_alarmState)
000a8c   6e00     movwf	0, 0               	MOVWF	r0x00
000a8e   0e80     movlw	0x80               	MOVLW	0x80
000a90   6e02     movwf	0x2, 0             	MOVWF	r0x02
000a92   0e0e     movlw	0xe                	MOVLW	HIGH(_s)
000a94   6e04     movwf	0x4, 0             	MOVWF	r0x04
000a96   0e23     movlw	0x23               	MOVLW	LOW(_s)
000a98   6e03     movwf	0x3, 0             	MOVWF	r0x03
000a9a   0e80     movlw	0x80               	MOVLW	0x80
000a9c   6e05     movwf	0x5, 0             	MOVWF	r0x05
000a9e   0e0e     movlw	0xe                	MOVLW	HIGH(_m)
000aa0   6e07     movwf	0x7, 0             	MOVWF	r0x07
000aa2   0e20     movlw	0x20               	MOVLW	LOW(_m)
000aa4   6e06     movwf	0x6, 0             	MOVWF	r0x06
000aa6   0e80     movlw	0x80               	MOVLW	0x80
000aa8   6e08     movwf	0x8, 0             	MOVWF	r0x08
000aaa   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
000aac   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
000aae   0e5d     movlw	0x5d               	MOVLW	LOW(_h)
000ab0   6e09     movwf	0x9, 0             	MOVWF	r0x09
000ab2   0e80     movlw	0x80               	MOVLW	0x80
000ab4   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
000ab6   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDPrint)
000ab8   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
000aba   0e21     movlw	0x21               	MOVLW	LOW(_LCDPrint)
000abc   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
000abe   0e80     movlw	0x80               	MOVLW	0x80
000ac0   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
000ac2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000ac4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ac6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000ac8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aca   5000     movf	0, 0, 0             	MOVF	r0x00, W
000acc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ace   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000ad0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ad2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000ad4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ad6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000ad8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ada   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000adc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ade   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000ae0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ae2   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000ae4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ae6   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
000ae8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aea   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000aec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aee   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000af0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000af2   0e00     movlw	0                  	MOVLW	UPPER(__str_2)
000af4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000af6   0e1b     movlw	0x1b               	MOVLW	HIGH(__str_2)
000af8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000afa   0e4c     movlw	0x4c               	MOVLW	LOW(__str_2)
000afc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000afe   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
000b00   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b02   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
000b04   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b06   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
000b08   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b0a   ec5a     call	0x22b4, 0           	CALL	_sprintf
000b0c   f011
000b0e   0e12     movlw	0x12               	MOVLW	0x12
000b10   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	215; test.c	break;
000b12   ef00     goto	0x1000              	GOTO	_00199_DS_
000b14   f008
                                           _00192_DS_:
                                           ;	.line	217; test.c	sprintf(LCDPrint, "      MENU        Set time ?");
000b16   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDPrint)
000b18   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b1a   0e21     movlw	0x21               	MOVLW	LOW(_LCDPrint)
000b1c   6e00     movwf	0, 0               	MOVWF	r0x00
000b1e   0e80     movlw	0x80               	MOVLW	0x80
000b20   6e02     movwf	0x2, 0             	MOVWF	r0x02
000b22   0e00     movlw	0                  	MOVLW	UPPER(__str_3)
000b24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b26   0e1b     movlw	0x1b               	MOVLW	HIGH(__str_3)
000b28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b2a   0e66     movlw	0x66               	MOVLW	LOW(__str_3)
000b2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b2e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000b30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b32   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000b34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b36   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b38   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b3a   ec5a     call	0x22b4, 0           	CALL	_sprintf
000b3c   f011
000b3e   0e06     movlw	0x6                	MOVLW	0x06
000b40   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	218; test.c	break;
000b42   ef00     goto	0x1000              	GOTO	_00199_DS_
000b44   f008
                                           _00193_DS_:
                                           ;	.line	220; test.c	ConvertTime(hours, h);
000b46   ce31     movff	0xe31, 0           	MOVFF	_hours, r0x00
000b48   f000
000b4a   ce32     movff	0xe32, 0x1         	MOVFF	(_hours + 1), r0x01
000b4c   f001
000b4e   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
000b50   6e03     movwf	0x3, 0             	MOVWF	r0x03
000b52   0e5d     movlw	0x5d               	MOVLW	LOW(_h)
000b54   6e02     movwf	0x2, 0             	MOVWF	r0x02
000b56   0e80     movlw	0x80               	MOVLW	0x80
000b58   6e04     movwf	0x4, 0             	MOVWF	r0x04
000b5a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000b5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b5e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000b60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b62   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000b64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b66   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000b68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b6a   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b6c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b6e   ec03     call	0x2606, 0           	CALL	_ConvertTime
000b70   f013
000b72   0e05     movlw	0x5                	MOVLW	0x05
000b74   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	221; test.c	ConvertTime(minutes, m);
000b76   ce33     movff	0xe33, 0           	MOVFF	_minutes, r0x00
000b78   f000
000b7a   ce34     movff	0xe34, 0x1         	MOVFF	(_minutes + 1), r0x01
000b7c   f001
000b7e   0e0e     movlw	0xe                	MOVLW	HIGH(_m)
000b80   6e03     movwf	0x3, 0             	MOVWF	r0x03
000b82   0e20     movlw	0x20               	MOVLW	LOW(_m)
000b84   6e02     movwf	0x2, 0             	MOVWF	r0x02
000b86   0e80     movlw	0x80               	MOVLW	0x80
000b88   6e04     movwf	0x4, 0             	MOVWF	r0x04
000b8a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000b8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b8e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000b90   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b92   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000b94   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b96   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000b98   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b9a   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b9c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b9e   ec03     call	0x2606, 0           	CALL	_ConvertTime
000ba0   f013
000ba2   0e05     movlw	0x5                	MOVLW	0x05
000ba4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	222; test.c	ConvertTime(seconds, s);
000ba6   ce35     movff	0xe35, 0           	MOVFF	_seconds, r0x00
000ba8   f000
000baa   ce36     movff	0xe36, 0x1         	MOVFF	(_seconds + 1), r0x01
000bac   f001
000bae   0e0e     movlw	0xe                	MOVLW	HIGH(_s)
000bb0   6e03     movwf	0x3, 0             	MOVWF	r0x03
000bb2   0e23     movlw	0x23               	MOVLW	LOW(_s)
000bb4   6e02     movwf	0x2, 0             	MOVWF	r0x02
000bb6   0e80     movlw	0x80               	MOVLW	0x80
000bb8   6e04     movwf	0x4, 0             	MOVWF	r0x04
000bba   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000bbc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bbe   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000bc0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bc2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000bc4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bc6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000bc8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bca   5000     movf	0, 0, 0             	MOVF	r0x00, W
000bcc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bce   ec03     call	0x2606, 0           	CALL	_ConvertTime
000bd0   f013
000bd2   0e05     movlw	0x5                	MOVLW	0x05
000bd4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	223; test.c	sprintf(LCDPrint,"Set Minutes     %s:[%s]:%s",h,m,s);
000bd6   0e0e     movlw	0xe                	MOVLW	HIGH(_s)
000bd8   6e01     movwf	0x1, 0             	MOVWF	r0x01
000bda   0e23     movlw	0x23               	MOVLW	LOW(_s)
000bdc   6e00     movwf	0, 0               	MOVWF	r0x00
000bde   0e80     movlw	0x80               	MOVLW	0x80
000be0   6e02     movwf	0x2, 0             	MOVWF	r0x02
000be2   0e0e     movlw	0xe                	MOVLW	HIGH(_m)
000be4   6e04     movwf	0x4, 0             	MOVWF	r0x04
000be6   0e20     movlw	0x20               	MOVLW	LOW(_m)
000be8   6e03     movwf	0x3, 0             	MOVWF	r0x03
000bea   0e80     movlw	0x80               	MOVLW	0x80
000bec   6e05     movwf	0x5, 0             	MOVWF	r0x05
000bee   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
000bf0   6e07     movwf	0x7, 0             	MOVWF	r0x07
000bf2   0e5d     movlw	0x5d               	MOVLW	LOW(_h)
000bf4   6e06     movwf	0x6, 0             	MOVWF	r0x06
000bf6   0e80     movlw	0x80               	MOVLW	0x80
000bf8   6e08     movwf	0x8, 0             	MOVWF	r0x08
000bfa   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDPrint)
000bfc   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
000bfe   0e21     movlw	0x21               	MOVLW	LOW(_LCDPrint)
000c00   6e09     movwf	0x9, 0             	MOVWF	r0x09
000c02   0e80     movlw	0x80               	MOVLW	0x80
000c04   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
000c06   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000c08   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c0a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c0c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c0e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000c10   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c12   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000c14   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c16   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c18   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c1a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000c1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c1e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000c20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c22   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000c24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c26   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000c28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c2a   0e00     movlw	0                  	MOVLW	UPPER(__str_4)
000c2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c2e   0e1b     movlw	0x1b               	MOVLW	HIGH(__str_4)
000c30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c32   0e84     movlw	0x84               	MOVLW	LOW(__str_4)
000c34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c36   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
000c38   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c3a   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000c3c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c3e   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000c40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c42   ec5a     call	0x22b4, 0           	CALL	_sprintf
000c44   f011
000c46   0e0f     movlw	0xf                	MOVLW	0x0f
000c48   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	224; test.c	break;
000c4a   d1da     bra	0x1000               	BRA	_00199_DS_
                                           _00194_DS_:
                                           ;	.line	226; test.c	ConvertTime(hours, h);
000c4c   ce31     movff	0xe31, 0           	MOVFF	_hours, r0x00
000c4e   f000
000c50   ce32     movff	0xe32, 0x1         	MOVFF	(_hours + 1), r0x01
000c52   f001
000c54   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
000c56   6e03     movwf	0x3, 0             	MOVWF	r0x03
000c58   0e5d     movlw	0x5d               	MOVLW	LOW(_h)
000c5a   6e02     movwf	0x2, 0             	MOVWF	r0x02
000c5c   0e80     movlw	0x80               	MOVLW	0x80
000c5e   6e04     movwf	0x4, 0             	MOVWF	r0x04
000c60   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c62   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c64   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000c66   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c68   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000c6a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c6c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c6e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c70   5000     movf	0, 0, 0             	MOVF	r0x00, W
000c72   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c74   ec03     call	0x2606, 0           	CALL	_ConvertTime
000c76   f013
000c78   0e05     movlw	0x5                	MOVLW	0x05
000c7a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	227; test.c	ConvertTime(minutes, m);
000c7c   ce33     movff	0xe33, 0           	MOVFF	_minutes, r0x00
000c7e   f000
000c80   ce34     movff	0xe34, 0x1         	MOVFF	(_minutes + 1), r0x01
000c82   f001
000c84   0e0e     movlw	0xe                	MOVLW	HIGH(_m)
000c86   6e03     movwf	0x3, 0             	MOVWF	r0x03
000c88   0e20     movlw	0x20               	MOVLW	LOW(_m)
000c8a   6e02     movwf	0x2, 0             	MOVWF	r0x02
000c8c   0e80     movlw	0x80               	MOVLW	0x80
000c8e   6e04     movwf	0x4, 0             	MOVWF	r0x04
000c90   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c94   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000c96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c98   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000c9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c9c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ca0   5000     movf	0, 0, 0             	MOVF	r0x00, W
000ca2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ca4   ec03     call	0x2606, 0           	CALL	_ConvertTime
000ca6   f013
000ca8   0e05     movlw	0x5                	MOVLW	0x05
000caa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	228; test.c	ConvertTime(seconds, s);
000cac   ce35     movff	0xe35, 0           	MOVFF	_seconds, r0x00
000cae   f000
000cb0   ce36     movff	0xe36, 0x1         	MOVFF	(_seconds + 1), r0x01
000cb2   f001
000cb4   0e0e     movlw	0xe                	MOVLW	HIGH(_s)
000cb6   6e03     movwf	0x3, 0             	MOVWF	r0x03
000cb8   0e23     movlw	0x23               	MOVLW	LOW(_s)
000cba   6e02     movwf	0x2, 0             	MOVWF	r0x02
000cbc   0e80     movlw	0x80               	MOVLW	0x80
000cbe   6e04     movwf	0x4, 0             	MOVWF	r0x04
000cc0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000cc2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cc4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000cc6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cc8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000cca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ccc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000cce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cd0   5000     movf	0, 0, 0             	MOVF	r0x00, W
000cd2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cd4   ec03     call	0x2606, 0           	CALL	_ConvertTime
000cd6   f013
000cd8   0e05     movlw	0x5                	MOVLW	0x05
000cda   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	229; test.c	sprintf(LCDPrint,"Set Hours       [%s]:%s:%s",h,m,s);
000cdc   0e0e     movlw	0xe                	MOVLW	HIGH(_s)
000cde   6e01     movwf	0x1, 0             	MOVWF	r0x01
000ce0   0e23     movlw	0x23               	MOVLW	LOW(_s)
000ce2   6e00     movwf	0, 0               	MOVWF	r0x00
000ce4   0e80     movlw	0x80               	MOVLW	0x80
000ce6   6e02     movwf	0x2, 0             	MOVWF	r0x02
000ce8   0e0e     movlw	0xe                	MOVLW	HIGH(_m)
000cea   6e04     movwf	0x4, 0             	MOVWF	r0x04
000cec   0e20     movlw	0x20               	MOVLW	LOW(_m)
000cee   6e03     movwf	0x3, 0             	MOVWF	r0x03
000cf0   0e80     movlw	0x80               	MOVLW	0x80
000cf2   6e05     movwf	0x5, 0             	MOVWF	r0x05
000cf4   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
000cf6   6e07     movwf	0x7, 0             	MOVWF	r0x07
000cf8   0e5d     movlw	0x5d               	MOVLW	LOW(_h)
000cfa   6e06     movwf	0x6, 0             	MOVWF	r0x06
000cfc   0e80     movlw	0x80               	MOVLW	0x80
000cfe   6e08     movwf	0x8, 0             	MOVWF	r0x08
000d00   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDPrint)
000d02   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
000d04   0e21     movlw	0x21               	MOVLW	LOW(_LCDPrint)
000d06   6e09     movwf	0x9, 0             	MOVWF	r0x09
000d08   0e80     movlw	0x80               	MOVLW	0x80
000d0a   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
000d0c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d10   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d14   5000     movf	0, 0, 0             	MOVF	r0x00, W
000d16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d18   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000d1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d1c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000d1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d20   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000d22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d24   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000d26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d28   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000d2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d2c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000d2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d30   0e00     movlw	0                  	MOVLW	UPPER(__str_5)
000d32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d34   0e1b     movlw	0x1b               	MOVLW	HIGH(__str_5)
000d36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d38   0ea0     movlw	0xa0               	MOVLW	LOW(__str_5)
000d3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d3c   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
000d3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d40   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000d42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d44   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000d46   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d48   ec5a     call	0x22b4, 0           	CALL	_sprintf
000d4a   f011
000d4c   0e0f     movlw	0xf                	MOVLW	0x0f
000d4e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	230; test.c	break;
000d50   d157     bra	0x1000               	BRA	_00199_DS_
                                           _00195_DS_:
                                           ;	.line	232; test.c	sprintf(LCDPrint, "      MENU      Set Alarmclock?");
000d52   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDPrint)
000d54   6e01     movwf	0x1, 0             	MOVWF	r0x01
000d56   0e21     movlw	0x21               	MOVLW	LOW(_LCDPrint)
000d58   6e00     movwf	0, 0               	MOVWF	r0x00
000d5a   0e80     movlw	0x80               	MOVLW	0x80
000d5c   6e02     movwf	0x2, 0             	MOVWF	r0x02
000d5e   0e00     movlw	0                  	MOVLW	UPPER(__str_6)
000d60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d62   0e1b     movlw	0x1b               	MOVLW	HIGH(__str_6)
000d64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d66   0ebc     movlw	0xbc               	MOVLW	LOW(__str_6)
000d68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d6a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d6c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d6e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d72   5000     movf	0, 0, 0             	MOVF	r0x00, W
000d74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d76   ec5a     call	0x22b4, 0           	CALL	_sprintf
000d78   f011
000d7a   0e06     movlw	0x6                	MOVLW	0x06
000d7c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	233; test.c	break;
000d7e   d140     bra	0x1000               	BRA	_00199_DS_
                                           _00196_DS_:
                                           ;	.line	235; test.c	ConvertTime(alarmHours, h);
000d80   ce37     movff	0xe37, 0           	MOVFF	_alarmHours, r0x00
000d82   f000
000d84   ce38     movff	0xe38, 0x1         	MOVFF	(_alarmHours + 1), r0x01
000d86   f001
000d88   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
000d8a   6e03     movwf	0x3, 0             	MOVWF	r0x03
000d8c   0e5d     movlw	0x5d               	MOVLW	LOW(_h)
000d8e   6e02     movwf	0x2, 0             	MOVWF	r0x02
000d90   0e80     movlw	0x80               	MOVLW	0x80
000d92   6e04     movwf	0x4, 0             	MOVWF	r0x04
000d94   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000d96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d98   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000d9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d9c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000da0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000da2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000da4   5000     movf	0, 0, 0             	MOVF	r0x00, W
000da6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000da8   ec03     call	0x2606, 0           	CALL	_ConvertTime
000daa   f013
000dac   0e05     movlw	0x5                	MOVLW	0x05
000dae   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	236; test.c	ConvertTime(alarmMinutes, m);
000db0   ce39     movff	0xe39, 0           	MOVFF	_alarmMinutes, r0x00
000db2   f000
000db4   ce3a     movff	0xe3a, 0x1         	MOVFF	(_alarmMinutes + 1), r0x01
000db6   f001
000db8   0e0e     movlw	0xe                	MOVLW	HIGH(_m)
000dba   6e03     movwf	0x3, 0             	MOVWF	r0x03
000dbc   0e20     movlw	0x20               	MOVLW	LOW(_m)
000dbe   6e02     movwf	0x2, 0             	MOVWF	r0x02
000dc0   0e80     movlw	0x80               	MOVLW	0x80
000dc2   6e04     movwf	0x4, 0             	MOVWF	r0x04
000dc4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000dc6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dc8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000dca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dcc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000dce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dd0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000dd2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dd4   5000     movf	0, 0, 0             	MOVF	r0x00, W
000dd6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dd8   ec03     call	0x2606, 0           	CALL	_ConvertTime
000dda   f013
000ddc   0e05     movlw	0x5                	MOVLW	0x05
000dde   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	237; test.c	sprintf(LCDPrint,"Set Alarm Min    %s:[%s]",h,m);
000de0   0e0e     movlw	0xe                	MOVLW	HIGH(_m)
000de2   6e01     movwf	0x1, 0             	MOVWF	r0x01
000de4   0e20     movlw	0x20               	MOVLW	LOW(_m)
000de6   6e00     movwf	0, 0               	MOVWF	r0x00
000de8   0e80     movlw	0x80               	MOVLW	0x80
000dea   6e02     movwf	0x2, 0             	MOVWF	r0x02
000dec   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
000dee   6e04     movwf	0x4, 0             	MOVWF	r0x04
000df0   0e5d     movlw	0x5d               	MOVLW	LOW(_h)
000df2   6e03     movwf	0x3, 0             	MOVWF	r0x03
000df4   0e80     movlw	0x80               	MOVLW	0x80
000df6   6e05     movwf	0x5, 0             	MOVWF	r0x05
000df8   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDPrint)
000dfa   6e07     movwf	0x7, 0             	MOVWF	r0x07
000dfc   0e21     movlw	0x21               	MOVLW	LOW(_LCDPrint)
000dfe   6e06     movwf	0x6, 0             	MOVWF	r0x06
000e00   0e80     movlw	0x80               	MOVLW	0x80
000e02   6e08     movwf	0x8, 0             	MOVWF	r0x08
000e04   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000e06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e08   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000e0a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e0c   5000     movf	0, 0, 0             	MOVF	r0x00, W
000e0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e10   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000e12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e14   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000e16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e18   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000e1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e1c   0e00     movlw	0                  	MOVLW	UPPER(__str_7)
000e1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e20   0e1b     movlw	0x1b               	MOVLW	HIGH(__str_7)
000e22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e24   0edc     movlw	0xdc               	MOVLW	LOW(__str_7)
000e26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e28   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000e2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e2c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000e2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e30   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000e32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e34   ec5a     call	0x22b4, 0           	CALL	_sprintf
000e36   f011
000e38   0e0c     movlw	0xc                	MOVLW	0x0c
000e3a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	238; test.c	break;
000e3c   d0e1     bra	0x1000               	BRA	_00199_DS_
                                           _00197_DS_:
                                           ;	.line	240; test.c	ConvertTime(alarmHours, h);
000e3e   ce37     movff	0xe37, 0           	MOVFF	_alarmHours, r0x00
000e40   f000
000e42   ce38     movff	0xe38, 0x1         	MOVFF	(_alarmHours + 1), r0x01
000e44   f001
000e46   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
000e48   6e03     movwf	0x3, 0             	MOVWF	r0x03
000e4a   0e5d     movlw	0x5d               	MOVLW	LOW(_h)
000e4c   6e02     movwf	0x2, 0             	MOVWF	r0x02
000e4e   0e80     movlw	0x80               	MOVLW	0x80
000e50   6e04     movwf	0x4, 0             	MOVWF	r0x04
000e52   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000e54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e56   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000e58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e5a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000e5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e5e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000e60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e62   5000     movf	0, 0, 0             	MOVF	r0x00, W
000e64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e66   ec03     call	0x2606, 0           	CALL	_ConvertTime
000e68   f013
000e6a   0e05     movlw	0x5                	MOVLW	0x05
000e6c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	241; test.c	ConvertTime(alarmMinutes, m);
000e6e   ce39     movff	0xe39, 0           	MOVFF	_alarmMinutes, r0x00
000e70   f000
000e72   ce3a     movff	0xe3a, 0x1         	MOVFF	(_alarmMinutes + 1), r0x01
000e74   f001
000e76   0e0e     movlw	0xe                	MOVLW	HIGH(_m)
000e78   6e03     movwf	0x3, 0             	MOVWF	r0x03
000e7a   0e20     movlw	0x20               	MOVLW	LOW(_m)
000e7c   6e02     movwf	0x2, 0             	MOVWF	r0x02
000e7e   0e80     movlw	0x80               	MOVLW	0x80
000e80   6e04     movwf	0x4, 0             	MOVWF	r0x04
000e82   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000e84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e86   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000e88   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e8a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000e8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e8e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000e90   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e92   5000     movf	0, 0, 0             	MOVF	r0x00, W
000e94   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e96   ec03     call	0x2606, 0           	CALL	_ConvertTime
000e98   f013
000e9a   0e05     movlw	0x5                	MOVLW	0x05
000e9c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	242; test.c	sprintf(LCDPrint,"Set Alarm Hours  [%s]:%s",h,m);
000e9e   0e0e     movlw	0xe                	MOVLW	HIGH(_m)
000ea0   6e01     movwf	0x1, 0             	MOVWF	r0x01
000ea2   0e20     movlw	0x20               	MOVLW	LOW(_m)
000ea4   6e00     movwf	0, 0               	MOVWF	r0x00
000ea6   0e80     movlw	0x80               	MOVLW	0x80
000ea8   6e02     movwf	0x2, 0             	MOVWF	r0x02
000eaa   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
000eac   6e04     movwf	0x4, 0             	MOVWF	r0x04
000eae   0e5d     movlw	0x5d               	MOVLW	LOW(_h)
000eb0   6e03     movwf	0x3, 0             	MOVWF	r0x03
000eb2   0e80     movlw	0x80               	MOVLW	0x80
000eb4   6e05     movwf	0x5, 0             	MOVWF	r0x05
000eb6   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDPrint)
000eb8   6e07     movwf	0x7, 0             	MOVWF	r0x07
000eba   0e21     movlw	0x21               	MOVLW	LOW(_LCDPrint)
000ebc   6e06     movwf	0x6, 0             	MOVWF	r0x06
000ebe   0e80     movlw	0x80               	MOVLW	0x80
000ec0   6e08     movwf	0x8, 0             	MOVWF	r0x08
000ec2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000ec4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ec6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000ec8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000eca   5000     movf	0, 0, 0             	MOVF	r0x00, W
000ecc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ece   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000ed0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ed2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000ed4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ed6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000ed8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000eda   0e00     movlw	0                  	MOVLW	UPPER(__str_8)
000edc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ede   0e1b     movlw	0x1b               	MOVLW	HIGH(__str_8)
000ee0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ee2   0ef6     movlw	0xf6               	MOVLW	LOW(__str_8)
000ee4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ee6   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000ee8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000eea   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000eec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000eee   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000ef0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ef2   ec5a     call	0x22b4, 0           	CALL	_sprintf
000ef4   f011
000ef6   0e0c     movlw	0xc                	MOVLW	0x0c
000ef8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	243; test.c	break;
000efa   d082     bra	0x1000               	BRA	_00199_DS_
                                           _00198_DS_:
                                           ;	.line	245; test.c	ConvertTime(hours, h);
000efc   ce31     movff	0xe31, 0           	MOVFF	_hours, r0x00
000efe   f000
000f00   ce32     movff	0xe32, 0x1         	MOVFF	(_hours + 1), r0x01
000f02   f001
000f04   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
000f06   6e03     movwf	0x3, 0             	MOVWF	r0x03
000f08   0e5d     movlw	0x5d               	MOVLW	LOW(_h)
000f0a   6e02     movwf	0x2, 0             	MOVWF	r0x02
000f0c   0e80     movlw	0x80               	MOVLW	0x80
000f0e   6e04     movwf	0x4, 0             	MOVWF	r0x04
000f10   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000f12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f14   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000f16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f18   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000f1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f1c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000f1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f20   5000     movf	0, 0, 0             	MOVF	r0x00, W
000f22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f24   ec03     call	0x2606, 0           	CALL	_ConvertTime
000f26   f013
000f28   0e05     movlw	0x5                	MOVLW	0x05
000f2a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	246; test.c	ConvertTime(minutes, m);
000f2c   ce33     movff	0xe33, 0           	MOVFF	_minutes, r0x00
000f2e   f000
000f30   ce34     movff	0xe34, 0x1         	MOVFF	(_minutes + 1), r0x01
000f32   f001
000f34   0e0e     movlw	0xe                	MOVLW	HIGH(_m)
000f36   6e03     movwf	0x3, 0             	MOVWF	r0x03
000f38   0e20     movlw	0x20               	MOVLW	LOW(_m)
000f3a   6e02     movwf	0x2, 0             	MOVWF	r0x02
000f3c   0e80     movlw	0x80               	MOVLW	0x80
000f3e   6e04     movwf	0x4, 0             	MOVWF	r0x04
000f40   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000f42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f44   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000f46   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f48   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000f4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f4c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000f4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f50   5000     movf	0, 0, 0             	MOVF	r0x00, W
000f52   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f54   ec03     call	0x2606, 0           	CALL	_ConvertTime
000f56   f013
000f58   0e05     movlw	0x5                	MOVLW	0x05
000f5a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	247; test.c	ConvertTime(seconds, s);
000f5c   ce35     movff	0xe35, 0           	MOVFF	_seconds, r0x00
000f5e   f000
000f60   ce36     movff	0xe36, 0x1         	MOVFF	(_seconds + 1), r0x01
000f62   f001
000f64   0e0e     movlw	0xe                	MOVLW	HIGH(_s)
000f66   6e03     movwf	0x3, 0             	MOVWF	r0x03
000f68   0e23     movlw	0x23               	MOVLW	LOW(_s)
000f6a   6e02     movwf	0x2, 0             	MOVWF	r0x02
000f6c   0e80     movlw	0x80               	MOVLW	0x80
000f6e   6e04     movwf	0x4, 0             	MOVWF	r0x04
000f70   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000f72   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f74   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000f76   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f78   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000f7a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f7c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000f7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f80   5000     movf	0, 0, 0             	MOVF	r0x00, W
000f82   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f84   ec03     call	0x2606, 0           	CALL	_ConvertTime
000f86   f013
000f88   0e05     movlw	0x5                	MOVLW	0x05
000f8a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	248; test.c	sprintf(LCDPrint, "   It's Time !      %s:%s:%s",h,m,s);
000f8c   0e0e     movlw	0xe                	MOVLW	HIGH(_s)
000f8e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000f90   0e23     movlw	0x23               	MOVLW	LOW(_s)
000f92   6e00     movwf	0, 0               	MOVWF	r0x00
000f94   0e80     movlw	0x80               	MOVLW	0x80
000f96   6e02     movwf	0x2, 0             	MOVWF	r0x02
000f98   0e0e     movlw	0xe                	MOVLW	HIGH(_m)
000f9a   6e04     movwf	0x4, 0             	MOVWF	r0x04
000f9c   0e20     movlw	0x20               	MOVLW	LOW(_m)
000f9e   6e03     movwf	0x3, 0             	MOVWF	r0x03
000fa0   0e80     movlw	0x80               	MOVLW	0x80
000fa2   6e05     movwf	0x5, 0             	MOVWF	r0x05
000fa4   0e0f     movlw	0xf                	MOVLW	HIGH(_h)
000fa6   6e07     movwf	0x7, 0             	MOVWF	r0x07
000fa8   0e5d     movlw	0x5d               	MOVLW	LOW(_h)
000faa   6e06     movwf	0x6, 0             	MOVWF	r0x06
000fac   0e80     movlw	0x80               	MOVLW	0x80
000fae   6e08     movwf	0x8, 0             	MOVWF	r0x08
000fb0   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDPrint)
000fb2   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
000fb4   0e21     movlw	0x21               	MOVLW	LOW(_LCDPrint)
000fb6   6e09     movwf	0x9, 0             	MOVWF	r0x09
000fb8   0e80     movlw	0x80               	MOVLW	0x80
000fba   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
000fbc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000fbe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fc0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000fc2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fc4   5000     movf	0, 0, 0             	MOVF	r0x00, W
000fc6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fc8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000fca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fcc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000fce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fd0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000fd2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fd4   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000fd6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fd8   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000fda   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fdc   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000fde   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fe0   0e00     movlw	0                  	MOVLW	UPPER(__str_9)
000fe2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fe4   0e1c     movlw	0x1c               	MOVLW	HIGH(__str_9)
000fe6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fe8   0e10     movlw	0x10               	MOVLW	LOW(__str_9)
000fea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fec   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
000fee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ff0   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000ff2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ff4   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000ff6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ff8   ec5a     call	0x22b4, 0           	CALL	_sprintf
000ffa   f011
000ffc   0e0f     movlw	0xf                	MOVLW	0x0f
000ffe   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00199_DS_:
                                           ;	.line	251; test.c	DisplayString(0, LCDPrint);
001000   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDPrint)
001002   6e01     movwf	0x1, 0             	MOVWF	r0x01
001004   0e21     movlw	0x21               	MOVLW	LOW(_LCDPrint)
001006   6e00     movwf	0, 0               	MOVWF	r0x00
001008   0e80     movlw	0x80               	MOVLW	0x80
00100a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00100c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00100e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001010   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001012   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001014   5000     movf	0, 0, 0             	MOVF	r0x00, W
001016   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001018   0e00     movlw	0                  	MOVLW	0x00
00101a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00101c   eccf     call	0x239e, 0           	CALL	_DisplayString
00101e   f011
001020   0e04     movlw	0x4                	MOVLW	0x04
001022   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001024   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
001026   f00e
001028   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
00102a   f00d
00102c   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
00102e   f00c
001030   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
001032   f00b
001034   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
001036   f00a
001038   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
00103a   f009
00103c   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00103e   f008
001040   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001042   f007
001044   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001046   f006
001048   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00104a   f005
00104c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00104e   f004
001050   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001052   f003
001054   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001056   f002
001058   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00105a   f001
00105c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00105e   f000
001060   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001062   ffd9
001064   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__IsItTime	code
                                           _IsItTime:
                                           ;	.line	190; test.c	void IsItTime(){
0020a8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0020aa   ffe5
0020ac   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0020ae   ffd9
0020b0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0020b2   ffe5
0020b4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0020b6   ffe5
0020b8   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0020ba   ffe5
0020bc   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0020be   ffe5
                                           ;	.line	191; test.c	if(alarmStatus & (hours == alarmHours) & (minutes == alarmMinutes) & stateMenu != SET_ALARMCLOCK_MINUTES & stateMenu != SET_ALARMCLOCK_HOURS & !alarmCheck){
0020c0   6a00     clrf	0, 0                	CLRF	r0x00
0020c2   010e     movlb	0xe                	BANKSEL	_hours
0020c4   5131     movf	0x31, 0, 0x1        	MOVF	_hours, W, B
0020c6   010e     movlb	0xe                	BANKSEL	_alarmHours
0020c8   1937     xorwf	0x37, 0, 0x1       	XORWF	_alarmHours, W, B
0020ca   e106     bnz	0x20d8               	BNZ	_00174_DS_
0020cc   010e     movlb	0xe                	BANKSEL	(_hours + 1)
0020ce   5132     movf	0x32, 0, 0x1        	MOVF	(_hours + 1), W, B
0020d0   010e     movlb	0xe                	BANKSEL	(_alarmHours + 1)
0020d2   1938     xorwf	0x38, 0, 0x1       	XORWF	(_alarmHours + 1), W, B
0020d4   e101     bnz	0x20d8               	BNZ	_00174_DS_
0020d6   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
                                           _00174_DS_:
0020d8   6a01     clrf	0x1, 0              	CLRF	r0x01
0020da   be00     btfsc	0, 0x7, 0          	BTFSC	r0x00, 7
0020dc   6801     setf	0x1, 0              	SETF	r0x01
0020de   010e     movlb	0xe                	BANKSEL	_alarmStatus
0020e0   513b     movf	0x3b, 0, 0x1        	MOVF	_alarmStatus, W, B
0020e2   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
0020e4   010e     movlb	0xe                	BANKSEL	(_alarmStatus + 1)
0020e6   513c     movf	0x3c, 0, 0x1        	MOVF	(_alarmStatus + 1), W, B
0020e8   1601     andwf	0x1, 0x1, 0        	ANDWF	r0x01, F
0020ea   6a02     clrf	0x2, 0              	CLRF	r0x02
0020ec   010e     movlb	0xe                	BANKSEL	_minutes
0020ee   5133     movf	0x33, 0, 0x1        	MOVF	_minutes, W, B
0020f0   010e     movlb	0xe                	BANKSEL	_alarmMinutes
0020f2   1939     xorwf	0x39, 0, 0x1       	XORWF	_alarmMinutes, W, B
0020f4   e106     bnz	0x2102               	BNZ	_00177_DS_
0020f6   010e     movlb	0xe                	BANKSEL	(_minutes + 1)
0020f8   5134     movf	0x34, 0, 0x1        	MOVF	(_minutes + 1), W, B
0020fa   010e     movlb	0xe                	BANKSEL	(_alarmMinutes + 1)
0020fc   193a     xorwf	0x3a, 0, 0x1       	XORWF	(_alarmMinutes + 1), W, B
0020fe   e101     bnz	0x2102               	BNZ	_00177_DS_
002100   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
                                           _00177_DS_:
002102   6a03     clrf	0x3, 0              	CLRF	r0x03
002104   be02     btfsc	0x2, 0x7, 0        	BTFSC	r0x02, 7
002106   6803     setf	0x3, 0              	SETF	r0x03
002108   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00210a   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
00210c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00210e   1601     andwf	0x1, 0x1, 0        	ANDWF	r0x01, F
002110   6a02     clrf	0x2, 0              	CLRF	r0x02
002112   010e     movlb	0xe                	BANKSEL	_stateMenu
002114   512f     movf	0x2f, 0, 0x1        	MOVF	_stateMenu, W, B
002116   0a05     xorlw	0x5                	XORLW	0x05
002118   e104     bnz	0x2122               	BNZ	_00180_DS_
00211a   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
00211c   5130     movf	0x30, 0, 0x1        	MOVF	(_stateMenu + 1), W, B
00211e   e101     bnz	0x2122               	BNZ	_00180_DS_
002120   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
                                           _00180_DS_:
002122   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002124   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
002126   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
002128   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
00212a   6a02     clrf	0x2, 0              	CLRF	r0x02
00212c   3602     rlcf	0x2, 0x1, 0         	RLCF	r0x02, F
00212e   6a03     clrf	0x3, 0              	CLRF	r0x03
002130   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002132   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
002134   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002136   1601     andwf	0x1, 0x1, 0        	ANDWF	r0x01, F
002138   6a02     clrf	0x2, 0              	CLRF	r0x02
00213a   010e     movlb	0xe                	BANKSEL	_stateMenu
00213c   512f     movf	0x2f, 0, 0x1        	MOVF	_stateMenu, W, B
00213e   0a06     xorlw	0x6                	XORLW	0x06
002140   e104     bnz	0x214a               	BNZ	_00183_DS_
002142   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
002144   5130     movf	0x30, 0, 0x1        	MOVF	(_stateMenu + 1), W, B
002146   e101     bnz	0x214a               	BNZ	_00183_DS_
002148   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
                                           _00183_DS_:
00214a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00214c   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
00214e   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
002150   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
002152   6a02     clrf	0x2, 0              	CLRF	r0x02
002154   3602     rlcf	0x2, 0x1, 0         	RLCF	r0x02, F
002156   6a03     clrf	0x3, 0              	CLRF	r0x03
002158   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00215a   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
00215c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00215e   1601     andwf	0x1, 0x1, 0        	ANDWF	r0x01, F
002160   010e     movlb	0xe                	BANKSEL	_alarmCheck
002162   513d     movf	0x3d, 0, 0x1        	MOVF	_alarmCheck, W, B
002164   010e     movlb	0xe                	BANKSEL	(_alarmCheck + 1)
002166   113e     iorwf	0x3e, 0, 0x1       	IORWF	(_alarmCheck + 1), W, B
002168   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
00216a   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
00216c   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
00216e   6a02     clrf	0x2, 0              	CLRF	r0x02
002170   3602     rlcf	0x2, 0x1, 0         	RLCF	r0x02, F
002172   6a03     clrf	0x3, 0              	CLRF	r0x03
002174   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002176   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
002178   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00217a   1601     andwf	0x1, 0x1, 0        	ANDWF	r0x01, F
00217c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00217e   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
002180   e00f     bz	0x21a0                	BZ	_00170_DS_
                                           ;	.line	192; test.c	stateMenu = RINGING;
002182   0e07     movlw	0x7                	MOVLW	0x07
002184   010e     movlb	0xe                	BANKSEL	_stateMenu
002186   6f2f     movwf	0x2f, 0x1          	MOVWF	_stateMenu, B
002188   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
00218a   6b30     clrf	0x30, 0x1           	CLRF	(_stateMenu + 1), B
                                           ;	.line	193; test.c	alarmDelay = 30;
00218c   0e1e     movlw	0x1e               	MOVLW	0x1e
00218e   010e     movlb	0xe                	BANKSEL	_alarmDelay
002190   6f41     movwf	0x41, 0x1          	MOVWF	_alarmDelay, B
002192   010e     movlb	0xe                	BANKSEL	(_alarmDelay + 1)
002194   6b42     clrf	0x42, 0x1           	CLRF	(_alarmDelay + 1), B
                                           ;	.line	194; test.c	alarmCheck = 1;
002196   0e01     movlw	0x1                	MOVLW	0x01
002198   010e     movlb	0xe                	BANKSEL	_alarmCheck
00219a   6f3d     movwf	0x3d, 0x1          	MOVWF	_alarmCheck, B
00219c   010e     movlb	0xe                	BANKSEL	(_alarmCheck + 1)
00219e   6b3e     clrf	0x3e, 0x1           	CLRF	(_alarmCheck + 1), B
                                           _00170_DS_:
0021a0   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0021a2   f003
0021a4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0021a6   f002
0021a8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0021aa   f001
0021ac   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0021ae   f000
0021b0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0021b2   ffd9
0021b4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__UpdateTime	code
                                           _UpdateTime:
                                           ;	.line	152; test.c	void UpdateTime(){
001f94   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001f96   ffe5
001f98   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001f9a   ffd9
                                           ;	.line	153; test.c	if(milliSec>=1000){
001f9c   0e03     movlw	0x3                	MOVLW	0x03
001f9e   010e     movlb	0xe                	BANKSEL	(_milliSec + 1)
001fa0   5d40     subwf	0x40, 0, 0x1       	SUBWF	(_milliSec + 1), W, B
001fa2   e103     bnz	0x1faa               	BNZ	_00154_DS_
001fa4   0ee8     movlw	0xe8               	MOVLW	0xe8
001fa6   010e     movlb	0xe                	BANKSEL	_milliSec
001fa8   5d3f     subwf	0x3f, 0, 0x1       	SUBWF	_milliSec, W, B
                                           _00154_DS_:
001faa   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
001fac   d030     bra	0x200e               	BRA	_00133_DS_
                                           ;	.line	154; test.c	milliSec -= 1000;
001fae   0e18     movlw	0x18               	MOVLW	0x18
001fb0   010e     movlb	0xe                	BANKSEL	_milliSec
001fb2   273f     addwf	0x3f, 0x1, 0x1     	ADDWF	_milliSec, F, B
001fb4   0efc     movlw	0xfc               	MOVLW	0xfc
001fb6   010e     movlb	0xe                	BANKSEL	(_milliSec + 1)
001fb8   2340     addwfc	0x40, 0x1, 0x1    	ADDWFC	(_milliSec + 1), F, B
001fba   010e     movlb	0xe                	BANKSEL	_seconds
                                           ;	.line	155; test.c	seconds++;
001fbc   2b35     incf	0x35, 0x1, 0x1      	INCF	_seconds, F, B
001fbe   e302     bnc	0x1fc4               	BNC	_60304_DS_
001fc0   010e     movlb	0xe                	BANKSEL	(_seconds + 1)
001fc2   2b36     incf	0x36, 0x1, 0x1      	INCF	(_seconds + 1), F, B
                                           _60304_DS_:
001fc4   010e     movlb	0xe                	BANKSEL	_stateMenu
                                           ;	.line	156; test.c	if(stateMenu == RINGING){ 
001fc6   512f     movf	0x2f, 0, 0x1        	MOVF	_stateMenu, W, B
001fc8   0a07     xorlw	0x7                	XORLW	0x07
001fca   e103     bnz	0x1fd2               	BNZ	_00155_DS_
001fcc   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
001fce   5130     movf	0x30, 0, 0x1        	MOVF	(_stateMenu + 1), W, B
001fd0   e001     bz	0x1fd4                	BZ	_00156_DS_
                                           _00155_DS_:
001fd2   d008     bra	0x1fe4               	BRA	_00129_DS_
                                           _00156_DS_:
                                           ;	.line	157; test.c	SwitchLedState();
001fd4   ecdc     call	0x29b8, 0           	CALL	_SwitchLedState
001fd6   f014
                                           ;	.line	158; test.c	alarmDelay--;
001fd8   0eff     movlw	0xff               	MOVLW	0xff
001fda   010e     movlb	0xe                	BANKSEL	_alarmDelay
001fdc   2741     addwf	0x41, 0x1, 0x1     	ADDWF	_alarmDelay, F, B
001fde   e202     bc	0x1fe4                	BC	_70305_DS_
001fe0   010e     movlb	0xe                	BANKSEL	(_alarmDelay + 1)
001fe2   0742     decf	0x42, 0x1, 0x1      	DECF	(_alarmDelay + 1), F, B
                                           _70305_DS_:
                                           _00129_DS_:
001fe4   010e     movlb	0xe                	BANKSEL	_alarmDelay
                                           ;	.line	160; test.c	if(alarmDelay == 0){
001fe6   5141     movf	0x41, 0, 0x1        	MOVF	_alarmDelay, W, B
001fe8   010e     movlb	0xe                	BANKSEL	(_alarmDelay + 1)
001fea   1142     iorwf	0x42, 0, 0x1       	IORWF	(_alarmDelay + 1), W, B
001fec   e110     bnz	0x200e               	BNZ	_00133_DS_
                                           ;	.line	161; test.c	alarmDelay = 30;
001fee   0e1e     movlw	0x1e               	MOVLW	0x1e
001ff0   010e     movlb	0xe                	BANKSEL	_alarmDelay
001ff2   6f41     movwf	0x41, 0x1          	MOVWF	_alarmDelay, B
001ff4   010e     movlb	0xe                	BANKSEL	(_alarmDelay + 1)
001ff6   6b42     clrf	0x42, 0x1           	CLRF	(_alarmDelay + 1), B
001ff8   010e     movlb	0xe                	BANKSEL	_stateMenu
                                           ;	.line	162; test.c	stateMenu = STANDARD_STATE;
001ffa   6b2f     clrf	0x2f, 0x1           	CLRF	_stateMenu, B
001ffc   010e     movlb	0xe                	BANKSEL	(_stateMenu + 1)
001ffe   6b30     clrf	0x30, 0x1           	CLRF	(_stateMenu + 1), B
002000   010e     movlb	0xe                	BANKSEL	_alarmStatus
                                           ;	.line	163; test.c	alarmStatus = 0;
002002   6b3b     clrf	0x3b, 0x1           	CLRF	_alarmStatus, B
002004   010e     movlb	0xe                	BANKSEL	(_alarmStatus + 1)
002006   6b3c     clrf	0x3c, 0x1           	CLRF	(_alarmStatus + 1), B
                                           ;	.line	164; test.c	LED0_IO = 0;
002008   9091     bcf	0x91, 0, 0           	BCF	_LATJbits, 0
                                           ;	.line	165; test.c	LED1_IO = 0;
00200a   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	166; test.c	LED2_IO = 0;
00200c   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
                                           _00133_DS_:
                                           ;	.line	169; test.c	if(seconds>=60)
00200e   0e00     movlw	0                  	MOVLW	0x00
002010   010e     movlb	0xe                	BANKSEL	(_seconds + 1)
002012   5d36     subwf	0x36, 0, 0x1       	SUBWF	(_seconds + 1), W, B
002014   e103     bnz	0x201c               	BNZ	_00157_DS_
002016   0e3c     movlw	0x3c               	MOVLW	0x3c
002018   010e     movlb	0xe                	BANKSEL	_seconds
00201a   5d35     subwf	0x35, 0, 0x1       	SUBWF	_seconds, W, B
                                           _00157_DS_:
00201c   e309     bnc	0x2030               	BNC	_00135_DS_
00201e   010e     movlb	0xe                	BANKSEL	_seconds
                                           ;	.line	171; test.c	seconds = 0;
002020   6b35     clrf	0x35, 0x1           	CLRF	_seconds, B
002022   010e     movlb	0xe                	BANKSEL	(_seconds + 1)
002024   6b36     clrf	0x36, 0x1           	CLRF	(_seconds + 1), B
002026   010e     movlb	0xe                	BANKSEL	_minutes
                                           ;	.line	172; test.c	minutes++;
002028   2b33     incf	0x33, 0x1, 0x1      	INCF	_minutes, F, B
00202a   e302     bnc	0x2030               	BNC	_80306_DS_
00202c   010e     movlb	0xe                	BANKSEL	(_minutes + 1)
00202e   2b34     incf	0x34, 0x1, 0x1      	INCF	(_minutes + 1), F, B
                                           _80306_DS_:
                                           _00135_DS_:
002030   010e     movlb	0xe                	BANKSEL	_minutes
                                           ;	.line	174; test.c	if(minutes == 60){
002032   5133     movf	0x33, 0, 0x1        	MOVF	_minutes, W, B
002034   0a3c     xorlw	0x3c               	XORLW	0x3c
002036   e103     bnz	0x203e               	BNZ	_00158_DS_
002038   010e     movlb	0xe                	BANKSEL	(_minutes + 1)
00203a   5134     movf	0x34, 0, 0x1        	MOVF	(_minutes + 1), W, B
00203c   e001     bz	0x2040                	BZ	_00159_DS_
                                           _00158_DS_:
00203e   d009     bra	0x2052               	BRA	_00137_DS_
                                           _00159_DS_:
002040   010e     movlb	0xe                	BANKSEL	_minutes
                                           ;	.line	175; test.c	minutes = 0;
002042   6b33     clrf	0x33, 0x1           	CLRF	_minutes, B
002044   010e     movlb	0xe                	BANKSEL	(_minutes + 1)
002046   6b34     clrf	0x34, 0x1           	CLRF	(_minutes + 1), B
002048   010e     movlb	0xe                	BANKSEL	_hours
                                           ;	.line	176; test.c	hours++;
00204a   2b31     incf	0x31, 0x1, 0x1      	INCF	_hours, F, B
00204c   e302     bnc	0x2052               	BNC	_90307_DS_
00204e   010e     movlb	0xe                	BANKSEL	(_hours + 1)
002050   2b32     incf	0x32, 0x1, 0x1      	INCF	(_hours + 1), F, B
                                           _90307_DS_:
                                           _00137_DS_:
                                           ;	.line	178; test.c	if(hours > 23){
002052   0e00     movlw	0                  	MOVLW	0x00
002054   010e     movlb	0xe                	BANKSEL	(_hours + 1)
002056   5d32     subwf	0x32, 0, 0x1       	SUBWF	(_hours + 1), W, B
002058   e103     bnz	0x2060               	BNZ	_00160_DS_
00205a   0e18     movlw	0x18               	MOVLW	0x18
00205c   010e     movlb	0xe                	BANKSEL	_hours
00205e   5d31     subwf	0x31, 0, 0x1       	SUBWF	_hours, W, B
                                           _00160_DS_:
002060   e308     bnc	0x2072               	BNC	_00139_DS_
002062   010e     movlb	0xe                	BANKSEL	_hours
                                           ;	.line	179; test.c	hours = 0;
002064   6b31     clrf	0x31, 0x1           	CLRF	_hours, B
002066   010e     movlb	0xe                	BANKSEL	(_hours + 1)
002068   6b32     clrf	0x32, 0x1           	CLRF	(_hours + 1), B
00206a   010e     movlb	0xe                	BANKSEL	_alarmCheck
                                           ;	.line	180; test.c	alarmCheck = 0;
00206c   6b3d     clrf	0x3d, 0x1           	CLRF	_alarmCheck, B
00206e   010e     movlb	0xe                	BANKSEL	(_alarmCheck + 1)
002070   6b3e     clrf	0x3e, 0x1           	CLRF	(_alarmCheck + 1), B
                                           _00139_DS_:
002072   010e     movlb	0xe                	BANKSEL	_alarmMinutes
                                           ;	.line	182; test.c	if(alarmMinutes == 60){
002074   5139     movf	0x39, 0, 0x1        	MOVF	_alarmMinutes, W, B
002076   0a3c     xorlw	0x3c               	XORLW	0x3c
002078   e103     bnz	0x2080               	BNZ	_00161_DS_
00207a   010e     movlb	0xe                	BANKSEL	(_alarmMinutes + 1)
00207c   513a     movf	0x3a, 0, 0x1        	MOVF	(_alarmMinutes + 1), W, B
00207e   e001     bz	0x2082                	BZ	_00162_DS_
                                           _00161_DS_:
002080   d004     bra	0x208a               	BRA	_00141_DS_
                                           _00162_DS_:
002082   010e     movlb	0xe                	BANKSEL	_alarmMinutes
                                           ;	.line	183; test.c	alarmMinutes = 0;
002084   6b39     clrf	0x39, 0x1           	CLRF	_alarmMinutes, B
002086   010e     movlb	0xe                	BANKSEL	(_alarmMinutes + 1)
002088   6b3a     clrf	0x3a, 0x1           	CLRF	(_alarmMinutes + 1), B
                                           _00141_DS_:
                                           ;	.line	185; test.c	if(alarmHours>23){
00208a   0e00     movlw	0                  	MOVLW	0x00
00208c   010e     movlb	0xe                	BANKSEL	(_alarmHours + 1)
00208e   5d38     subwf	0x38, 0, 0x1       	SUBWF	(_alarmHours + 1), W, B
002090   e103     bnz	0x2098               	BNZ	_00163_DS_
002092   0e18     movlw	0x18               	MOVLW	0x18
002094   010e     movlb	0xe                	BANKSEL	_alarmHours
002096   5d37     subwf	0x37, 0, 0x1       	SUBWF	_alarmHours, W, B
                                           _00163_DS_:
002098   e304     bnc	0x20a2               	BNC	_00144_DS_
00209a   010e     movlb	0xe                	BANKSEL	_alarmHours
                                           ;	.line	186; test.c	alarmHours = 0;	
00209c   6b37     clrf	0x37, 0x1           	CLRF	_alarmHours, B
00209e   010e     movlb	0xe                	BANKSEL	(_alarmHours + 1)
0020a0   6b38     clrf	0x38, 0x1           	CLRF	(_alarmHours + 1), B
                                           _00144_DS_:
0020a2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0020a4   ffd9
0020a6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__ConfigLed	code
                                           _ConfigLed:
                                           ;	.line	138; test.c	void ConfigLed(){
002b30   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002b32   ffe5
002b34   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002b36   ffd9
                                           ;	.line	140; test.c	LED0_TRIS = 0;
002b38   909a     bcf	0x9a, 0, 0           	BCF	_TRISJbits, 0
                                           ;	.line	141; test.c	LED1_TRIS = 0;
002b3a   929a     bcf	0x9a, 0x1, 0         	BCF	_TRISJbits, 1
                                           ;	.line	142; test.c	LED2_TRIS = 0;
002b3c   949a     bcf	0x9a, 0x2, 0         	BCF	_TRISJbits, 2
                                           ;	.line	144; test.c	LED0_IO = 0;
002b3e   9091     bcf	0x91, 0, 0           	BCF	_LATJbits, 0
                                           ;	.line	145; test.c	LED1_IO = 0;
002b40   9291     bcf	0x91, 0x1, 0         	BCF	_LATJbits, 1
                                           ;	.line	146; test.c	LED2_IO = 0;
002b42   9491     bcf	0x91, 0x2, 0         	BCF	_LATJbits, 2
002b44   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002b46   ffd9
002b48   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__ConfigButtons	code
                                           _ConfigButtons:
                                           ;	.line	126; test.c	void ConfigButtons(){
002af6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002af8   ffe5
002afa   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002afc   ffd9
                                           ;	.line	127; test.c	INTCON3bits.INT1IP = 0; // Low priority interrupt for up butt
002afe   9cf0     bcf	0xf0, 0x6, 0         	BCF	_INTCON3bits, 6
                                           ;	.line	128; test.c	INTCON2bits.INT3IP = 0; // Low priority interrupt for down butt
002b00   92f1     bcf	0xf1, 0x1, 0         	BCF	_INTCON2bits, 1
                                           ;	.line	129; test.c	INTCON2bits.INTEDG1 = 0; // Interrupt on falling edge
002b02   9af1     bcf	0xf1, 0x5, 0         	BCF	_INTCON2bits, 5
                                           ;	.line	130; test.c	INTCON2bits.INTEDG3 = 0; // Interrupt on falling edge
002b04   96f1     bcf	0xf1, 0x3, 0         	BCF	_INTCON2bits, 3
                                           ;	.line	131; test.c	INTCON3bits.INT3F = 0; // clear flag
002b06   94f0     bcf	0xf0, 0x2, 0         	BCF	_INTCON3bits, 2
                                           ;	.line	132; test.c	INTCON3bits.INT1F = 0; // clear flag	
002b08   90f0     bcf	0xf0, 0, 0           	BCF	_INTCON3bits, 0
                                           ;	.line	133; test.c	INTCON3bits.INT1E = 1; // Up button interrupt enable
002b0a   86f0     bsf	0xf0, 0x3, 0         	BSF	_INTCON3bits, 3
                                           ;	.line	134; test.c	INTCON3bits.INT3E = 1; // Down button interrupt enable
002b0c   8af0     bsf	0xf0, 0x5, 0         	BSF	_INTCON3bits, 5
002b0e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002b10   ffd9
002b12   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__ConfigTimer0	code
                                           _ConfigTimer0:
                                           ;	.line	100; test.c	void ConfigTimer0(void){
001b14   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001b16   ffe5
001b18   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001b1a   ffd9
                                           ;	.line	102; test.c	INTCON2bits.TMR0IP = 1; // Priorité Haute
001b1c   84f1     bsf	0xf1, 0x2, 0         	BSF	_INTCON2bits, 2
                                           ;	.line	103; test.c	INTCONbits.TMR0IE = 1;	// Activation interruption Timer 0
001b1e   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
                                           ;	.line	104; test.c	INTCONbits.TMR0IF = 0; // clear timer0 flag
001b20   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           ;	.line	108; test.c	T0CONbits.T08BIT = 0;		
001b22   9cd5     bcf	0xd5, 0x6, 0         	BCF	_T0CONbits, 6
                                           ;	.line	110; test.c	T0CONbits.T0CS = 0;	
001b24   9ad5     bcf	0xd5, 0x5, 0         	BCF	_T0CONbits, 5
                                           ;	.line	113; test.c	T0CONbits.PSA = 1;
001b26   86d5     bsf	0xd5, 0x3, 0         	BSF	_T0CONbits, 3
                                           ;	.line	115; test.c	TMR0H = 0xE7;
001b28   0ee7     movlw	0xe7               	MOVLW	0xe7
001b2a   6ed7     movwf	0xd7, 0            	MOVWF	_TMR0H
                                           ;	.line	116; test.c	TMR0L = 0x96;
001b2c   0e96     movlw	0x96               	MOVLW	0x96
001b2e   6ed6     movwf	0xd6, 0            	MOVWF	_TMR0L
                                           ;	.line	118; test.c	T0CONbits.TMR0ON = 1;
001b30   8ed5     bsf	0xd5, 0x7, 0         	BSF	_T0CONbits, 7
001b32   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001b34   ffd9
001b36   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
001b38   4e4f     dcfsnz	0x4f, 0x1, 0      	DB	0x4f, 0x4e, 0x20, 0x25, 0x73, 0x68, 0x25, 0x73, 0x00, 0x00
001b3a   2520     addwf	0x20, 0, 0x1       
001b3c   6873     setf	0x73, 0             
001b3e   7325     btg	0x25, 0x1, 0x1       
001b40   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_1:
001b42   464f     rlncf	0x4f, 0x1, 0       	DB	0x4f, 0x46, 0x46, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00
001b44   2046     addwfc	0x46, 0, 0        
001b46   2020     addwfc	0x20, 0, 0        
001b48   2020     addwfc	0x20, 0, 0        
001b4a   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_2:
001b4c   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x73, 0x3a, 0x25, 0x73, 0x3a, 0x25, 0x73
001b4e   2020     addwfc	0x20, 0, 0        
001b50   7325     btg	0x25, 0x1, 0x1       
001b52   253a     addwf	0x3a, 0, 0x1       
001b54   3a73     swapf	0x73, 0x1, 0       
001b56   7325     btg	0x25, 0x1, 0x1       
001b58   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x25, 0x73
001b5a   2020     addwfc	0x20, 0, 0        
001b5c   6c41     negf	0x41, 0             
001b5e   7261     btg	0x61, 0x1, 0         
001b60   206d     addwfc	0x6d, 0, 0        
001b62   7325     btg	0x25, 0x1, 0x1       
001b64   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_3:
001b66   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x4d, 0x45, 0x4e, 0x55, 0x20, 0x20
001b68   2020     addwfc	0x20, 0, 0        
001b6a   2020     addwfc	0x20, 0, 0        
001b6c   454d     rlncf	0x4d, 0, 0x1       
001b6e   554e     subfwb	0x4e, 0, 0x1      
001b70   2020     addwfc	0x20, 0, 0        
001b72   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x53, 0x65, 0x74, 0x20, 0x74, 0x69
001b74   2020     addwfc	0x20, 0, 0        
001b76   2020     addwfc	0x20, 0, 0        
001b78   6553     cpfsgt	0x53, 0x1         
001b7a   2074     addwfc	0x74, 0, 0        
001b7c   6974     setf	0x74, 0x1           
001b7e   656d     cpfsgt	0x6d, 0x1         	DB	0x6d, 0x65, 0x20, 0x3f, 0x00
001b80   3f20     incfsz	0x20, 0x1, 0x1    
001b82   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_4:
001b84   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x20, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x20
001b86   2074     addwfc	0x74, 0, 0        
001b88   694d     setf	0x4d, 0x1           
001b8a   756e     btg	0x6e, 0x2, 0x1       
001b8c   6574     cpfsgt	0x74, 0x1         
001b8e   2073     addwfc	0x73, 0, 0        
001b90   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x25, 0x73, 0x3a, 0x5b, 0x25, 0x73, 0x5d, 0x3a
001b92   2020     addwfc	0x20, 0, 0        
001b94   7325     btg	0x25, 0x1, 0x1       
001b96   5b3a     subwfb	0x3a, 0x1, 0x1    
001b98   7325     btg	0x25, 0x1, 0x1       
001b9a   3a5d     swapf	0x5d, 0x1, 0       
001b9c   7325     btg	0x25, 0x1, 0x1       	DB	0x25, 0x73, 0x00
001b9e   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_5:
001ba0   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x20, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x20, 0x20, 0x20
001ba2   2074     addwfc	0x74, 0, 0        
001ba4   6f48     movwf	0x48, 0x1          
001ba6   7275     btg	0x75, 0x1, 0         
001ba8   2073     addwfc	0x73, 0, 0        
001baa   2020     addwfc	0x20, 0, 0        
001bac   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x5b, 0x25, 0x73, 0x5d, 0x3a, 0x25, 0x73, 0x3a
001bae   2020     addwfc	0x20, 0, 0        
001bb0   255b     addwf	0x5b, 0, 0x1       
001bb2   5d73     subwf	0x73, 0, 0x1       
001bb4   253a     addwf	0x3a, 0, 0x1       
001bb6   3a73     swapf	0x73, 0x1, 0       
001bb8   7325     btg	0x25, 0x1, 0x1       	DB	0x25, 0x73, 0x00
001bba   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_6:
001bbc   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x4d, 0x45, 0x4e, 0x55, 0x20, 0x20
001bbe   2020     addwfc	0x20, 0, 0        
001bc0   2020     addwfc	0x20, 0, 0        
001bc2   454d     rlncf	0x4d, 0, 0x1       
001bc4   554e     subfwb	0x4e, 0, 0x1      
001bc6   2020     addwfc	0x20, 0, 0        
001bc8   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x53, 0x65, 0x74, 0x20, 0x41, 0x6c, 0x61, 0x72
001bca   2020     addwfc	0x20, 0, 0        
001bcc   6553     cpfsgt	0x53, 0x1         
001bce   2074     addwfc	0x74, 0, 0        
001bd0   6c41     negf	0x41, 0             
001bd2   7261     btg	0x61, 0x1, 0         
001bd4   636d     cpfseq	0x6d, 0x1         	DB	0x6d, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x3f, 0x00
001bd6   6f6c     movwf	0x6c, 0x1          
001bd8   6b63     clrf	0x63, 0x1           
001bda   003f     dw	0x3f  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_7:
001bdc   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x4d, 0x69
001bde   2074     addwfc	0x74, 0, 0        
001be0   6c41     negf	0x41, 0             
001be2   7261     btg	0x61, 0x1, 0         
001be4   206d     addwfc	0x6d, 0, 0        
001be6   694d     setf	0x4d, 0x1           
001be8   206e     addwfc	0x6e, 0, 0        	DB	0x6e, 0x20, 0x20, 0x20, 0x20, 0x25, 0x73, 0x3a, 0x5b, 0x25, 0x73, 0x5d
001bea   2020     addwfc	0x20, 0, 0        
001bec   2520     addwf	0x20, 0, 0x1       
001bee   3a73     swapf	0x73, 0x1, 0       
001bf0   255b     addwf	0x5b, 0, 0x1       
001bf2   5d73     subwf	0x73, 0, 0x1       
001bf4   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_8:
001bf6   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x48, 0x6f
001bf8   2074     addwfc	0x74, 0, 0        
001bfa   6c41     negf	0x41, 0             
001bfc   7261     btg	0x61, 0x1, 0         
001bfe   206d     addwfc	0x6d, 0, 0        
001c00   6f48     movwf	0x48, 0x1          
001c02   7275     btg	0x75, 0x1, 0         	DB	0x75, 0x72, 0x73, 0x20, 0x20, 0x5b, 0x25, 0x73, 0x5d, 0x3a, 0x25, 0x73
001c04   2073     addwfc	0x73, 0, 0        
001c06   5b20     subwfb	0x20, 0x1, 0x1    
001c08   7325     btg	0x25, 0x1, 0x1       
001c0a   3a5d     swapf	0x5d, 0x1, 0       
001c0c   7325     btg	0x25, 0x1, 0x1       
001c0e   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_9:
001c10   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x49, 0x74, 0x27, 0x73, 0x20, 0x54, 0x69, 0x6d, 0x65
001c12   4920     infsnz	0x20, 0, 0x1      
001c14   2774     addwf	0x74, 0x1, 0x1     
001c16   2073     addwfc	0x73, 0, 0        
001c18   6954     setf	0x54, 0x1           
001c1a   656d     cpfsgt	0x6d, 0x1         
001c1c   2120     addwfc	0x20, 0, 0x1      	DB	0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x73, 0x3a, 0x25
001c1e   2020     addwfc	0x20, 0, 0        
001c20   2020     addwfc	0x20, 0, 0        
001c22   2020     addwfc	0x20, 0, 0        
001c24   7325     btg	0x25, 0x1, 0x1       
001c26   253a     addwf	0x3a, 0, 0x1       
001c28   3a73     swapf	0x73, 0x1, 0       	DB	0x73, 0x3a, 0x25, 0x73, 0x00
001c2a   7325     btg	0x25, 0x1, 0x1       
001c2c   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_10:
001c2e   2530     addwf	0x30, 0, 0x1       	DB	0x30, 0x25, 0x75, 0x00, 0x00
001c30   0075     dw	0x75  ;unknown opcode 
001c32   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_11:
001c34   7525     btg	0x25, 0x2, 0x1       	DB	0x25, 0x75, 0x00, 0x00
001c36   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 4806 (0x12c6) bytes ( 3.67%)
                                           ;           	 2403 (0x0963) words
                                           ; udata size:	   82 (0x0052) bytes ( 2.14%)
                                           ; access size:	   22 (0x0016) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Mar 19 2013) (UNIX)
                                           ; This file was generated Wed Mar 20 12:40:25 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDInit
                                           	global _LCDUpdate
                                           	global _LCDErase
                                           	global _LCDText
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           
                                           udata_LCDBlocking_0	udata
                                           _LCDText	res	33
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDErase	code
                                           _LCDErase:
                                           ;	.line	392; TCPIP_Stack/LCDBlocking.c	void LCDErase(void)
0026ba   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0026bc   ffe5
0026be   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0026c0   ffd9
0026c2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0026c4   ffe5
0026c6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0026c8   ffe5
0026ca   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0026cc   ffe5
0026ce   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0026d0   ffe5
0026d2   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0026d4   ffe5
0026d6   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0026d8   ffe5
0026da   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0026dc   ffe5
0026de   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0026e0   ffe5
                                           ;	.line	395; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);
0026e2   0e01     movlw	0x1                	MOVLW	0x01
0026e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026e6   0e00     movlw	0                  	MOVLW	0x00
0026e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026ea   ecab     call	0x2956, 0           	CALL	_LCDWrite
0026ec   f014
0026ee   0e02     movlw	0x2                	MOVLW	0x02
0026f0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	396; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
0026f2   0e48     movlw	0x48               	MOVLW	0x48
0026f4   6e00     movwf	0, 0               	MOVWF	r0x00
0026f6   0e0d     movlw	0xd                	MOVLW	0x0d
0026f8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0026fa   6a02     clrf	0x2, 0              	CLRF	r0x02
0026fc   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00305_DS_:
0026fe   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
002700   f004
002702   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
002704   f005
002706   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
002708   f006
00270a   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00270c   f007
00270e   0eff     movlw	0xff               	MOVLW	0xff
002710   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002712   0eff     movlw	0xff               	MOVLW	0xff
002714   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002716   0eff     movlw	0xff               	MOVLW	0xff
002718   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00271a   0eff     movlw	0xff               	MOVLW	0xff
00271c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00271e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002720   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
002722   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
002724   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
002726   e1eb     bnz	0x26fe               	BNZ	_00305_DS_
                                           ;	.line	399; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', 32);
002728   0e00     movlw	0                  	MOVLW	0x00
00272a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00272c   0e20     movlw	0x20               	MOVLW	0x20
00272e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002730   0e20     movlw	0x20               	MOVLW	0x20
002732   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002734   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
002736   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002738   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
00273a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00273c   ec3a     call	0x2474, 0           	CALL	_memset
00273e   f012
002740   0e05     movlw	0x5                	MOVLW	0x05
002742   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002744   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002746   f007
002748   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00274a   f006
00274c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00274e   f005
002750   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002752   f004
002754   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002756   f003
002758   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00275a   f002
00275c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00275e   f001
002760   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002762   f000
002764   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002766   ffd9
002768   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDUpdate	code
                                           _LCDUpdate:
                                           ;	.line	332; TCPIP_Stack/LCDBlocking.c	void LCDUpdate(void)
001066   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001068   ffe5
00106a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00106c   ffd9
00106e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001070   ffe5
001072   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001074   ffe5
001076   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001078   ffe5
00107a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00107c   ffe5
00107e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001080   ffe5
001082   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001084   ffe5
001086   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001088   ffe5
00108a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00108c   ffe5
00108e   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001090   ffe5
                                           ;	.line	337; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x02);
001092   0e02     movlw	0x2                	MOVLW	0x02
001094   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001096   0e00     movlw	0                  	MOVLW	0x00
001098   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00109a   ecab     call	0x2956, 0           	CALL	_LCDWrite
00109c   f014
00109e   0e02     movlw	0x2                	MOVLW	0x02
0010a0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	338; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
0010a2   0e48     movlw	0x48               	MOVLW	0x48
0010a4   6e00     movwf	0, 0               	MOVWF	r0x00
0010a6   0e0d     movlw	0xd                	MOVLW	0x0d
0010a8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0010aa   6a02     clrf	0x2, 0              	CLRF	r0x02
0010ac   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00225_DS_:
0010ae   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0010b0   f004
0010b2   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0010b4   f005
0010b6   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0010b8   f006
0010ba   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0010bc   f007
0010be   0eff     movlw	0xff               	MOVLW	0xff
0010c0   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0010c2   0eff     movlw	0xff               	MOVLW	0xff
0010c4   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0010c6   0eff     movlw	0xff               	MOVLW	0xff
0010c8   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0010ca   0eff     movlw	0xff               	MOVLW	0xff
0010cc   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0010ce   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0010d0   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0010d2   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0010d4   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0010d6   e1eb     bnz	0x10ae               	BNZ	_00225_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
0010d8   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00257_DS_:
0010da   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0010dc   f001
0010de   6a02     clrf	0x2, 0              	CLRF	r0x02
0010e0   0e00     movlw	0                  	MOVLW	0x00
0010e2   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0010e4   e102     bnz	0x10ea               	BNZ	_00297_DS_
0010e6   0e10     movlw	0x10               	MOVLW	0x10
0010e8   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00297_DS_:
0010ea   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0010ec   d057     bra	0x119c               	BRA	_00260_DS_
                                           ;	.line	345; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
0010ee   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0010f0   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0010f2   6e01     movwf	0x1, 0             	MOVWF	r0x01
0010f4   6a02     clrf	0x2, 0              	CLRF	r0x02
0010f6   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0010f8   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0010fa   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0010fc   ffe9
0010fe   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
001100   ffea
001102   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
001104   f001
001106   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001108   e119     bnz	0x113c               	BNZ	_00232_DS_
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
00110a   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00110c   f001
                                           _00253_DS_:
00110e   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
001110   f002
001112   6a03     clrf	0x3, 0              	CLRF	r0x03
001114   0e00     movlw	0                  	MOVLW	0x00
001116   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
001118   e102     bnz	0x111e               	BNZ	_00298_DS_
00111a   0e10     movlw	0x10               	MOVLW	0x10
00111c   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00298_DS_:
00111e   e20e     bc	0x113c                	BC	_00232_DS_
                                           ;	.line	349; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
001120   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001122   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
001124   6e02     movwf	0x2, 0             	MOVWF	r0x02
001126   6a03     clrf	0x3, 0              	CLRF	r0x03
001128   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
00112a   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00112c   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
00112e   ffe9
001130   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
001132   ffea
001134   0e20     movlw	0x20               	MOVLW	0x20
001136   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
001138   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00113a   d7e9     bra	0x110e               	BRA	_00253_DS_
                                           _00232_DS_:
                                           ;	.line	352; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
00113c   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
00113e   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
001140   6e01     movwf	0x1, 0             	MOVWF	r0x01
001142   6a02     clrf	0x2, 0              	CLRF	r0x02
001144   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001146   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001148   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
00114a   ffe9
00114c   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
00114e   ffea
001150   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
001152   f001
001154   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001156   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001158   0e01     movlw	0x1                	MOVLW	0x01
00115a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00115c   ecab     call	0x2956, 0           	CALL	_LCDWrite
00115e   f014
001160   0e02     movlw	0x2                	MOVLW	0x02
001162   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	353; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
001164   0e55     movlw	0x55               	MOVLW	0x55
001166   6e01     movwf	0x1, 0             	MOVWF	r0x01
001168   6a02     clrf	0x2, 0              	CLRF	r0x02
00116a   6a03     clrf	0x3, 0              	CLRF	r0x03
00116c   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00233_DS_:
00116e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001170   f005
001172   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001174   f006
001176   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001178   f007
00117a   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
00117c   f008
00117e   0eff     movlw	0xff               	MOVLW	0xff
001180   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
001182   0eff     movlw	0xff               	MOVLW	0xff
001184   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001186   0eff     movlw	0xff               	MOVLW	0xff
001188   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00118a   0eff     movlw	0xff               	MOVLW	0xff
00118c   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
00118e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001190   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
001192   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001194   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
001196   e1eb     bnz	0x116e               	BNZ	_00233_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
001198   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00119a   d79f     bra	0x10da               	BRA	_00257_DS_
                                           _00260_DS_:
                                           ;	.line	357; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0xC0);
00119c   0ec0     movlw	0xc0               	MOVLW	0xc0
00119e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011a0   0e00     movlw	0                  	MOVLW	0x00
0011a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011a4   ecab     call	0x2956, 0           	CALL	_LCDWrite
0011a6   f014
0011a8   0e02     movlw	0x2                	MOVLW	0x02
0011aa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	358; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0011ac   0e55     movlw	0x55               	MOVLW	0x55
0011ae   6e00     movwf	0, 0               	MOVWF	r0x00
0011b0   6a01     clrf	0x1, 0              	CLRF	r0x01
0011b2   6a02     clrf	0x2, 0              	CLRF	r0x02
0011b4   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00239_DS_:
0011b6   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0011b8   f004
0011ba   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0011bc   f005
0011be   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0011c0   f006
0011c2   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0011c4   f007
0011c6   0eff     movlw	0xff               	MOVLW	0xff
0011c8   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0011ca   0eff     movlw	0xff               	MOVLW	0xff
0011cc   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0011ce   0eff     movlw	0xff               	MOVLW	0xff
0011d0   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0011d2   0eff     movlw	0xff               	MOVLW	0xff
0011d4   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0011d6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0011d8   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0011da   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0011dc   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0011de   e1eb     bnz	0x11b6               	BNZ	_00239_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
0011e0   0e10     movlw	0x10               	MOVLW	0x10
0011e2   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00265_DS_:
0011e4   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0011e6   f001
0011e8   6a02     clrf	0x2, 0              	CLRF	r0x02
0011ea   0e00     movlw	0                  	MOVLW	0x00
0011ec   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0011ee   e102     bnz	0x11f4               	BNZ	_00299_DS_
0011f0   0e20     movlw	0x20               	MOVLW	0x20
0011f2   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00299_DS_:
0011f4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0011f6   d057     bra	0x12a6               	BRA	_00269_DS_
                                           ;	.line	365; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
0011f8   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0011fa   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0011fc   6e01     movwf	0x1, 0             	MOVWF	r0x01
0011fe   6a02     clrf	0x2, 0              	CLRF	r0x02
001200   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001202   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001204   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
001206   ffe9
001208   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
00120a   ffea
00120c   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
00120e   f001
001210   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001212   e119     bnz	0x1246               	BNZ	_00246_DS_
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
001214   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
001216   f001
                                           _00261_DS_:
001218   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
00121a   f002
00121c   6a03     clrf	0x3, 0              	CLRF	r0x03
00121e   0e00     movlw	0                  	MOVLW	0x00
001220   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
001222   e102     bnz	0x1228               	BNZ	_00300_DS_
001224   0e20     movlw	0x20               	MOVLW	0x20
001226   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00300_DS_:
001228   e20e     bc	0x1246                	BC	_00246_DS_
                                           ;	.line	369; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
00122a   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
00122c   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
00122e   6e02     movwf	0x2, 0             	MOVWF	r0x02
001230   6a03     clrf	0x3, 0              	CLRF	r0x03
001232   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001234   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001236   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
001238   ffe9
00123a   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
00123c   ffea
00123e   0e20     movlw	0x20               	MOVLW	0x20
001240   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
001242   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
001244   d7e9     bra	0x1218               	BRA	_00261_DS_
                                           _00246_DS_:
                                           ;	.line	372; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
001246   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001248   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00124a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00124c   6a02     clrf	0x2, 0              	CLRF	r0x02
00124e   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001250   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001252   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
001254   ffe9
001256   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
001258   ffea
00125a   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
00125c   f001
00125e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001260   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001262   0e01     movlw	0x1                	MOVLW	0x01
001264   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001266   ecab     call	0x2956, 0           	CALL	_LCDWrite
001268   f014
00126a   0e02     movlw	0x2                	MOVLW	0x02
00126c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	373; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
00126e   0e55     movlw	0x55               	MOVLW	0x55
001270   6e01     movwf	0x1, 0             	MOVWF	r0x01
001272   6a02     clrf	0x2, 0              	CLRF	r0x02
001274   6a03     clrf	0x3, 0              	CLRF	r0x03
001276   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00247_DS_:
001278   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00127a   f005
00127c   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00127e   f006
001280   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001282   f007
001284   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
001286   f008
001288   0eff     movlw	0xff               	MOVLW	0xff
00128a   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00128c   0eff     movlw	0xff               	MOVLW	0xff
00128e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001290   0eff     movlw	0xff               	MOVLW	0xff
001292   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001294   0eff     movlw	0xff               	MOVLW	0xff
001296   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
001298   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00129a   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00129c   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00129e   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
0012a0   e1eb     bnz	0x1278               	BNZ	_00247_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
0012a2   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0012a4   d79f     bra	0x11e4               	BRA	_00265_DS_
                                           _00269_DS_:
0012a6   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0012a8   f008
0012aa   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0012ac   f007
0012ae   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0012b0   f006
0012b2   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0012b4   f005
0012b6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0012b8   f004
0012ba   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0012bc   f003
0012be   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0012c0   f002
0012c2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0012c4   f001
0012c6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0012c8   f000
0012ca   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0012cc   ffd9
0012ce   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDInit	code
                                           _LCDInit:
                                           ;	.line	207; TCPIP_Stack/LCDBlocking.c	void LCDInit(void)
0012d0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0012d2   ffe5
0012d4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0012d6   ffd9
0012d8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0012da   ffe5
0012dc   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0012de   ffe5
0012e0   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0012e2   ffe5
0012e4   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0012e6   ffe5
0012e8   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0012ea   ffe5
0012ec   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0012ee   ffe5
0012f0   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0012f2   ffe5
0012f4   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0012f6   ffe5
0012f8   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0012fa   ffe5
                                           ;	.line	211; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', sizeof(LCDText)-1);
0012fc   0e00     movlw	0                  	MOVLW	0x00
0012fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001300   0e20     movlw	0x20               	MOVLW	0x20
001302   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001304   0e20     movlw	0x20               	MOVLW	0x20
001306   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001308   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
00130a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00130c   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
00130e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001310   ec3a     call	0x2474, 0           	CALL	_memset
001312   f012
001314   0e05     movlw	0x5                	MOVLW	0x05
001316   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001318   010f     movlb	0xf                	BANKSEL	(_LCDText + 32)
                                           ;	.line	212; TCPIP_Stack/LCDBlocking.c	LCDText[sizeof(LCDText)-1] = 0;
00131a   6b20     clrf	0x20, 0x1           	CLRF	(_LCDText + 32), B
                                           ;	.line	215; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
00131c   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	216; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
00131e   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	220; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
001320   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	233; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
001322   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	234; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
001324   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	235; TCPIP_Stack/LCDBlocking.c	LCD_E_TRIS = 0;
001326   9099     bcf	0x99, 0, 0           	BCF	_TRISHbits, 0
                                           ;	.line	239; TCPIP_Stack/LCDBlocking.c	DelayMs(40);
001328   0ea0     movlw	0xa0               	MOVLW	0xa0
00132a   6e00     movwf	0, 0               	MOVWF	r0x00
00132c   0e09     movlw	0x9                	MOVLW	0x09
00132e   6e01     movwf	0x1, 0             	MOVWF	r0x01
001330   0e01     movlw	0x1                	MOVLW	0x01
001332   6e02     movwf	0x2, 0             	MOVWF	r0x02
001334   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00143_DS_:
001336   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
001338   f004
00133a   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00133c   f005
00133e   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001340   f006
001342   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001344   f007
001346   0eff     movlw	0xff               	MOVLW	0xff
001348   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00134a   0eff     movlw	0xff               	MOVLW	0xff
00134c   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00134e   0eff     movlw	0xff               	MOVLW	0xff
001350   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001352   0eff     movlw	0xff               	MOVLW	0xff
001354   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001356   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001358   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
00135a   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00135c   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00135e   e1eb     bnz	0x1336               	BNZ	_00143_DS_
                                           ;	.line	247; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = 0;
001360   9490     bcf	0x90, 0x2, 0         	BCF	_LATHbits, 2
                                           ;	.line	249; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = 0x03;
001362   0e03     movlw	0x3                	MOVLW	0x03
001364   6e8d     movwf	0x8d, 0            	MOVWF	_LATE
001366   0000     nop                      	nop 
001368   0000     nop                      	nop 
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
00136a   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00191_DS_:
00136c   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00136e   f001
001370   6a02     clrf	0x2, 0              	CLRF	r0x02
001372   0e00     movlw	0                  	MOVLW	0x00
001374   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
001376   e102     bnz	0x137c               	BNZ	_00220_DS_
001378   0e03     movlw	0x3                	MOVLW	0x03
00137a   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00220_DS_:
00137c   e239     bc	0x13f0                	BC	_00194_DS_
                                           ;	.line	266; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
00137e   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
                                           ;	.line	267; TCPIP_Stack/LCDBlocking.c	Delay10us(1);	       	// Wait E Pulse width time (min 230ns)
001380   0e11     movlw	0x11               	MOVLW	0x11
001382   6e01     movwf	0x1, 0             	MOVWF	r0x01
001384   6a02     clrf	0x2, 0              	CLRF	r0x02
001386   6a03     clrf	0x3, 0              	CLRF	r0x03
001388   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00155_DS_:
00138a   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00138c   f005
00138e   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001390   f006
001392   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001394   f007
001396   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
001398   f008
00139a   0eff     movlw	0xff               	MOVLW	0xff
00139c   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00139e   0eff     movlw	0xff               	MOVLW	0xff
0013a0   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0013a2   0eff     movlw	0xff               	MOVLW	0xff
0013a4   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0013a6   0eff     movlw	0xff               	MOVLW	0xff
0013a8   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
0013aa   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0013ac   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0013ae   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0013b0   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
0013b2   e1eb     bnz	0x138a               	BNZ	_00155_DS_
                                           ;	.line	268; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
0013b4   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	269; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
0013b6   0e48     movlw	0x48               	MOVLW	0x48
0013b8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0013ba   0e0d     movlw	0xd                	MOVLW	0x0d
0013bc   6e02     movwf	0x2, 0             	MOVWF	r0x02
0013be   6a03     clrf	0x3, 0              	CLRF	r0x03
0013c0   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00161_DS_:
0013c2   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0013c4   f005
0013c6   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0013c8   f006
0013ca   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0013cc   f007
0013ce   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
0013d0   f008
0013d2   0eff     movlw	0xff               	MOVLW	0xff
0013d4   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
0013d6   0eff     movlw	0xff               	MOVLW	0xff
0013d8   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0013da   0eff     movlw	0xff               	MOVLW	0xff
0013dc   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0013de   0eff     movlw	0xff               	MOVLW	0xff
0013e0   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
0013e2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0013e4   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0013e6   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0013e8   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
0013ea   e1eb     bnz	0x13c2               	BNZ	_00161_DS_
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
0013ec   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0013ee   d7be     bra	0x136c               	BRA	_00191_DS_
                                           _00194_DS_:
                                           ;	.line	295; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x38);
0013f0   0e38     movlw	0x38               	MOVLW	0x38
0013f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013f4   0e00     movlw	0                  	MOVLW	0x00
0013f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013f8   ecab     call	0x2956, 0           	CALL	_LCDWrite
0013fa   f014
0013fc   0e02     movlw	0x2                	MOVLW	0x02
0013fe   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	297; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
001400   0e55     movlw	0x55               	MOVLW	0x55
001402   6e00     movwf	0, 0               	MOVWF	r0x00
001404   6a01     clrf	0x1, 0              	CLRF	r0x01
001406   6a02     clrf	0x2, 0              	CLRF	r0x02
001408   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00167_DS_:
00140a   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00140c   f004
00140e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001410   f005
001412   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001414   f006
001416   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001418   f007
00141a   0eff     movlw	0xff               	MOVLW	0xff
00141c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00141e   0eff     movlw	0xff               	MOVLW	0xff
001420   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001422   0eff     movlw	0xff               	MOVLW	0xff
001424   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001426   0eff     movlw	0xff               	MOVLW	0xff
001428   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00142a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00142c   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
00142e   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
001430   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001432   e1eb     bnz	0x140a               	BNZ	_00167_DS_
                                           ;	.line	300; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x06);	// Increment after each write, do not shift
001434   0e06     movlw	0x6                	MOVLW	0x06
001436   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001438   0e00     movlw	0                  	MOVLW	0x00
00143a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00143c   ecab     call	0x2956, 0           	CALL	_LCDWrite
00143e   f014
001440   0e02     movlw	0x2                	MOVLW	0x02
001442   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	301; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
001444   0e55     movlw	0x55               	MOVLW	0x55
001446   6e00     movwf	0, 0               	MOVWF	r0x00
001448   6a01     clrf	0x1, 0              	CLRF	r0x01
00144a   6a02     clrf	0x2, 0              	CLRF	r0x02
00144c   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00173_DS_:
00144e   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
001450   f004
001452   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001454   f005
001456   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001458   f006
00145a   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00145c   f007
00145e   0eff     movlw	0xff               	MOVLW	0xff
001460   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001462   0eff     movlw	0xff               	MOVLW	0xff
001464   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001466   0eff     movlw	0xff               	MOVLW	0xff
001468   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00146a   0eff     movlw	0xff               	MOVLW	0xff
00146c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00146e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001470   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
001472   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
001474   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001476   e1eb     bnz	0x144e               	BNZ	_00173_DS_
                                           ;	.line	304; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x0C);	// Turn display on, no cusor, no cursor blink
001478   0e0c     movlw	0xc                	MOVLW	0x0c
00147a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00147c   0e00     movlw	0                  	MOVLW	0x00
00147e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001480   ecab     call	0x2956, 0           	CALL	_LCDWrite
001482   f014
001484   0e02     movlw	0x2                	MOVLW	0x02
001486   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	305; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
001488   0e55     movlw	0x55               	MOVLW	0x55
00148a   6e00     movwf	0, 0               	MOVWF	r0x00
00148c   6a01     clrf	0x1, 0              	CLRF	r0x01
00148e   6a02     clrf	0x2, 0              	CLRF	r0x02
001490   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00179_DS_:
001492   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
001494   f004
001496   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001498   f005
00149a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00149c   f006
00149e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0014a0   f007
0014a2   0eff     movlw	0xff               	MOVLW	0xff
0014a4   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0014a6   0eff     movlw	0xff               	MOVLW	0xff
0014a8   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0014aa   0eff     movlw	0xff               	MOVLW	0xff
0014ac   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0014ae   0eff     movlw	0xff               	MOVLW	0xff
0014b0   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0014b2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0014b4   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0014b6   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0014b8   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0014ba   e1eb     bnz	0x1492               	BNZ	_00179_DS_
                                           ;	.line	308; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);	
0014bc   0e01     movlw	0x1                	MOVLW	0x01
0014be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0014c0   0e00     movlw	0                  	MOVLW	0x00
0014c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0014c4   ecab     call	0x2956, 0           	CALL	_LCDWrite
0014c6   f014
0014c8   0e02     movlw	0x2                	MOVLW	0x02
0014ca   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	309; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
0014cc   0e48     movlw	0x48               	MOVLW	0x48
0014ce   6e00     movwf	0, 0               	MOVWF	r0x00
0014d0   0e0d     movlw	0xd                	MOVLW	0x0d
0014d2   6e01     movwf	0x1, 0             	MOVWF	r0x01
0014d4   6a02     clrf	0x2, 0              	CLRF	r0x02
0014d6   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00185_DS_:
0014d8   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0014da   f004
0014dc   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0014de   f005
0014e0   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0014e2   f006
0014e4   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0014e6   f007
0014e8   0eff     movlw	0xff               	MOVLW	0xff
0014ea   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0014ec   0eff     movlw	0xff               	MOVLW	0xff
0014ee   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0014f0   0eff     movlw	0xff               	MOVLW	0xff
0014f2   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0014f4   0eff     movlw	0xff               	MOVLW	0xff
0014f6   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0014f8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0014fa   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0014fc   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0014fe   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001500   e1eb     bnz	0x14d8               	BNZ	_00185_DS_
001502   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001504   f008
001506   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001508   f007
00150a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00150c   f006
00150e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001510   f005
001512   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001514   f004
001516   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001518   f003
00151a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00151c   f002
00151e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001520   f001
001522   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001524   f000
001526   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001528   ffd9
00152a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDWrite	code
                                           _LCDWrite:
                                           ;	.line	94; TCPIP_Stack/LCDBlocking.c	static void LCDWrite(BYTE RS, BYTE Data)
002956   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002958   ffe5
00295a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00295c   ffd9
00295e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002960   ffe5
002962   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002964   ffe5
002966   0e02     movlw	0x2                	MOVLW	0x02
002968   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00296a   f000
00296c   0e03     movlw	0x3                	MOVLW	0x03
00296e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002970   f001
                                           ;	.line	97; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
002972   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	110; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
002974   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	111; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
002976   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	112; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
002978   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	113; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = RS;
00297a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00297c   0b01     andlw	0x1                	ANDLW	0x01
00297e   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
002980   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
002982   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
002984   5090     movf	0x90, 0, 0          	MOVF	_LATHbits, W
002986   0bfb     andlw	0xfb               	ANDLW	0xfb
002988   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
00298a   6e90     movwf	0x90, 0            	MOVWF	_LATHbits
                                           ;	.line	140; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = Data;
00298c   c001     movff	0x1, 0xf8d         	MOVFF	r0x01, _LATE
00298e   ff8d
002990   0000     nop                      	nop 
002992   0000     nop                      	nop 
                                           ;	.line	155; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
002994   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
002996   0000     nop                      	nop 
002998   0000     nop                      	nop 
00299a   0000     nop                      	nop 
00299c   0000     nop                      	nop 
00299e   0000     nop                      	nop 
0029a0   0000     nop                      	nop 
0029a2   0000     nop                      	nop 
0029a4   0000     nop                      	nop 
0029a6   0000     nop                      	nop 
                                           ;	.line	165; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
0029a8   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
0029aa   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0029ac   f001
0029ae   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0029b0   f000
0029b2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0029b4   ffd9
0029b6   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   33 (0x0021) bytes ( 0.86%)
                                           ; access size:	    9 (0x0009) bytes
                                           
                                           
                                           	end
