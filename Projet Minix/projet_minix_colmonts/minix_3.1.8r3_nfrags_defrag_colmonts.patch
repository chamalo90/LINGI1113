diff -urN --exclude .svn --exclude '*~' ./src_orig/include/Makefile ./src/include/Makefile
--- ./src_orig/include/Makefile	2010-09-02 17:44:04.000000000 +0200
+++ ./src/include/Makefile	2013-04-23 10:20:11.000000000 +0200
@@ -9,7 +9,8 @@
 	stdint.h stdbool.h stdio.h stdlib.h string.h strings.h sysexits.h \
 	syslog.h tar.h termcap.h termios.h time.h timers.h tools.h \
 	ttyent.h ucontext.h unistd.h utime.h utmp.h wchar.h wctype.h \
-	hgfs.h tzfile.h util.h fetch.h mpool.h ndbm.h db.h poll.h resolv.h
+	hgfs.h tzfile.h util.h fetch.h mpool.h ndbm.h db.h poll.h resolv.h\
+	newcalls.h
 INCS+=	arpa/inet.h arpa/nameser.h
 INCS+=	minix/a.out.h minix/bitmap.h minix/callnr.h minix/cdrom.h \
 	minix/com.h minix/config.h minix/const.h minix/cpufeature.h \
diff -urN --exclude .svn --exclude '*~' ./src_orig/include/minix/callnr.h ./src/include/minix/callnr.h
--- ./src_orig/include/minix/callnr.h	2010-08-25 15:06:43.000000000 +0200
+++ ./src/include/minix/callnr.h	2013-04-23 11:49:08.000000000 +0200
@@ -58,7 +58,9 @@
 #define SETGROUPS	  66
 #define GETMCONTEXT       67
 #define SETMCONTEXT       68
-
+/*Project system calls */
+#define NFRAG		  69
+#define DEFRAG		  70
 /* Posix signal handling. */
 #define SIGACTION	  71
 #define SIGSUSPEND	  72
diff -urN --exclude .svn --exclude '*~' ./src_orig/include/minix/vfsif.h ./src/include/minix/vfsif.h
--- ./src_orig/include/minix/vfsif.h	2010-08-30 15:41:22.000000000 +0200
+++ ./src/include/minix/vfsif.h	2013-05-07 09:55:19.000000000 +0200
@@ -53,6 +53,7 @@
 #define RES_SEEK_POS_LO		m9_l4
 #define RES_SYMLOOP		m9_s3
 #define RES_UID			m9_s4
+#define RES_FRAGS		m9_l3
 
 /* VFS/FS flags */
 #define REQ_RDONLY		001
@@ -113,9 +114,12 @@
 #define REQ_NEWNODE	(VFS_BASE + 29)
 #define REQ_RDLINK	(VFS_BASE + 30)
 #define REQ_GETDENTS	(VFS_BASE + 31)
-#define REQ_STATVFS		(VFS_BASE + 32)
+#define REQ_STATVFS	(VFS_BASE + 32)
+#define REQ_NFRAG	(VFS_BASE + 33) 
+#define REQ_DEFRAG	(VFS_BASE + 34) 
 
-#define NREQS                   33
+
+#define NREQS                   35
 
 #define IS_VFS_RQ(type) (((type) & ~0xff) == VFS_BASE)
 
diff -urN --exclude .svn --exclude '*~' ./src_orig/include/newcalls.h ./src/include/newcalls.h
--- ./src_orig/include/newcalls.h	1970-01-01 01:00:00.000000000 +0100
+++ ./src/include/newcalls.h	2013-05-08 11:10:51.000000000 +0200
@@ -0,0 +1,6 @@
+#include <lib.h>
+#ifndef _NEWCALLS_H
+#define _NEWCALLS_H
+_PROTOTYPE(int nfrag, (const char* path)			);
+_PROTOTYPE(int defrag, (const char* path)			);
+#endif
diff -urN --exclude .svn --exclude '*~' ./src_orig/lib/libc/other/_defrag.c ./src/lib/libc/other/_defrag.c
--- ./src_orig/lib/libc/other/_defrag.c	1970-01-01 01:00:00.000000000 +0100
+++ ./src/lib/libc/other/_defrag.c	2013-05-08 11:43:47.000000000 +0200
@@ -0,0 +1,10 @@
+#include <newcalls.h>
+#include <stdio.h>
+
+PUBLIC int defrag(const char* path){
+	message m;
+	int r;
+	m.m1_p1 = (char*) path; /*Message param for input = name1 m1_p1*/
+	m.m1_i1 = (strlen(path) + 1);
+	return _syscall(VFS_PROC_NR,DEFRAG, &m);
+}
diff -urN --exclude .svn --exclude '*~' ./src_orig/lib/libc/other/Makefile.inc ./src/lib/libc/other/Makefile.inc
--- ./src_orig/lib/libc/other/Makefile.inc	2010-08-25 15:06:43.000000000 +0200
+++ ./src/lib/libc/other/Makefile.inc	2013-04-23 11:55:09.000000000 +0200
@@ -5,6 +5,8 @@
 CPPFLAGS.fsversion.c+=-I${.CURDIR}/../../servers
 
 SRCS+=  \
+	_nfrag.c \
+	_defrag.c \
 	__pm_findproc.c \
 	_adddma.c \
 	_brk.c \
diff -urN --exclude .svn --exclude '*~' ./src_orig/lib/libc/other/_nfrag.c ./src/lib/libc/other/_nfrag.c
--- ./src_orig/lib/libc/other/_nfrag.c	1970-01-01 01:00:00.000000000 +0100
+++ ./src/lib/libc/other/_nfrag.c	2013-05-08 11:43:48.000000000 +0200
@@ -0,0 +1,15 @@
+#include <lib.h>
+#include <newcalls.h>
+#include <unistd.h>
+
+/**
+* library function for nfrag syscall
+* PARAM = file's path
+*/
+PUBLIC int nfrag(const char* path){
+	message m;
+	int r;
+	m.m1_p1 = (char*) path; /*Message param for input = name1 m1_p1*/
+	m.m1_i1 = (strlen(path) + 1);
+	return _syscall(VFS_PROC_NR,NFRAG, &m);
+}
diff -urN --exclude .svn --exclude '*~' ./src_orig/lib/libc/syscall/defrag.S ./src/lib/libc/syscall/defrag.S
--- ./src_orig/lib/libc/syscall/defrag.S	1970-01-01 01:00:00.000000000 +0100
+++ ./src/lib/libc/syscall/defrag.S	2013-04-23 14:46:56.000000000 +0200
@@ -0,0 +1,6 @@
+#include <machine/asm.h>
+
+IMPORT(_defrag)
+ENTRY(defrag)
+	jmp	_C_LABEL(_defrag)
+
diff -urN --exclude .svn --exclude '*~' ./src_orig/lib/libc/syscall/Makefile.inc ./src/lib/libc/syscall/Makefile.inc
--- ./src_orig/lib/libc/syscall/Makefile.inc	2010-07-15 15:24:57.000000000 +0200
+++ ./src/lib/libc/syscall/Makefile.inc	2013-04-23 14:47:30.000000000 +0200
@@ -139,4 +139,6 @@
 	vm_dmacalls.S \
 	wait.S \
 	waitpid.S \
-	write.S
+	write.S \
+	nfrag.S \
+	defrag.S
diff -urN --exclude .svn --exclude '*~' ./src_orig/lib/libc/syscall/nfrag.S ./src/lib/libc/syscall/nfrag.S
--- ./src_orig/lib/libc/syscall/nfrag.S	1970-01-01 01:00:00.000000000 +0100
+++ ./src/lib/libc/syscall/nfrag.S	2013-04-23 14:46:39.000000000 +0200
@@ -0,0 +1,6 @@
+#include <machine/asm.h>
+
+IMPORT(_nfrag)
+ENTRY(nfrag)
+	jmp	_C_LABEL(_nfrag)
+
diff -urN --exclude .svn --exclude '*~' ./src_orig/lib/libvtreefs/table.c ./src/lib/libvtreefs/table.c
--- ./src_orig/lib/libvtreefs/table.c	2010-08-10 22:05:51.000000000 +0200
+++ ./src/lib/libvtreefs/table.c	2013-04-28 15:14:30.000000000 +0200
@@ -37,6 +37,8 @@
 	fs_rdlink,	/* 30	rdlink		*/
 	fs_getdents,	/* 31	getdents	*/
 	fs_statvfs,	/* 32	statvfs		*/
+	no_sys,		/* 33   nfrag		*/
+	no_sys,		/* 34	defrag 		*/
 };
 
 /* This should not fail with "array size is negative": */
diff -urN --exclude .svn --exclude '*~' ./src_orig/servers/hgfs/table.c ./src/servers/hgfs/table.c
--- ./src_orig/servers/hgfs/table.c	2010-06-27 19:19:50.000000000 +0200
+++ ./src/servers/hgfs/table.c	2013-04-28 15:49:04.000000000 +0200
@@ -41,6 +41,8 @@
 	no_sys,		/* 30 rdlink		*/
 	do_getdents,	/* 31 getdents		*/
 	do_statvfs,	/* 32 statvfs		*/
+	no_sys, 	/* 33 nfrag		*/
+	no_sys,		/* 34 defrag		*/
 };
 
 /* This should not fail with "array size is negative": */
diff -urN --exclude .svn --exclude '*~' ./src_orig/servers/mfs/cache.c ./src/servers/mfs/cache.c
--- ./src_orig/servers/mfs/cache.c	2010-06-24 02:32:17.000000000 +0200
+++ ./src/servers/mfs/cache.c	2013-05-09 16:13:42.000000000 +0200
@@ -315,6 +315,64 @@
 }
 
 /*===========================================================================*
+ *				find_n_contig_zone			     *
+ *===========================================================================*/
+PUBLIC zone_t find_n_contig_zone(
+  dev_t dev,			/* device where zone wanted */
+  int n_zones			/* number of zones needed */
+){
+	register struct super_block *sp;
+	unsigned b_chunk;
+	bit_t bit, last_valid, start_zmap_block, n_block, zmap_size;
+	int count = 0;
+	bitchunk_t *chunk_end;
+	bitchunk_t *current_chunk_ptr;
+	bitchunk_t current_chunk;
+	bitchunk_t i;
+	struct buf *block;
+
+
+	sp = get_super(dev); /* get superblock */
+	bit = sp->s_zsearch; /* find first free zone in ZMAP */
+	start_zmap_block = START_BLOCK + sp->s_imap_blocks; /* first block of zmap */
+	zmap_size = sp->s_zones - (sp->s_firstdatazone - 1); /* number of bits in zmap */
+	n_block = bit / FS_BITS_PER_BLOCK(sp->s_block_size); /* block of 'bit' in zmap */
+	b_chunk = (bit % FS_BITS_PER_BLOCK(sp->s_block_size))/FS_BITCHUNK_BITS; /* chunk of 'bit' in zmap (on n_block) */
+	block = get_block(sp->s_dev, start_zmap_block + n_block,NORMAL); /* get block of 'bit' */
+	chunk_end = &block->b_bitmap[FS_BITMAP_CHUNKS(sp->s_block_size)]; /* keep track of last chunk in block */
+	current_chunk_ptr = &block->b_bitmap[b_chunk]; /* load chunk where 'bit' is stored */
+	
+	while(TRUE){
+		current_chunk = (bitchunk_t) conv2(sp->s_native, (int) *current_chunk_ptr); /* get chunk data in binary */
+		for(i = 0; i<FS_BITCHUNK_BITS; i++){ /* check every bits of current_chunk */
+			if(!(current_chunk & (1<<i))){ /* if i_th bit is 0 */
+				count++;
+				if(count == n_zones){ break; }
+			}else{	/* if i_th bit is 1 */
+				count ==0;
+			}
+		}
+		
+		if(count == n_zones){ /* space found, get first bit of this space */
+			bit =((bit_t) n_block * FS_BITS_PER_BLOCK(sp->s_block_size)) + (current_chunk_ptr - &block->b_bitmap[0]) * FS_BITCHUNK_BITS + i + 1 - n_zones;
+			/* index of block in zmap * bits per block + index of chunk in block * bits per chunk + index of bit in chunk + 1 - nb of zones needed */
+			put_block(block, MAP_BLOCK);
+			return bit;
+		}
+		/* Switch to next chunk (or next block if necessary)*/
+		current_chunk_ptr++;
+		if(current_chunk_ptr == chunk_end){ /* end of chunk reached */
+			put_block(block, MAP_BLOCK);
+			if(n_block - start_zmap_block > sp->s_zmap_blocks) return NO_BIT; /* end of zmap reached */
+			n_block ++;
+			block = get_block(sp->s_dev, start_zmap_block + n_block,NORMAL);
+			chunk_end = &block->b_bitmap[FS_BITMAP_CHUNKS(sp->s_block_size)];
+			current_chunk_ptr = &block->b_bitmap[0];
+		}		
+	}
+}
+
+/*===========================================================================*
  *				free_zone				     *
  *===========================================================================*/
 PUBLIC void free_zone(
diff -urN --exclude .svn --exclude '*~' ./src_orig/servers/mfs/frags.c ./src/servers/mfs/frags.c
--- ./src_orig/servers/mfs/frags.c	1970-01-01 01:00:00.000000000 +0100
+++ ./src/servers/mfs/frags.c	2013-05-10 10:57:07.000000000 +0200
@@ -0,0 +1,116 @@
+#include "fs.h"
+#include "buf.h"
+#include "inode.h"
+#include "super.h"
+#include <stdio.h>
+#include <minix/vfsif.h>
+
+int fs_nfrag()
+{
+	struct inode *in;
+	int fragments;
+	if((in = get_inode(fs_dev, (ino_t) fs_m_in.REQ_INODE_NR))== NULL) return EINVAL; /* get the inode */
+	fragments = count(in); /* count fragments */
+	put_inode(in); /* put inode back */
+	fs_m_out.RES_FRAGS = fragments;
+	return 0;
+}
+
+int fs_defrag()
+{
+	struct inode *in;
+	int fragments, state, zone_number, block_per_zone, offset, block_counter;
+	unsigned zone_size;
+	struct super_block *super_bl;
+	bit_t first_bit, it_bit;
+	zone_t new_zone;
+	block_t input_b, output_b;
+	struct buf *src_buf, *dst_buf;
+	if((in=get_inode(fs_dev, (ino_t) fs_m_in.REQ_INODE_NR)) == NULL) return EINVAL;
+	fragments = count(in);
+	if(fragments <= 1){
+		/* no need to defrag */
+		printf("No need to defrag, contiguous file\n");
+		fs_m_out.RES_FRAGS = fragments;
+		return 0;
+	}
+	printf("Beginning defrag, frags:%d\n", fragments);
+	super_bl = in->i_sp;
+	block_per_zone = 1<< super_bl->s_log_zone_size;
+	zone_size = super_bl->s_block_size * block_per_zone; 
+	zone_number = in->i_size / zone_size;
+	if(in->i_size % zone_size > 0){ /* file size does not fit in integer number of zones */
+		zone_number++;
+	}
+	
+	first_bit = find_n_contig_zone(super_bl->s_dev, zone_number);
+	if(first_bit == NO_BIT){ /* no space found */
+		fs_m_out.RES_FRAGS = fragments;
+		return ENOSPC;
+	
+	}else{ /* need to allocate zone_number zones in zmap*/
+		it_bit = first_bit;
+		for(;zone_number>0; zone_number--){
+			alloc_bit(super_bl, ZMAP, it_bit);
+			it_bit ++;
+		}
+	}
+	new_zone = first_bit + super_bl->s_firstdatazone - 1;
+	output_b = new_zone << super_bl->s_log_zone_size;
+	
+	for(offset=0; offset<in->i_size; offset+=in->i_sp->s_block_size, output_b++){
+		input_b = read_map(in,offset);
+		src_buf = get_block(in->i_dev, input_b, NORMAL);
+		dst_buf = get_block(in->i_dev, output_b , NORMAL);
+		memcpy(dst_buf->b_data, src_buf->b_data, (size_t) src_buf->b_bytes);
+		dst_buf->b_dirt = DIRTY;
+		if(in->i_size % zone_size > 0 && offset + in->i_sp->s_block_size >in->i_size){ /* file size does not fit in integer number of zones */
+			put_block(src_buf, PARTIAL_DATA_BLOCK);
+			put_block(dst_buf, PARTIAL_DATA_BLOCK);
+		}else{
+			put_block(src_buf, FULL_DATA_BLOCK);
+			put_block(dst_buf, FULL_DATA_BLOCK);
+		}
+	}
+	
+	for(offset=0; offset<in->i_size; offset+=zone_size){
+		write_map(in, offset, NO_ZONE, WMAP_FREE);
+		write_map(in, offset, new_zone++, 0);
+	}
+	
+	fragments = count(in);
+
+	put_inode(in); /* put inode back */
+	printf("defrag done fragments : %d (should be 1)\n",fragments);
+	fs_m_out.RES_FRAGS = fragments;
+	return 0;
+}
+
+int count(struct inode *in){
+	struct super_block *super_bl;
+	unsigned log_zone_size, zone_size, block_per_zone, frags, offset;
+
+	block_t next_zone_block; /* pointer to expected first block in next zone */
+	block_t current_zone_block; /* pointer to current block */
+	
+	frags = 0;
+	super_bl = in->i_sp;
+	log_zone_size = super_bl->s_log_zone_size;
+	block_per_zone = 1<< log_zone_size;
+	zone_size = super_bl->s_block_size * block_per_zone; 
+
+	next_zone_block = -1;
+	frags = 0;
+
+	for(offset = 0; offset < in->i_size; offset+=zone_size){
+		if(next_zone_block != (current_zone_block=read_map(in,offset))){
+			next_zone_block = current_zone_block;
+			frags++;
+		}
+		next_zone_block += block_per_zone;
+	}
+	
+	return frags;
+	
+}
+
diff -urN --exclude .svn --exclude '*~' ./src_orig/servers/mfs/Makefile ./src/servers/mfs/Makefile
--- ./src_orig/servers/mfs/Makefile	2010-06-25 20:29:09.000000000 +0200
+++ ./src/servers/mfs/Makefile	2013-05-09 15:59:51.000000000 +0200
@@ -3,7 +3,7 @@
 SRCS=	cache.c device.c link.c \
 	mount.c misc.c open.c protect.c read.c \
 	stadir.c stats.c table.c time.c utility.c \
-	write.c inode.c main.c path.c super.c
+	write.c inode.c main.c path.c super.c frags.c
 
 DPADD+=	${LIBSYS}
 LDADD+=	-lsys
diff -urN --exclude .svn --exclude '*~' ./src_orig/servers/mfs/proto.h ./src/servers/mfs/proto.h
--- ./src_orig/servers/mfs/proto.h	2010-06-24 01:58:16.000000000 +0200
+++ ./src/servers/mfs/proto.h	2013-05-09 15:59:52.000000000 +0200
@@ -30,6 +30,10 @@
 _PROTOTYPE( void dev_close, (endpoint_t driver_e, dev_t dev)		);
 _PROTOTYPE( int fs_new_driver, (void)					);
 
+/* frags.c */
+_PROTOTYPE( int fs_nfrag, (void)					);
+_PROTOTYPE( int fs_defrag, (void)					);
+
 /* inode.c */
 _PROTOTYPE( struct inode *alloc_inode, (dev_t dev, mode_t bits)		);
 _PROTOTYPE( void dup_inode, (struct inode *ip)				);
diff -urN --exclude .svn --exclude '*~' ./src_orig/servers/mfs/table.c ./src/servers/mfs/table.c
--- ./src_orig/servers/mfs/table.c	2010-06-24 01:58:16.000000000 +0200
+++ ./src/servers/mfs/table.c	2013-05-09 15:59:54.000000000 +0200
@@ -44,6 +44,8 @@
         no_sys,		    /* 29  */		/* Was: fs_newnode */
         fs_rdlink,	    /* 30  */
         fs_getdents,	    /* 31  */
-        fs_statvfs,    /* 32 */
+        fs_statvfs,	    /* 32 */
+	fs_nfrag, 	    /* 33  PROJECT FS CALL*/
+	fs_defrag,	    /* 34  PROJECT FS CALL*/
 };
 
diff -urN --exclude .svn --exclude '*~' ./src_orig/servers/pm/table.c ./src/servers/pm/table.c
--- ./src_orig/servers/pm/table.c	2010-08-25 15:06:43.000000000 +0200
+++ ./src/servers/pm/table.c	2013-04-23 13:36:14.000000000 +0200
@@ -80,8 +80,8 @@
 	do_set, 	/* 66 = setgroups */
 	do_getmcontext,	/* 67 = getmcontext */
 	do_setmcontext,	/* 68 = setmcontext */
-	no_sys,		/* 69 = unused	*/
-	no_sys,		/* 70 = unused	*/
+	no_sys,		/* 69 = do_nfrag*/
+	no_sys,		/* 70 = do_defrag*/
 	do_sigaction,	/* 71 = sigaction   */
 	do_sigsuspend,	/* 72 = sigsuspend  */
 	do_sigpending,	/* 73 = sigpending  */
diff -urN --exclude .svn --exclude '*~' ./src_orig/servers/vfs/frag.c ./src/servers/vfs/frag.c
--- ./src_orig/servers/vfs/frag.c	1970-01-01 01:00:00.000000000 +0100
+++ ./src/servers/vfs/frag.c	2013-05-10 10:53:22.000000000 +0200
@@ -0,0 +1,49 @@
+/************************************************
+*** Function bound to syscalls nfrag & defrag ***
+************************************************/
+#include "fs.h"
+#include "param.h"
+#include "vnode.h"
+#include <minix/vfsif.h>
+
+PUBLIC int do_nfrag(){
+	/* Input
+	*  Path: name1 m1_p1
+	*/
+	struct vnode *vn;
+	int requestState;
+	if(fetch_name(m_in.name1,m_in.name1_length, M1) != OK) return err_code; /* Check if file from path exist. */
+	vn=eat_path(PATH_NOFLAGS,fp); /* get vnode from path */
+	if(vn == NULL) return err_code; /* check eatpath success */
+	if((vn->v_mode & I_TYPE) != I_REGULAR) /* check if regular file & permission to access it. */
+	{
+		put_vnode(vn);
+		return EPERM; 
+	}
+	if(vn->v_ref_count != 1) { return EBUSY;}
+	requestState = req_nfrag(vn->v_fs_e, vn->v_inode_nr); /* Throw request to fs process */
+	put_vnode(vn);
+	return requestState;
+}
+
+PUBLIC int do_defrag(){
+	/* Input
+	*  Path: name1 m1_p1
+	*/
+	struct vnode *vn;
+	int requestState;
+	if(fetch_name(m_in.name1,m_in.name1_length, M1) != OK) return err_code; /* Check if file from path exist. */
+	vn=eat_path(PATH_NOFLAGS,fp); /* get vnode from path */
+	if(vn == NULL) return err_code; /* check eatpath success */
+	if((vn->v_mode & I_TYPE) != I_REGULAR) /* check if regular file & permission to access it. */
+	{
+		put_vnode(vn);
+		return EPERM; 
+	}
+	if(vn->v_ref_count != 1) { return EBUSY;}
+	requestState = req_defrag(vn->v_fs_e, vn->v_inode_nr); /* Throw request to fs process */
+	put_vnode(vn);
+	return requestState;
+}
+
+
diff -urN --exclude .svn --exclude '*~' ./src_orig/servers/vfs/Makefile ./src/servers/vfs/Makefile
--- ./src_orig/servers/vfs/Makefile	2010-08-25 15:06:43.000000000 +0200
+++ ./src/servers/vfs/Makefile	2013-04-23 13:08:14.000000000 +0200
@@ -4,7 +4,8 @@
 	path.c device.c mount.c link.c exec.c \
 	filedes.c stadir.c protect.c time.c \
 	lock.c misc.c utility.c select.c table.c \
-	vnode.c vmnt.c request.c fscall.c gcov.c
+	vnode.c vmnt.c request.c fscall.c gcov.c \
+	frag.c
 
 DPADD+=	${LIBSYS} ${LIBTIMERS}
 LDADD+=	-lsys -ltimers
diff -urN --exclude .svn --exclude '*~' ./src_orig/servers/vfs/proto.h ./src/servers/vfs/proto.h
--- ./src_orig/servers/vfs/proto.h	2010-08-30 15:44:07.000000000 +0200
+++ ./src/servers/vfs/proto.h	2013-05-07 09:55:10.000000000 +0200
@@ -68,6 +68,10 @@
 _PROTOTYPE( int do_cancel_fd, (void)					);
 _PROTOTYPE( void close_filp, (struct filp *fp)				);
 
+/* frag.c */
+_PROTOTYPE( int do_nfrag, (void)					);
+_PROTOTYPE( int do_defrag, (void)					);
+
 /* fscall.c */
 _PROTOTYPE( void nested_fs_call, (message *m)				);
 _PROTOTYPE( void nested_dev_call, (message *m)				);
@@ -186,6 +190,7 @@
 	uid_t newuid, gid_t newgid, mode_t *new_modep)	);
 _PROTOTYPE( int req_create, (int fs_e, ino_t inode_nr, int omode,
 		uid_t uid, gid_t gid, char *path, node_details_t *res)	); 
+_PROTOTYPE( int req_defrag, (int fs_e, ino_t inode_nr)			);
 _PROTOTYPE( int req_flush, (endpoint_t fs_e, dev_t dev)			);
 _PROTOTYPE( int req_fstatfs, (int fs_e, int who_e, char *buf)		);
 _PROTOTYPE( int req_statvfs, (int fs_e, int who_e, char *buf)		);
@@ -209,6 +214,7 @@
 _PROTOTYPE( int req_newnode, (endpoint_t fs_e, uid_t uid,
 				gid_t gid, mode_t dmode,
 				dev_t dev, struct node_details *res)	);
+_PROTOTYPE( int req_nfrag, (int fs_e, ino_t inode_nr)			);
 _PROTOTYPE( int req_putnode, (int fs_e, ino_t inode_nr, int count)	);
 _PROTOTYPE( int req_rdlink, (endpoint_t fs_e, ino_t inode_nr,
 				endpoint_t who_e, char *buf, size_t len, 
@@ -294,3 +300,7 @@
 _PROTOTYPE( void init_select, (void)					);
 _PROTOTYPE( void select_unsuspend_by_endpt, (endpoint_t proc)		);
 _PROTOTYPE( int select_notified, (int major, int minor, int ops)	);
+
+
+
+
diff -urN --exclude .svn --exclude '*~' ./src_orig/servers/vfs/request.c ./src/servers/vfs/request.c
--- ./src_orig/servers/vfs/request.c	2010-08-30 15:44:07.000000000 +0200
+++ ./src/servers/vfs/request.c	2013-05-08 14:22:57.000000000 +0200
@@ -1051,6 +1051,45 @@
   return fs_sendrec(fs_e, &m);
 }
 
+/*===========================================================================*
+ *				req_nfrag	      			     *
+ *===========================================================================*/
+PUBLIC int req_nfrag(fs_e, inode_nr)
+endpoint_t fs_e;
+ino_t inode_nr;
+{
+	int state;
+	m_in.m_type = REQ_NFRAG;
+	m_in.RES_INODE_NR = inode_nr;
+	state = fs_sendrec(fs_e, &m_in);
+	printf(state);
+	if(state < 0){
+		return state;
+	}else{
+		return m_in.RES_FRAGS;
+	}
+}
+
+
+/*===========================================================================*
+ *				req_defrag	      			     *
+ *===========================================================================*/
+PUBLIC int req_defrag(fs_e, inode_nr)
+endpoint_t fs_e;
+ino_t inode_nr;
+{
+	int state;
+	m_in.m_type = REQ_DEFRAG;
+	m_in.RES_INODE_NR = inode_nr;
+	state = fs_sendrec(fs_e, &m_in);
+	printf(state);
+	if(state < 0){
+		return state;
+	}else{
+		return m_in.RES_FRAGS;
+	}
+}
+
 
 /*===========================================================================*
  *				fs_sendrec				     *
diff -urN --exclude .svn --exclude '*~' ./src_orig/servers/vfs/table.c ./src/servers/vfs/table.c
--- ./src_orig/servers/vfs/table.c	2010-08-30 15:44:07.000000000 +0200
+++ ./src/servers/vfs/table.c	2013-04-23 13:12:35.000000000 +0200
@@ -80,12 +80,12 @@
 	no_sys,		/* 62 = (setsid)*/
 	no_sys,		/* 63 = (getpgrp)*/
 	no_sys,		/* 64 = (itimer)*/
-	no_sys,		/* 65 = unused	*/
-	no_sys, 	/* 66 = unused  */
+	no_sys,		/* 65 = unused*/
+	no_sys, 	/* 66 = unused*/
 	no_sys,		/* 67 = unused	*/
 	no_sys,		/* 68 = unused	*/
-	no_sys,		/* 69 = unused  */
-	no_sys,		/* 70 = unused  */
+	do_nfrag,	/* 69 = nfrag  */
+	do_defrag,	/* 70 = defrag */
 	no_sys,		/* 71 = (sigaction) */
 	no_sys,		/* 72 = (sigsuspend) */
 	no_sys,		/* 73 = (sigpending) */
